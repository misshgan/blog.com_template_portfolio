{"version":3,"file":"index.js","sources":["../../node_modules/photoswipe/dist/photoswipe-lightbox.esm.js","../../node_modules/photoswipe/dist/photoswipe.esm.js","../../node_modules/photoswipe-dynamic-caption-plugin/photoswipe-dynamic-caption-plugin.esm.js","../../node_modules/swiper/shared/ssr-window.esm.mjs","../../node_modules/swiper/shared/utils.mjs","../../node_modules/swiper/shared/swiper-core.mjs","../../node_modules/swiper/modules/scrollbar.mjs","../../node_modules/swiper/shared/create-element-if-not-defined.mjs","../../node_modules/swiper/shared/classes-to-selector.mjs","../../node_modules/lazysizes/lazysizes.js","../../node_modules/lazysizes/plugins/parent-fit/ls.parent-fit.js","../js/index.js","../js/swiper.js","../js/photoSwipe.js"],"sourcesContent":["/*!\n  * PhotoSwipe Lightbox 5.4.3 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName);\n\n  if (className) {\n    el.className = className;\n  }\n\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n\n  return el;\n}\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\n\nfunction toTransformString(x, y, scale) {\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\n\n  if (scale !== undefined) {\n    propValue += ` scale3d(${scale},${scale},1)`;\n  }\n\n  return propValue;\n}\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\n\nfunction setWidthHeight(el, w, h) {\n  el.style.width = typeof w === 'number' ? `${w}px` : w;\n  el.style.height = typeof h === 'number' ? `${h}px` : h;\n}\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\n\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\n\nfunction specialKeyUsed(e) {\n  return 'button' in e && e.button === 1 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\n}\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\n\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  /** @type {HTMLElement[]} */\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\n\nfunction isPswpClass(fn) {\n  return typeof fn === 'function' && fn.prototype && fn.prototype.goTo;\n}\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\n\nfunction isSafari() {\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../slide/content.js').default} ContentDefault */\n\n/** @typedef {import('../slide/slide.js').default} Slide */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\n\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\n\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\n\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\nclass PhotoSwipeEvent {\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\n  constructor(type, details) {\n    this.type = type;\n    this.defaultPrevented = false;\n\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n}\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\n\n\nclass Eventable {\n  constructor() {\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\n    this._listeners = {};\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\n\n    this._filters = {};\n    /** @type {PhotoSwipe | undefined} */\n\n    this.pswp = undefined;\n    /** @type {PhotoSwipeOptions | undefined} */\n\n    this.options = undefined;\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\n\n\n  addFilter(name, fn, priority = 100) {\n    var _this$_filters$name, _this$_filters$name2, _this$pswp;\n\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n\n    (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.push({\n      fn,\n      priority\n    });\n    (_this$_filters$name2 = this._filters[name]) === null || _this$_filters$name2 === void 0 || _this$_filters$name2.sort((f1, f2) => f1.priority - f2.priority);\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.addFilter(name, fn, priority);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\n\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      // @ts-expect-error\n      this._filters[name] = this._filters[name].filter(filter => filter.fn !== fn);\n    }\n\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\n\n\n  applyFilters(name, ...args) {\n    var _this$_filters$name3;\n\n    (_this$_filters$name3 = this._filters[name]) === null || _this$_filters$name3 === void 0 || _this$_filters$name3.forEach(filter => {\n      // @ts-expect-error\n      args[0] = filter.fn.apply(this, args);\n    });\n    return args[0];\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  on(name, fn) {\n    var _this$_listeners$name, _this$pswp2;\n\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n\n    (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.push(fn); // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n\n    (_this$pswp2 = this.pswp) === null || _this$pswp2 === void 0 || _this$pswp2.on(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  off(name, fn) {\n    var _this$pswp3;\n\n    if (this._listeners[name]) {\n      // @ts-expect-error\n      this._listeners[name] = this._listeners[name].filter(listener => fn !== listener);\n    }\n\n    (_this$pswp3 = this.pswp) === null || _this$pswp3 === void 0 || _this$pswp3.off(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\n\n\n  dispatch(name, details) {\n    var _this$_listeners$name2;\n\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event =\n    /** @type {AugmentedEvent<T>} */\n    new PhotoSwipeEvent(name, details);\n    (_this$_listeners$name2 = this._listeners[name]) === null || _this$_listeners$name2 === void 0 || _this$_listeners$name2.forEach(listener => {\n      listener.call(this, event);\n    });\n    return event;\n  }\n\n}\n\nclass Placeholder {\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\n    this.element = createElement('pswp__img pswp__img--placeholder', imageSrc ? 'img' : 'div', container);\n\n    if (imageSrc) {\n      const imgEl =\n      /** @type {HTMLImageElement} */\n      this.element;\n      imgEl.decoding = 'async';\n      imgEl.alt = '';\n      imgEl.src = imageSrc;\n      imgEl.setAttribute('role', 'presentation');\n    }\n\n    this.element.setAttribute('aria-hidden', 'true');\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  destroy() {\n    var _this$element;\n\n    if ((_this$element = this.element) !== null && _this$element !== void 0 && _this$element.parentNode) {\n      this.element.remove();\n    }\n\n    this.element = null;\n  }\n\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../util/util.js').LoadState} LoadState */\n\nclass Content {\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\n  constructor(itemData, instance, index) {\n    this.instance = instance;\n    this.data = itemData;\n    this.index = index;\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {Placeholder | undefined} */\n\n    this.placeholder = undefined;\n    /** @type {Slide | undefined} */\n\n    this.slide = undefined;\n    this.displayedImageWidth = 0;\n    this.displayedImageHeight = 0;\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n    this.isAttached = false;\n    this.hasSlide = false;\n    this.isDecoding = false;\n    /** @type {LoadState} */\n\n    this.state = LOAD_STATE.IDLE;\n\n    if (this.data.type) {\n      this.type = this.data.type;\n    } else if (this.data.src) {\n      this.type = 'image';\n    } else {\n      this.type = 'html';\n    }\n\n    this.instance.dispatch('contentInit', {\n      content: this\n    });\n  }\n\n  removePlaceholder() {\n    if (this.placeholder && !this.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not rendered\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = undefined;\n        }\n      }, 1000);\n    }\n  }\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\n\n\n  load(isLazy, reload) {\n    if (this.slide && this.usePlaceholder()) {\n      if (!this.placeholder) {\n        const placeholderSrc = this.instance.applyFilters('placeholderSrc', // use  image-based placeholder only for the first slide,\n        // as rendering (even small stretched thumbnail) is an expensive operation\n        this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false, this);\n        this.placeholder = new Placeholder(placeholderSrc, this.slide.container);\n      } else {\n        const placeholderEl = this.placeholder.element; // Add placeholder to DOM if it was already created\n\n        if (placeholderEl && !placeholderEl.parentElement) {\n          this.slide.container.prepend(placeholderEl);\n        }\n      }\n    }\n\n    if (this.element && !reload) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentLoad', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.isImageContent()) {\n      this.element = createElement('pswp__img', 'img'); // Start loading only after width is defined, as sizes might depend on it.\n      // Due to Safari feature, we must define sizes before srcset.\n\n      if (this.displayedImageWidth) {\n        this.loadImage(isLazy);\n      }\n    } else {\n      this.element = createElement('pswp__content', 'div');\n      this.element.innerHTML = this.data.html || '';\n    }\n\n    if (reload && this.slide) {\n      this.slide.updateContentSize(true);\n    }\n  }\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\n\n\n  loadImage(isLazy) {\n    var _this$data$src, _this$data$alt;\n\n    if (!this.isImageContent() || !this.element || this.instance.dispatch('contentLoadImage', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    const imageElement =\n    /** @type HTMLImageElement */\n    this.element;\n    this.updateSrcsetSizes();\n\n    if (this.data.srcset) {\n      imageElement.srcset = this.data.srcset;\n    }\n\n    imageElement.src = (_this$data$src = this.data.src) !== null && _this$data$src !== void 0 ? _this$data$src : '';\n    imageElement.alt = (_this$data$alt = this.data.alt) !== null && _this$data$alt !== void 0 ? _this$data$alt : '';\n    this.state = LOAD_STATE.LOADING;\n\n    if (imageElement.complete) {\n      this.onLoaded();\n    } else {\n      imageElement.onload = () => {\n        this.onLoaded();\n      };\n\n      imageElement.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\n\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.hasSlide = true;\n    this.instance = slide.pswp; // todo: do we need to unset slide?\n  }\n  /**\r\n   * Content load success handler\r\n   */\n\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide && this.element) {\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        content: this\n      }); // if content is reloaded\n\n      if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {\n        this.append();\n        this.slide.updateContentSize(true);\n      }\n\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n        this.removePlaceholder();\n      }\n    }\n  }\n  /**\r\n   * Content load error handler\r\n   */\n\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.displayError();\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        isError: true,\n        content: this\n      });\n      this.instance.dispatch('loadError', {\n        slide: this.slide,\n        content: this\n      });\n    }\n  }\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\n\n\n  isLoading() {\n    return this.instance.applyFilters('isContentLoading', this.state === LOAD_STATE.LOADING, this);\n  }\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\n\n\n  isError() {\n    return this.state === LOAD_STATE.ERROR;\n  }\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\n\n\n  isImageContent() {\n    return this.type === 'image';\n  }\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    }\n\n    if (this.instance.dispatch('contentResize', {\n      content: this,\n      width,\n      height\n    }).defaultPrevented) {\n      return;\n    }\n\n    setWidthHeight(this.element, width, height);\n\n    if (this.isImageContent() && !this.isError()) {\n      const isInitialSizeUpdate = !this.displayedImageWidth && width;\n      this.displayedImageWidth = width;\n      this.displayedImageHeight = height;\n\n      if (isInitialSizeUpdate) {\n        this.loadImage(false);\n      } else {\n        this.updateSrcsetSizes();\n      }\n\n      if (this.slide) {\n        this.instance.dispatch('imageSizeChange', {\n          slide: this.slide,\n          width,\n          height,\n          content: this\n        });\n      }\n    }\n  }\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\n\n\n  isZoomable() {\n    return this.instance.applyFilters('isContentZoomable', this.isImageContent() && this.state !== LOAD_STATE.ERROR, this);\n  }\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\n\n\n  updateSrcsetSizes() {\n    // Handle srcset sizes attribute.\n    //\n    // Never lower quality, if it was increased previously.\n    // Chrome does this automatically, Firefox and Safari do not,\n    // so we store largest used size in dataset.\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\n      return;\n    }\n\n    const image =\n    /** @type HTMLImageElement */\n    this.element;\n    const sizesWidth = this.instance.applyFilters('srcsetSizesWidth', this.displayedImageWidth, this);\n\n    if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\n      image.sizes = sizesWidth + 'px';\n      image.dataset.largestUsedSize = String(sizesWidth);\n    }\n  }\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\n\n\n  usePlaceholder() {\n    return this.instance.applyFilters('useContentPlaceholder', this.isImageContent(), this);\n  }\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\n\n\n  lazyLoad() {\n    if (this.instance.dispatch('contentLazyLoad', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.load(true);\n  }\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\n\n\n  keepPlaceholder() {\n    return this.instance.applyFilters('isKeepingPlaceholder', this.isLoading(), this);\n  }\n  /**\r\n   * Destroy the content\r\n   */\n\n\n  destroy() {\n    this.hasSlide = false;\n    this.slide = undefined;\n\n    if (this.instance.dispatch('contentDestroy', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.remove();\n\n    if (this.placeholder) {\n      this.placeholder.destroy();\n      this.placeholder = undefined;\n    }\n\n    if (this.isImageContent() && this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = undefined;\n    }\n  }\n  /**\r\n   * Display error message\r\n   */\n\n\n  displayError() {\n    if (this.slide) {\n      var _this$instance$option, _this$instance$option2;\n\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\n      errorMsgEl.innerText = (_this$instance$option = (_this$instance$option2 = this.instance.options) === null || _this$instance$option2 === void 0 ? void 0 : _this$instance$option2.errorMsg) !== null && _this$instance$option !== void 0 ? _this$instance$option : '';\n      errorMsgEl =\n      /** @type {HTMLDivElement} */\n      this.instance.applyFilters('contentErrorElement', errorMsgEl, this);\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\n      this.element.appendChild(errorMsgEl);\n      this.slide.container.innerText = '';\n      this.slide.container.appendChild(this.element);\n      this.slide.updateContentSize(true);\n      this.removePlaceholder();\n    }\n  }\n  /**\r\n   * Append the content\r\n   */\n\n\n  append() {\n    if (this.isAttached || !this.element) {\n      return;\n    }\n\n    this.isAttached = true;\n\n    if (this.state === LOAD_STATE.ERROR) {\n      this.displayError();\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppend', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    const supportsDecode = ('decode' in this.element);\n\n    if (this.isImageContent()) {\n      // Use decode() on nearby slides\n      //\n      // Nearby slide images are in DOM and not hidden via display:none.\n      // However, they are placed offscreen (to the left and right side).\n      //\n      // Some browsers do not composite the image until it's actually visible,\n      // using decode() helps.\n      //\n      // You might ask \"why dont you just decode() and then append all images\",\n      // that's because I want to show image before it's fully loaded,\n      // as browser can render parts of image while it is loading.\n      // We do not do this in Safari due to partial loading bug.\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\n        this.isDecoding = true; // purposefully using finally instead of then,\n        // as if srcset sizes changes dynamically - it may cause decode error\n\n        /** @type {HTMLImageElement} */\n\n        this.element.decode().catch(() => {}).finally(() => {\n          this.isDecoding = false;\n          this.appendImage();\n        });\n      } else {\n        this.appendImage();\n      }\n    } else if (this.slide && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n  }\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\n\n\n  activate() {\n    if (this.instance.dispatch('contentActivate', {\n      content: this\n    }).defaultPrevented || !this.slide) {\n      return;\n    }\n\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImage();\n    } else if (this.isError()) {\n      this.load(false, true); // try to reload\n    }\n\n    if (this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\n    }\n  }\n  /**\r\n   * Deactivate the content\r\n   */\n\n\n  deactivate() {\n    this.instance.dispatch('contentDeactivate', {\n      content: this\n    });\n\n    if (this.slide && this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\r\n   * Remove the content from DOM\r\n   */\n\n\n  remove() {\n    this.isAttached = false;\n\n    if (this.instance.dispatch('contentRemove', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n\n    if (this.placeholder && this.placeholder.element) {\n      this.placeholder.element.remove();\n    }\n  }\n  /**\r\n   * Append the image content to slide container\r\n   */\n\n\n  appendImage() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppendImage', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    } // ensure that element exists and is not already appended\n\n\n    if (this.slide && this.element && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n      this.removePlaceholder();\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\n\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\n  let paddingValue = 0;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1); // @ts-expect-error\n\n    if (options[legacyPropName]) {\n      // @ts-expect-error\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return Number(paddingValue) || 0;\n}\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\n\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\n  return {\n    x: viewportSize.x - parsePaddingOption('left', options, viewportSize, itemData, index) - parsePaddingOption('right', options, viewportSize, itemData, index),\n    y: viewportSize.y - parsePaddingOption('top', options, viewportSize, itemData, index) - parsePaddingOption('bottom', options, viewportSize, itemData, index)\n  };\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\n\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\n\nclass ZoomLevel {\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n    /** @type { Point | null } */\n\n    this.panAreaSize = null;\n    /** @type { Point | null } */\n\n    this.elementSize = null;\n    this.fit = 1;\n    this.fill = 1;\n    this.vFill = 1;\n    this.initial = 1;\n    this.secondary = 1;\n    this.max = 1;\n    this.min = 1;\n  }\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\n\n\n  update(maxWidth, maxHeight, panAreaSize) {\n    /** @type {Point} */\n    const elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n    this.elementSize = elementSize;\n    this.panAreaSize = panAreaSize;\n    const hRatio = panAreaSize.x / elementSize.x;\n    const vRatio = panAreaSize.y / elementSize.y;\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio); // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n\n    this.vFill = Math.min(1, vRatio);\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(this.initial, this.secondary, this._getMax());\n    this.min = Math.min(this.fit, this.initial, this.secondary);\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', {\n        zoomLevels: this,\n        slideData: this.itemData\n      });\n    }\n  }\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\n\n\n  _parseZoomLevelOption(optionPrefix) {\n    const optionName =\n    /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */\n    optionPrefix + 'ZoomLevel';\n    const optionValue = this.options[optionName];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    } // 3x of \"fit\" state, but not larger than original\n\n\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getMax() {\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\n  }\n\n}\n\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\n\nfunction lazyLoadData(itemData, instance, index) {\n  const content = instance.createContentFromData(itemData, index);\n  /** @type {ZoomLevel | undefined} */\n\n  let zoomLevel;\n  const {\n    options\n  } = instance; // We need to know dimensions of the image to preload it,\n  // as it might use srcset, and we need to define sizes\n\n  if (options) {\n    zoomLevel = new ZoomLevel(options, itemData, -1);\n    let viewportSize;\n\n    if (instance.pswp) {\n      viewportSize = instance.pswp.viewportSize;\n    } else {\n      viewportSize = getViewportSize(options, instance);\n    }\n\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\n    zoomLevel.update(content.width, content.height, panAreaSize);\n  }\n\n  content.lazyLoad();\n\n  if (zoomLevel) {\n    content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));\n  }\n\n  return content;\n}\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\n\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', {\n    index,\n    itemData\n  }).defaultPrevented) {\n    return;\n  }\n\n  return lazyLoadData(itemData, instance, index);\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\n\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\n\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\n\nclass PhotoSwipeBase extends Eventable {\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\n  getNumItems() {\n    var _this$options;\n\n    let numItems = 0;\n    const dataSource = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.dataSource;\n\n    if (dataSource && 'length' in dataSource) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource && 'gallery' in dataSource) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    } // legacy event, before filters were introduced\n\n\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\n\n\n  createContentFromData(slideData, index) {\n    return new Content(slideData, this, index);\n  }\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\n\n\n  getItemData(index) {\n    var _this$options2;\n\n    const dataSource = (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.dataSource;\n    /** @type {SlideData | HTMLElement} */\n\n    let dataSourceItem = {};\n\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && 'gallery' in dataSource) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallery and children options\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    } // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n\n\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\n\n\n  _getGalleryDOMElements(galleryElement) {\n    var _this$options3, _this$options4;\n\n    if ((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.children || (_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.childSelector) {\n      return getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];\n    }\n\n    return [galleryElement];\n  }\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\n\n\n  _domElementToItemData(element) {\n    /** @type {SlideData} */\n    const itemData = {\n      element\n    };\n    const linkEl =\n    /** @type {HTMLAnchorElement} */\n    element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n      if (linkEl.dataset.pswpSrcset) {\n        itemData.srcset = linkEl.dataset.pswpSrcset;\n      }\n\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0; // support legacy w & h properties\n\n      itemData.w = itemData.width;\n      itemData.h = itemData.height;\n\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n\n      const thumbnailEl = element.querySelector('img');\n\n      if (thumbnailEl) {\n        var _thumbnailEl$getAttri;\n\n        // msrc is URL to placeholder image that's displayed before large image is loaded\n        // by default it's displayed only for the first slide\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = (_thumbnailEl$getAttri = thumbnailEl.getAttribute('alt')) !== null && _thumbnailEl$getAttri !== void 0 ? _thumbnailEl$getAttri : '';\n      }\n\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n\n    return this.applyFilters('domItemData', itemData, element, linkEl);\n  }\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\n\n\n  lazyLoadData(itemData, index) {\n    return lazyLoadData(itemData, this, index);\n  }\n\n}\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/content.js').default} Content */\n\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\n\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\n\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\n\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\n  constructor(options) {\n    super();\n    /** @type {PhotoSwipeOptions} */\n\n    this.options = options || {};\n    this._uid = 0;\n    this.shouldOpen = false;\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\n\n    this._preloadedContent = undefined;\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\n  }\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\n\n\n  init() {\n    // Bind click events to each gallery\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector).forEach(galleryElement => {\n      galleryElement.addEventListener('click', this.onThumbnailsClick, false);\n    });\n  }\n  /**\r\n   * @param {MouseEvent} e\r\n   */\n\n\n  onThumbnailsClick(e) {\n    // Exit and allow default browser action if:\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\n    || window.pswp) {\n      // ... if PhotoSwipe is already open\n      return;\n    } // If both clientX and clientY are 0 or not defined,\n    // the event is likely triggered by keyboard,\n    // so we do not pass the initialPoint\n    //\n    // Note that some screen readers emulate the mouse position,\n    // so it's not the ideal way to detect them.\n    //\n\n    /** @type {Point | null} */\n\n\n    let initialPoint = {\n      x: e.clientX,\n      y: e.clientY\n    };\n\n    if (!initialPoint.x && !initialPoint.y) {\n      initialPoint = null;\n    }\n\n    let clickedIndex = this.getClickedIndex(e);\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\n    /** @type {DataSource} */\n\n    const dataSource = {\n      gallery:\n      /** @type {HTMLElement} */\n      e.currentTarget\n    };\n\n    if (clickedIndex >= 0) {\n      e.preventDefault();\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\n    }\n  }\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\n\n\n  getClickedIndex(e) {\n    // legacy option\n    if (this.options.getClickedIndexFn) {\n      return this.options.getClickedIndexFn.call(this, e);\n    }\n\n    const clickedTarget =\n    /** @type {HTMLElement} */\n    e.target;\n    const childElements = getElementsFromOption(this.options.children, this.options.childSelector,\n    /** @type {HTMLElement} */\n    e.currentTarget);\n    const clickedChildIndex = childElements.findIndex(child => child === clickedTarget || child.contains(clickedTarget));\n\n    if (clickedChildIndex !== -1) {\n      return clickedChildIndex;\n    } else if (this.options.children || this.options.childSelector) {\n      // click wasn't on a child element\n      return -1;\n    } // There is only one item (which is the gallery)\n\n\n    return 0;\n  }\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\n\n\n  loadAndOpen(index, dataSource, initialPoint) {\n    // Check if the gallery is already open\n    if (window.pswp || !this.options) {\n      return false;\n    } // Use the first gallery element if dataSource is not provided\n\n\n    if (!dataSource && this.options.gallery && this.options.children) {\n      const galleryElements = getElementsFromOption(this.options.gallery);\n\n      if (galleryElements[0]) {\n        dataSource = {\n          gallery: galleryElements[0]\n        };\n      }\n    } // set initial index\n\n\n    this.options.index = index; // define options for PhotoSwipe constructor\n\n    this.options.initialPointerPos = initialPoint;\n    this.shouldOpen = true;\n    this.preload(index, dataSource);\n    return true;\n  }\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\n\n\n  preload(index, dataSource) {\n    const {\n      options\n    } = this;\n\n    if (dataSource) {\n      options.dataSource = dataSource;\n    } // Add the main module\n\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\n\n\n    const promiseArray = [];\n    const pswpModuleType = typeof options.pswpModule;\n\n    if (isPswpClass(options.pswpModule)) {\n      promiseArray.push(Promise.resolve(\n      /** @type {Type<PhotoSwipe>} */\n      options.pswpModule));\n    } else if (pswpModuleType === 'string') {\n      throw new Error('pswpModule as string is no longer supported');\n    } else if (pswpModuleType === 'function') {\n      promiseArray.push(\n      /** @type {() => Promise<Type<PhotoSwipe>>} */\n      options.pswpModule());\n    } else {\n      throw new Error('pswpModule is not valid');\n    } // Add custom-defined promise, if any\n\n\n    if (typeof options.openPromise === 'function') {\n      // allow developers to perform some task before opening\n      promiseArray.push(options.openPromise());\n    }\n\n    if (options.preloadFirstSlide !== false && index >= 0) {\n      this._preloadedContent = lazyLoadSlide(index, this);\n    } // Wait till all promises resolve and open PhotoSwipe\n\n\n    const uid = ++this._uid;\n    Promise.all(promiseArray).then(iterableModules => {\n      if (this.shouldOpen) {\n        const mainModule = iterableModules[0];\n\n        this._openPhotoswipe(mainModule, uid);\n      }\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\n\n\n  _openPhotoswipe(module, uid) {\n    // Cancel opening if UID doesn't match the current one\n    // (if user clicked on another gallery item before current was loaded).\n    //\n    // Or if shouldOpen flag is set to false\n    // (developer may modify it via public API)\n    if (uid !== this._uid && this.shouldOpen) {\n      return;\n    }\n\n    this.shouldOpen = false; // PhotoSwipe is already open\n\n    if (window.pswp) {\n      return;\n    }\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\n\n\n    const pswp = typeof module === 'object' ? new module.default(this.options) // eslint-disable-line\n    : new module(this.options); // eslint-disable-line\n\n    this.pswp = pswp;\n    window.pswp = pswp; // map listeners from Lightbox to PhotoSwipe Core\n\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\n\n    Object.keys(this._listeners).forEach(name => {\n      var _this$_listeners$name;\n\n      (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.forEach(fn => {\n        pswp.on(name,\n        /** @type {EventCallback<typeof name>} */\n        fn);\n      });\n    }); // same with filters\n\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\n\n    Object.keys(this._filters).forEach(name => {\n      var _this$_filters$name;\n\n      (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.forEach(filter => {\n        pswp.addFilter(name, filter.fn, filter.priority);\n      });\n    });\n\n    if (this._preloadedContent) {\n      pswp.contentLoader.addToCache(this._preloadedContent);\n      this._preloadedContent = undefined;\n    }\n\n    pswp.on('destroy', () => {\n      // clean up public variables\n      this.pswp = undefined;\n      delete window.pswp;\n    });\n    pswp.init();\n  }\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\n\n\n  destroy() {\n    var _this$pswp;\n\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.destroy();\n    this.shouldOpen = false;\n    this._listeners = {};\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector).forEach(galleryElement => {\n      galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\n    });\n  }\n\n}\n\nexport { PhotoSwipeLightbox as default };\n//# sourceMappingURL=photoswipe-lightbox.esm.js.map\n","/*!\n  * PhotoSwipe 5.4.3 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName);\n\n  if (className) {\n    el.className = className;\n  }\n\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n\n  return el;\n}\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\n\nfunction equalizePoints(p1, p2) {\n  p1.x = p2.x;\n  p1.y = p2.y;\n\n  if (p2.id !== undefined) {\n    p1.id = p2.id;\n  }\n\n  return p1;\n}\n/**\r\n * @param {Point} p\r\n */\n\nfunction roundPoint(p) {\n  p.x = Math.round(p.x);\n  p.y = Math.round(p.y);\n}\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\n\nfunction getDistanceBetween(p1, p2) {\n  const x = Math.abs(p1.x - p2.x);\n  const y = Math.abs(p1.y - p2.y);\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\n\nfunction pointsEqual(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\n\nfunction clamp(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\n\nfunction toTransformString(x, y, scale) {\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\n\n  if (scale !== undefined) {\n    propValue += ` scale3d(${scale},${scale},1)`;\n  }\n\n  return propValue;\n}\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\n\nfunction setTransform(el, x, y, scale) {\n  el.style.transform = toTransformString(x, y, scale);\n}\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\n\nfunction setTransitionStyle(el, prop, duration, ease) {\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\n  el.style.transition = prop ? `${prop} ${duration}ms ${ease || defaultCSSEasing}` : 'none';\n}\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\n\nfunction setWidthHeight(el, w, h) {\n  el.style.width = typeof w === 'number' ? `${w}px` : w;\n  el.style.height = typeof h === 'number' ? `${h}px` : h;\n}\n/**\r\n * @param {HTMLElement} el\r\n */\n\nfunction removeTransitionStyle(el) {\n  setTransitionStyle(el);\n}\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\n\nfunction decodeImage(img) {\n  if ('decode' in img) {\n    return img.decode().catch(() => {});\n  }\n\n  if (img.complete) {\n    return Promise.resolve(img);\n  }\n\n  return new Promise((resolve, reject) => {\n    img.onload = () => resolve(img);\n\n    img.onerror = reject;\n  });\n}\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\n\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\n\nfunction specialKeyUsed(e) {\n  return 'button' in e && e.button === 1 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\n}\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\n\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  /** @type {HTMLElement[]} */\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\n\nfunction isSafari() {\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\n}\n\n// Detect passive event listener support\nlet supportsPassive = false;\n/* eslint-disable */\n\ntry {\n  /* @ts-ignore */\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    }\n  }));\n} catch (e) {}\n/* eslint-enable */\n\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\n\n\nclass DOMEvents {\n  constructor() {\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\n    this._pool = [];\n  }\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\n\n\n  add(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive);\n  }\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\n\n\n  remove(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive, true);\n  }\n  /**\r\n   * Removes all bound events\r\n   */\n\n\n  removeAll() {\n    this._pool.forEach(poolItem => {\n      this._toggleListener(poolItem.target, poolItem.type, poolItem.listener, poolItem.passive, true, true);\n    });\n\n    this._pool = [];\n  }\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\n\n\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\n    if (!target) {\n      return;\n    }\n\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\n    const types = type.split(' ');\n    types.forEach(eType => {\n      if (eType) {\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\n        // so developer doesn't need to do this manually\n        if (!skipPool) {\n          if (unbind) {\n            // Remove from the events pool\n            this._pool = this._pool.filter(poolItem => {\n              return poolItem.type !== eType || poolItem.listener !== listener || poolItem.target !== target;\n            });\n          } else {\n            // Add to the events pool\n            this._pool.push({\n              target,\n              type: eType,\n              listener,\n              passive\n            });\n          }\n        } // most PhotoSwipe events call preventDefault,\n        // and we do not need browser to scroll the page\n\n\n        const eventOptions = supportsPassive ? {\n          passive: passive || false\n        } : false;\n        target[methodName](eType, listener, eventOptions);\n      }\n    });\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\n\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\n  let paddingValue = 0;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1); // @ts-expect-error\n\n    if (options[legacyPropName]) {\n      // @ts-expect-error\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return Number(paddingValue) || 0;\n}\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\n\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\n  return {\n    x: viewportSize.x - parsePaddingOption('left', options, viewportSize, itemData, index) - parsePaddingOption('right', options, viewportSize, itemData, index),\n    y: viewportSize.y - parsePaddingOption('top', options, viewportSize, itemData, index) - parsePaddingOption('bottom', options, viewportSize, itemData, index)\n  };\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {Record<Axis, number>} Point */\n\n/** @typedef {'x' | 'y'} Axis */\n\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\n\nclass PanBounds {\n  /**\r\n   * @param {Slide} slide\r\n   */\n  constructor(slide) {\n    this.slide = slide;\n    this.currZoomLevel = 1;\n    this.center =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n    this.max =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n    this.min =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  update(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n\n    if (!this.slide.width) {\n      this.reset();\n    } else {\n      this._updateAxis('x');\n\n      this._updateAxis('y');\n\n      this.slide.pswp.dispatch('calcBounds', {\n        slide: this.slide\n      });\n    }\n  }\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\n\n\n  _updateAxis(axis) {\n    const {\n      pswp\n    } = this.slide;\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\n    const paddingProp = axis === 'x' ? 'left' : 'top';\n    const padding = parsePaddingOption(paddingProp, pswp.options, pswp.viewportSize, this.slide.data, this.slide.index);\n    const panAreaSize = this.slide.panAreaSize[axis]; // Default position of element.\n    // By default, it is center of viewport:\n\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding; // maximum pan position\n\n    this.max[axis] = elSize > panAreaSize ? Math.round(panAreaSize - elSize) + padding : this.center[axis]; // minimum pan position\n\n    this.min[axis] = elSize > panAreaSize ? padding : this.center[axis];\n  } // _getZeroBounds\n\n\n  reset() {\n    this.center.x = 0;\n    this.center.y = 0;\n    this.max.x = 0;\n    this.max.y = 0;\n    this.min.x = 0;\n    this.min.y = 0;\n  }\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\n\n\n  correctPan(axis, panOffset) {\n    // checkPanBounds\n    return clamp(panOffset, this.max[axis], this.min[axis]);\n  }\n\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\n\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\n\nclass ZoomLevel {\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n    /** @type { Point | null } */\n\n    this.panAreaSize = null;\n    /** @type { Point | null } */\n\n    this.elementSize = null;\n    this.fit = 1;\n    this.fill = 1;\n    this.vFill = 1;\n    this.initial = 1;\n    this.secondary = 1;\n    this.max = 1;\n    this.min = 1;\n  }\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\n\n\n  update(maxWidth, maxHeight, panAreaSize) {\n    /** @type {Point} */\n    const elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n    this.elementSize = elementSize;\n    this.panAreaSize = panAreaSize;\n    const hRatio = panAreaSize.x / elementSize.x;\n    const vRatio = panAreaSize.y / elementSize.y;\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio); // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n\n    this.vFill = Math.min(1, vRatio);\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(this.initial, this.secondary, this._getMax());\n    this.min = Math.min(this.fit, this.initial, this.secondary);\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', {\n        zoomLevels: this,\n        slideData: this.itemData\n      });\n    }\n  }\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\n\n\n  _parseZoomLevelOption(optionPrefix) {\n    const optionName =\n    /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */\n    optionPrefix + 'ZoomLevel';\n    const optionValue = this.options[optionName];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    } // 3x of \"fit\" state, but not larger than original\n\n\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getMax() {\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n/**\r\n * Renders and allows to control a single slide\r\n */\n\nclass Slide {\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(data, index, pswp) {\n    this.data = data;\n    this.index = index;\n    this.pswp = pswp;\n    this.isActive = index === pswp.currIndex;\n    this.currentResolution = 0;\n    /** @type {Point} */\n\n    this.panAreaSize = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.pan = {\n      x: 0,\n      y: 0\n    };\n    this.isFirstSlide = this.isActive && !pswp.opener.isOpen;\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\n    this.pswp.dispatch('gettingData', {\n      slide: this,\n      data: this.data,\n      index\n    });\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\n    this.container = createElement('pswp__zoom-wrap', 'div');\n    /** @type {HTMLElement | null} */\n\n    this.holderElement = null;\n    this.currZoomLevel = 1;\n    /** @type {number} */\n\n    this.width = this.content.width;\n    /** @type {number} */\n\n    this.height = this.content.height;\n    this.heavyAppended = false;\n    this.bounds = new PanBounds(this);\n    this.prevDisplayedWidth = -1;\n    this.prevDisplayedHeight = -1;\n    this.pswp.dispatch('slideInit', {\n      slide: this\n    });\n  }\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\n\n\n  setIsActive(isActive) {\n    if (isActive && !this.isActive) {\n      // slide just became active\n      this.activate();\n    } else if (!isActive && this.isActive) {\n      // slide just became non-active\n      this.deactivate();\n    }\n  }\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\n\n\n  append(holderElement) {\n    this.holderElement = holderElement;\n    this.container.style.transformOrigin = '0 0'; // Slide appended to DOM\n\n    if (!this.data) {\n      return;\n    }\n\n    this.calculateSize();\n    this.load();\n    this.updateContentSize();\n    this.appendHeavy();\n    this.holderElement.appendChild(this.container);\n    this.zoomAndPanToInitial();\n    this.pswp.dispatch('firstZoomPan', {\n      slide: this\n    });\n    this.applyCurrentZoomPan();\n    this.pswp.dispatch('afterSetContent', {\n      slide: this\n    });\n\n    if (this.isActive) {\n      this.activate();\n    }\n  }\n\n  load() {\n    this.content.load(false);\n    this.pswp.dispatch('slideLoad', {\n      slide: this\n    });\n  }\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\n\n\n  appendHeavy() {\n    const {\n      pswp\n    } = this;\n    const appendHeavyNearby = true; // todo\n    // Avoid appending heavy elements during animations\n\n    if (this.heavyAppended || !pswp.opener.isOpen || pswp.mainScroll.isShifted() || !this.isActive && !appendHeavyNearby) {\n      return;\n    }\n\n    if (this.pswp.dispatch('appendHeavy', {\n      slide: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.heavyAppended = true;\n    this.content.append();\n    this.pswp.dispatch('appendHeavyContent', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\n\n\n  activate() {\n    this.isActive = true;\n    this.appendHeavy();\n    this.content.activate();\n    this.pswp.dispatch('slideActivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\n\n\n  deactivate() {\n    this.isActive = false;\n    this.content.deactivate();\n\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\n      // allow filtering\n      this.calculateSize();\n    } // reset zoom level\n\n\n    this.currentResolution = 0;\n    this.zoomAndPanToInitial();\n    this.applyCurrentZoomPan();\n    this.updateContentSize();\n    this.pswp.dispatch('slideDeactivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\n\n\n  destroy() {\n    this.content.hasSlide = false;\n    this.content.remove();\n    this.container.remove();\n    this.pswp.dispatch('slideDestroy', {\n      slide: this\n    });\n  }\n\n  resize() {\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\n      // Keep initial zoom level if it was before the resize,\n      // as well as when this slide is not active\n      // Reset position and scale to original state\n      this.calculateSize();\n      this.currentResolution = 0;\n      this.zoomAndPanToInitial();\n      this.applyCurrentZoomPan();\n      this.updateContentSize();\n    } else {\n      // readjust pan position if it's beyond the bounds\n      this.calculateSize();\n      this.bounds.update(this.currZoomLevel);\n      this.panTo(this.pan.x, this.pan.y);\n    }\n  }\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\n\n\n  updateContentSize(force) {\n    // Use initial zoom level\n    // if resolution is not defined (user didn't zoom yet)\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\n\n    if (!scaleMultiplier) {\n      return;\n    }\n\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\n\n    if (!this.sizeChanged(width, height) && !force) {\n      return;\n    }\n\n    this.content.setDisplayedSize(width, height);\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  sizeChanged(width, height) {\n    if (width !== this.prevDisplayedWidth || height !== this.prevDisplayedHeight) {\n      this.prevDisplayedWidth = width;\n      this.prevDisplayedHeight = height;\n      return true;\n    }\n\n    return false;\n  }\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\n\n\n  getPlaceholderElement() {\n    var _this$content$placeho;\n\n    return (_this$content$placeho = this.content.placeholder) === null || _this$content$placeho === void 0 ? void 0 : _this$content$placeho.element;\n  }\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\n\n\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\n    const {\n      pswp\n    } = this;\n\n    if (!this.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    pswp.dispatch('beforeZoomTo', {\n      destZoomLevel,\n      centerPoint,\n      transitionDuration\n    }); // stop all pan and zoom transitions\n\n    pswp.animations.stopAllPan(); // if (!centerPoint) {\n    //   centerPoint = pswp.getViewportCenterPoint();\n    // }\n\n    const prevZoomLevel = this.currZoomLevel;\n\n    if (!ignoreBounds) {\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\n    } // if (transitionDuration === undefined) {\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\n    // }\n\n\n    this.setZoomLevel(destZoomLevel);\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\n    roundPoint(this.pan);\n\n    const finishTransition = () => {\n      this._setResolution(destZoomLevel);\n\n      this.applyCurrentZoomPan();\n    };\n\n    if (!transitionDuration) {\n      finishTransition();\n    } else {\n      pswp.animations.startTransition({\n        isPan: true,\n        name: 'zoomTo',\n        target: this.container,\n        transform: this.getCurrentTransform(),\n        onComplete: finishTransition,\n        duration: transitionDuration,\n        easing: pswp.options.easing\n      });\n    }\n  }\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\n\n\n  toggleZoom(centerPoint) {\n    this.zoomTo(this.currZoomLevel === this.zoomLevels.initial ? this.zoomLevels.secondary : this.zoomLevels.initial, centerPoint, this.pswp.options.zoomAnimationDuration);\n  }\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  setZoomLevel(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n    this.bounds.update(this.currZoomLevel);\n  }\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\n\n\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\n\n    if (totalPanDistance === 0) {\n      return this.bounds.center[axis];\n    }\n\n    if (!point) {\n      point = this.pswp.getViewportCenterPoint();\n    }\n\n    if (!prevZoomLevel) {\n      prevZoomLevel = this.zoomLevels.initial;\n    }\n\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\n    return this.bounds.correctPan(axis, (this.pan[axis] - point[axis]) * zoomFactor + point[axis]);\n  }\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\n\n\n  panTo(panX, panY) {\n    this.pan.x = this.bounds.correctPan('x', panX);\n    this.pan.y = this.bounds.correctPan('y', panY);\n    this.applyCurrentZoomPan();\n  }\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\n\n\n  isPannable() {\n    return Boolean(this.width) && this.currZoomLevel > this.zoomLevels.fit;\n  }\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\n\n\n  isZoomable() {\n    return Boolean(this.width) && this.content.isZoomable();\n  }\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\n\n\n  applyCurrentZoomPan() {\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\n\n    if (this === this.pswp.currSlide) {\n      this.pswp.dispatch('zoomPanUpdate', {\n        slide: this\n      });\n    }\n  }\n\n  zoomAndPanToInitial() {\n    this.currZoomLevel = this.zoomLevels.initial; // pan according to the zoom level\n\n    this.bounds.update(this.currZoomLevel);\n    equalizePoints(this.pan, this.bounds.center);\n    this.pswp.dispatch('initialZoomPan', {\n      slide: this\n    });\n  }\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\n\n\n  _applyZoomTransform(x, y, zoom) {\n    zoom /= this.currentResolution || this.zoomLevels.initial;\n    setTransform(this.container, x, y, zoom);\n  }\n\n  calculateSize() {\n    const {\n      pswp\n    } = this;\n    equalizePoints(this.panAreaSize, getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index));\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\n    pswp.dispatch('calcSlideSize', {\n      slide: this\n    });\n  }\n  /** @returns {string} */\n\n\n  getCurrentTransform() {\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\n    return toTransformString(this.pan.x, this.pan.y, scale);\n  }\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\n\n\n  _setResolution(newResolution) {\n    if (newResolution === this.currentResolution) {\n      return;\n    }\n\n    this.currentResolution = newResolution;\n    this.updateContentSize();\n    this.pswp.dispatch('resolutionChanged');\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\nconst PAN_END_FRICTION = 0.35;\nconst VERTICAL_DRAG_FRICTION = 0.6; // 1 corresponds to the third of viewport height\n\nconst MIN_RATIO_TO_CLOSE = 0.4; // Minimum speed required to navigate\n// to next or previous slide\n\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\n\nfunction project(initialVelocity, decelerationRate) {\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\n}\n/**\r\n * Handles single pointer dragging\r\n */\n\n\nclass DragHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = gestures.pswp;\n    /** @type {Point} */\n\n    this.startPan = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  start() {\n    if (this.pswp.currSlide) {\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\n    }\n\n    this.pswp.animations.stopAll();\n  }\n\n  change() {\n    const {\n      p1,\n      prevP1,\n      dragAxis\n    } = this.gestures;\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (dragAxis === 'y' && this.pswp.options.closeOnVerticalDrag && currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit && !this.gestures.isMultitouch) {\n      // Handle vertical drag to close\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\n\n      if (!this.pswp.dispatch('verticalDrag', {\n        panY\n      }).defaultPrevented) {\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\n\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\n        this.pswp.applyBgOpacity(bgOpacity);\n        currSlide.applyCurrentZoomPan();\n      }\n    } else {\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\n\n      if (!mainScrollChanged) {\n        this._panOrMoveMainScroll('y');\n\n        if (currSlide) {\n          roundPoint(currSlide.pan);\n          currSlide.applyCurrentZoomPan();\n        }\n      }\n    }\n  }\n\n  end() {\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      mainScroll,\n      currSlide\n    } = this.pswp;\n    let indexDiff = 0;\n    this.pswp.animations.stopAll(); // Handle main scroll if it's shifted\n\n    if (mainScroll.isShifted()) {\n      // Position of the main scroll relative to the viewport\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX(); // Ratio between 0 and 1:\n      // 0 - slide is not visible at all,\n      // 0.5 - half of the slide is visible\n      // 1 - slide is fully visible\n\n      const currentSlideVisibilityRatio = mainScrollShiftDiff / this.pswp.viewportSize.x; // Go next slide.\n      //\n      // - if velocity and its direction is matched,\n      //   and we see at least tiny part of the next slide\n      //\n      // - or if we see less than 50% of the current slide\n      //   and velocity is close to 0\n      //\n\n      if (velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0 || velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5) {\n        // Go to next slide\n        indexDiff = 1;\n        velocity.x = Math.min(velocity.x, 0);\n      } else if (velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0 || velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5) {\n        // Go to prev slide\n        indexDiff = -1;\n        velocity.x = Math.max(velocity.x, 0);\n      }\n\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\n    } // Restore zoom level\n\n\n    if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max || this.gestures.isMultitouch) {\n      this.gestures.zoomLevels.correctZoomPan(true);\n    } else {\n      // we run two animations instead of one,\n      // as each axis has own pan boundaries and thus different spring function\n      // (correctZoomPan does not have this functionality,\n      //  it animates all properties with single timing function)\n      this._finishPanGestureForAxis('x');\n\n      this._finishPanGestureForAxis('y');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\n\n\n  _finishPanGestureForAxis(axis) {\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const panPos = pan[axis];\n    const restoreBgOpacity = this.pswp.bgOpacity < 1 && axis === 'y'; // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\n    // Increasing this number will reduce travel distance\n\n    const decelerationRate = 0.995; // 0.99\n    // Pan position if there is no bounds\n\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\n\n    if (restoreBgOpacity) {\n      const vDragRatio = this._getVerticalDragRatio(panPos);\n\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition); // If we are above and moving upwards,\n      // or if we are below and moving downwards\n\n\n      if (vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE || vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE) {\n        this.pswp.close();\n        return;\n      }\n    } // Pan position with corrected bounds\n\n\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition); // Exit if pan position should not be changed\n    // or if speed it too low\n\n    if (panPos === correctedPanPosition) {\n      return;\n    } // Overshoot if the final position is out of pan bounds\n\n\n    const dampingRatio = correctedPanPosition === projectedPosition ? 1 : 0.82;\n    const initialBgOpacity = this.pswp.bgOpacity;\n    const totalPanDist = correctedPanPosition - panPos;\n    this.pswp.animations.startSpring({\n      name: 'panGesture' + axis,\n      isPan: true,\n      start: panPos,\n      end: correctedPanPosition,\n      velocity: velocity[axis],\n      dampingRatio,\n      onUpdate: pos => {\n        // Animate opacity of background relative to Y pan position of an image\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\n          // 0 - start of animation, 1 - end of animation\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist; // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n\n          this.pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio, 0, 1));\n        }\n\n        pan[axis] = Math.floor(pos);\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\n\n\n  _panOrMoveMainScroll(axis) {\n    const {\n      p1,\n      dragAxis,\n      prevP1,\n      isMultitouch\n    } = this.gestures;\n    const {\n      currSlide,\n      mainScroll\n    } = this.pswp;\n    const delta = p1[axis] - prevP1[axis];\n    const newMainScrollX = mainScroll.x + delta;\n\n    if (!delta || !currSlide) {\n      return false;\n    } // Always move main scroll if image can not be panned\n\n\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\n      mainScroll.moveTo(newMainScrollX, true);\n      return true; // changed main scroll\n    }\n\n    const {\n      bounds\n    } = currSlide;\n    const newPan = currSlide.pan[axis] + delta;\n\n    if (this.pswp.options.allowPanToNext && dragAxis === 'x' && axis === 'x' && !isMultitouch) {\n      const currSlideMainScrollX = mainScroll.getCurrSlideX(); // Position of the main scroll relative to the viewport\n\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\n      const isLeftToRight = delta > 0;\n      const isRightToLeft = !isLeftToRight;\n\n      if (newPan > bounds.min[axis] && isLeftToRight) {\n        // Panning from left to right, beyond the left edge\n        // Wether the image was at minimum pan position (or less)\n        // when this drag gesture started.\n        // Minimum pan position refers to the left edge of the image.\n        const wasAtMinPanPosition = bounds.min[axis] <= this.startPan[axis];\n\n        if (wasAtMinPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n\n        }\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\n        // Paning from right to left, beyond the right edge\n        // Maximum pan position refers to the right edge of the image.\n        const wasAtMaxPanPosition = this.startPan[axis] <= bounds.max[axis];\n\n        if (wasAtMaxPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n\n        }\n      } else {\n        // If main scroll is shifted\n        if (mainScrollShiftDiff !== 0) {\n          // If main scroll is shifted right\n          if (mainScrollShiftDiff > 0\n          /*&& isRightToLeft*/\n          ) {\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          } else if (mainScrollShiftDiff < 0\n          /*&& isLeftToRight*/\n          ) {\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          }\n        } else {\n          // We are within pan bounds, so just pan\n          this._setPanWithFriction(axis, newPan);\n        }\n      }\n    } else {\n      if (axis === 'y') {\n        // Do not pan vertically if main scroll is shifted o\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\n          this._setPanWithFriction(axis, newPan);\n        }\n      } else {\n        this._setPanWithFriction(axis, newPan);\n      }\n    }\n\n    return false;\n  } // If we move above - the ratio is negative\n  // If we move below the ratio is positive\n\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\n\n\n  _getVerticalDragRatio(panY) {\n    var _this$pswp$currSlide$, _this$pswp$currSlide;\n\n    return (panY - ((_this$pswp$currSlide$ = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.bounds.center.y) !== null && _this$pswp$currSlide$ !== void 0 ? _this$pswp$currSlide$ : 0)) / (this.pswp.viewportSize.y / 3);\n  }\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\n\n\n  _setPanWithFriction(axis, potentialPan, customFriction) {\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const correctedPan = bounds.correctPan(axis, potentialPan); // If we are out of pan bounds\n\n    if (correctedPan !== potentialPan || customFriction) {\n      const delta = Math.round(potentialPan - pan[axis]);\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\n    } else {\n      pan[axis] = potentialPan;\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\nconst UPPER_ZOOM_FRICTION = 0.05;\nconst LOWER_ZOOM_FRICTION = 0.15;\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\n\nfunction getZoomPointsCenter(p, p1, p2) {\n  p.x = (p1.x + p2.x) / 2;\n  p.y = (p1.y + p2.y) / 2;\n  return p;\n}\n\nclass ZoomHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._startPan = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._startZoomPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._zoomPoint = {\n      x: 0,\n      y: 0\n    };\n    /** @private */\n\n    this._wasOverFitZoomLevel = false;\n    /** @private */\n\n    this._startZoomLevel = 1;\n  }\n\n  start() {\n    const {\n      currSlide\n    } = this.gestures.pswp;\n\n    if (currSlide) {\n      this._startZoomLevel = currSlide.currZoomLevel;\n      equalizePoints(this._startPan, currSlide.pan);\n    }\n\n    this.gestures.pswp.animations.stopAllPan();\n    this._wasOverFitZoomLevel = false;\n  }\n\n  change() {\n    const {\n      p1,\n      startP1,\n      p2,\n      startP2,\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const minZoomLevel = currSlide.zoomLevels.min;\n    const maxZoomLevel = currSlide.zoomLevels.max;\n\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\n\n    let currZoomLevel = 1 / getDistanceBetween(startP1, startP2) * getDistanceBetween(p1, p2) * this._startZoomLevel; // slightly over the zoom.fit\n\n\n    if (currZoomLevel > currSlide.zoomLevels.initial + currSlide.zoomLevels.initial / 15) {\n      this._wasOverFitZoomLevel = true;\n    }\n\n    if (currZoomLevel < minZoomLevel) {\n      if (pswp.options.pinchToClose && !this._wasOverFitZoomLevel && this._startZoomLevel <= currSlide.zoomLevels.initial) {\n        // fade out background if zooming out\n        const bgOpacity = 1 - (minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2);\n\n        if (!pswp.dispatch('pinchClose', {\n          bgOpacity\n        }).defaultPrevented) {\n          pswp.applyBgOpacity(bgOpacity);\n        }\n      } else {\n        // Apply the friction if zoom level is below the min\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\n      }\n    } else if (currZoomLevel > maxZoomLevel) {\n      // Apply the friction if zoom level is above the max\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\n    }\n\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\n    currSlide.setZoomLevel(currZoomLevel);\n    currSlide.applyCurrentZoomPan();\n  }\n\n  end() {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial) && !this._wasOverFitZoomLevel && pswp.options.pinchToClose) {\n      pswp.close();\n    } else {\n      this.correctZoomPan();\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\n\n\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\n    return this._zoomPoint[axis] - (this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor;\n  }\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\n\n\n  correctZoomPan(ignoreGesture) {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if (!(currSlide !== null && currSlide !== void 0 && currSlide.isZoomable())) {\n      return;\n    }\n\n    if (this._zoomPoint.x === 0) {\n      ignoreGesture = true;\n    }\n\n    const prevZoomLevel = currSlide.currZoomLevel;\n    /** @type {number} */\n\n    let destinationZoomLevel;\n    let currZoomLevelNeedsChange = true;\n\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\n      destinationZoomLevel = currSlide.zoomLevels.initial; // zoom to min\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\n      destinationZoomLevel = currSlide.zoomLevels.max; // zoom to max\n    } else {\n      currZoomLevelNeedsChange = false;\n      destinationZoomLevel = prevZoomLevel;\n    }\n\n    const initialBgOpacity = pswp.bgOpacity;\n    const restoreBgOpacity = pswp.bgOpacity < 1;\n    const initialPan = equalizePoints({\n      x: 0,\n      y: 0\n    }, currSlide.pan);\n    let destinationPan = equalizePoints({\n      x: 0,\n      y: 0\n    }, initialPan);\n\n    if (ignoreGesture) {\n      this._zoomPoint.x = 0;\n      this._zoomPoint.y = 0;\n      this._startZoomPoint.x = 0;\n      this._startZoomPoint.y = 0;\n      this._startZoomLevel = prevZoomLevel;\n      equalizePoints(this._startPan, initialPan);\n    }\n\n    if (currZoomLevelNeedsChange) {\n      destinationPan = {\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\n      };\n    } // set zoom level, so pan bounds are updated according to it\n\n\n    currSlide.setZoomLevel(destinationZoomLevel);\n    destinationPan = {\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\n    }; // return zoom level and its bounds to initial\n\n    currSlide.setZoomLevel(prevZoomLevel);\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\n\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\n      // update resolution after gesture\n      currSlide._setResolution(destinationZoomLevel);\n\n      currSlide.applyCurrentZoomPan(); // nothing to animate\n\n      return;\n    }\n\n    pswp.animations.stopAllPan();\n    pswp.animations.startSpring({\n      isPan: true,\n      start: 0,\n      end: 1000,\n      velocity: 0,\n      dampingRatio: 1,\n      naturalFrequency: 40,\n      onUpdate: now => {\n        now /= 1000; // 0 - start, 1 - end\n\n        if (panNeedsChange || currZoomLevelNeedsChange) {\n          if (panNeedsChange) {\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\n          }\n\n          if (currZoomLevelNeedsChange) {\n            const newZoomLevel = prevZoomLevel + (destinationZoomLevel - prevZoomLevel) * now;\n            currSlide.setZoomLevel(newZoomLevel);\n          }\n\n          currSlide.applyCurrentZoomPan();\n        } // Restore background opacity\n\n\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n          pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1));\n        }\n      },\n      onComplete: () => {\n        // update resolution after transition ends\n        currSlide._setResolution(destinationZoomLevel);\n\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n\n}\n\n/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\n\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\nfunction didTapOnMainContent(event) {\n  return !!\n  /** @type {HTMLElement} */\n  event.target.closest('.pswp__container');\n}\n/**\r\n * Tap, double-tap handler.\r\n */\n\n\nclass TapHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  click(point, originalEvent) {\n    const targetClassList =\n    /** @type {HTMLElement} */\n    originalEvent.target.classList;\n    const isImageClick = targetClassList.contains('pswp__img');\n    const isBackgroundClick = targetClassList.contains('pswp__item') || targetClassList.contains('pswp__zoom-wrap');\n\n    if (isImageClick) {\n      this._doClickOrTapAction('imageClick', point, originalEvent);\n    } else if (isBackgroundClick) {\n      this._doClickOrTapAction('bgClick', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  tap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('tap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  doubleTap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  _doClickOrTapAction(actionName, point, originalEvent) {\n    var _this$gestures$pswp$e;\n\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n    const actionFullName =\n    /** @type {AddPostfix<Actions, 'Action'>} */\n    actionName + 'Action';\n    const optionValue = pswp.options[actionFullName];\n\n    if (pswp.dispatch(actionFullName, {\n      point,\n      originalEvent\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      optionValue.call(pswp, point, originalEvent);\n      return;\n    }\n\n    switch (optionValue) {\n      case 'close':\n      case 'next':\n        pswp[optionValue]();\n        break;\n\n      case 'zoom':\n        currSlide === null || currSlide === void 0 || currSlide.toggleZoom(point);\n        break;\n\n      case 'zoom-or-close':\n        // by default click zooms current image,\n        // if it can not be zoomed - gallery will be closed\n        if (currSlide !== null && currSlide !== void 0 && currSlide.isZoomable() && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\n          currSlide.toggleZoom(point);\n        } else if (pswp.options.clickToCloseNonZoomable) {\n          pswp.close();\n        }\n\n        break;\n\n      case 'toggle-controls':\n        (_this$gestures$pswp$e = this.gestures.pswp.element) === null || _this$gestures$pswp$e === void 0 || _this$gestures$pswp$e.classList.toggle('pswp--ui-visible'); // if (_controlsVisible) {\n        //   _ui.hideControls();\n        // } else {\n        //   _ui.showControls();\n        // }\n\n        break;\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n// How far should user should drag\n// until we can determine that the gesture is swipe and its direction\n\nconst AXIS_SWIPE_HYSTERISIS = 10; //const PAN_END_FRICTION = 0.35;\n\nconst DOUBLE_TAP_DELAY = 300; // ms\n\nconst MIN_TAP_DISTANCE = 25; // px\n\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\n\nclass Gestures {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @type {'x' | 'y' | null} */\n\n    this.dragAxis = null; // point objects are defined once and reused\n    // PhotoSwipe keeps track only of two pointers, others are ignored\n\n    /** @type {Point} */\n\n    this.p1 = {\n      x: 0,\n      y: 0\n    }; // the first pressed pointer\n\n    /** @type {Point} */\n\n    this.p2 = {\n      x: 0,\n      y: 0\n    }; // the second pressed pointer\n\n    /** @type {Point} */\n\n    this.prevP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.prevP2 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.startP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.startP2 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point}\r\n     * @private\r\n     */\n\n    this._lastStartP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point}\r\n     * @private\r\n     */\n\n    this._intervalP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @private */\n\n    this._numActivePoints = 0;\n    /** @type {Point[]}\r\n     * @private\r\n     */\n\n    this._ongoingPointers = [];\n    /** @private */\n\n    this._touchEventEnabled = 'ontouchstart' in window;\n    /** @private */\n\n    this._pointerEventEnabled = !!window.PointerEvent;\n    this.supportsTouch = this._touchEventEnabled || this._pointerEventEnabled && navigator.maxTouchPoints > 1;\n    /** @private */\n\n    this._numActivePoints = 0;\n    /** @private */\n\n    this._intervalTime = 0;\n    /** @private */\n\n    this._velocityCalculated = false;\n    this.isMultitouch = false;\n    this.isDragging = false;\n    this.isZooming = false;\n    /** @type {number | null} */\n\n    this.raf = null;\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\n\n    this._tapTimer = null;\n\n    if (!this.supportsTouch) {\n      // disable pan to next slide for non-touch devices\n      pswp.options.allowPanToNext = false;\n    }\n\n    this.drag = new DragHandler(this);\n    this.zoomLevels = new ZoomHandler(this);\n    this.tapHandler = new TapHandler(this);\n    pswp.on('bindEvents', () => {\n      pswp.events.add(pswp.scrollWrap, 'click',\n      /** @type EventListener */\n      this._onClick.bind(this));\n\n      if (this._pointerEventEnabled) {\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\n      } else if (this._touchEventEnabled) {\n        this._bindEvents('touch', 'start', 'end', 'cancel'); // In previous versions we also bound mouse event here,\n        // in case device supports both touch and mouse events,\n        // but newer versions of browsers now support PointerEvent.\n        // on iOS10 if you bind touchmove/end after touchstart,\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\n        // preventDefault will have no effect on touchmove and touchend.\n        // Unless you bind it previously.\n\n\n        if (pswp.scrollWrap) {\n          pswp.scrollWrap.ontouchmove = () => {};\n\n          pswp.scrollWrap.ontouchend = () => {};\n        }\n      } else {\n        this._bindEvents('mouse', 'down', 'up');\n      }\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\n\n\n  _bindEvents(pref, down, up, cancel) {\n    const {\n      pswp\n    } = this;\n    const {\n      events\n    } = pswp;\n    const cancelEvent = cancel ? pref + cancel : '';\n    events.add(pswp.scrollWrap, pref + down,\n    /** @type EventListener */\n    this.onPointerDown.bind(this));\n    events.add(window, pref + 'move',\n    /** @type EventListener */\n    this.onPointerMove.bind(this));\n    events.add(window, pref + up,\n    /** @type EventListener */\n    this.onPointerUp.bind(this));\n\n    if (cancelEvent) {\n      events.add(pswp.scrollWrap, cancelEvent,\n      /** @type EventListener */\n      this.onPointerUp.bind(this));\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerDown(e) {\n    // We do not call preventDefault for touch events\n    // to allow browser to show native dialog on longpress\n    // (the one that allows to save image or open it in new tab).\n    //\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse'; // Allow dragging only via left mouse button.\n    // http://www.quirksmode.org/js/events_properties.html\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n\n    if (isMousePointer && e.button > 0) {\n      return;\n    }\n\n    const {\n      pswp\n    } = this; // if PhotoSwipe is opening or closing\n\n    if (!pswp.opener.isOpen) {\n      e.preventDefault();\n      return;\n    }\n\n    if (pswp.dispatch('pointerDown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (isMousePointer) {\n      pswp.mouseDetected(); // preventDefault mouse event to prevent\n      // browser image drag feature\n\n      this._preventPointerEventBehaviour(e, 'down');\n    }\n\n    pswp.animations.stopAll();\n\n    this._updatePoints(e, 'down');\n\n    if (this._numActivePoints === 1) {\n      this.dragAxis = null; // we need to store initial point to determine the main axis,\n      // drag is activated only after the axis is determined\n\n      equalizePoints(this.startP1, this.p1);\n    }\n\n    if (this._numActivePoints > 1) {\n      // Tap or double tap should not trigger if more than one pointer\n      this._clearTapTimer();\n\n      this.isMultitouch = true;\n    } else {\n      this.isMultitouch = false;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerMove(e) {\n    this._preventPointerEventBehaviour(e, 'move');\n\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'move');\n\n    if (this.pswp.dispatch('pointerMove', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 1 && !this.isDragging) {\n      if (!this.dragAxis) {\n        this._calculateDragDirection();\n      } // Drag axis was detected, emit drag.start\n\n\n      if (this.dragAxis && !this.isDragging) {\n        if (this.isZooming) {\n          this.isZooming = false;\n          this.zoomLevels.end();\n        }\n\n        this.isDragging = true;\n\n        this._clearTapTimer(); // Tap can not trigger after drag\n        // Adjust starting point\n\n\n        this._updateStartPoints();\n\n        this._intervalTime = Date.now(); //this._startTime = this._intervalTime;\n\n        this._velocityCalculated = false;\n        equalizePoints(this._intervalP1, this.p1);\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.drag.start();\n\n        this._rafStopLoop();\n\n        this._rafRenderLoop();\n      }\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\n      this._finishDrag();\n\n      this.isZooming = true; // Adjust starting points\n\n      this._updateStartPoints();\n\n      this.zoomLevels.start();\n\n      this._rafStopLoop();\n\n      this._rafRenderLoop();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _finishDrag() {\n    if (this.isDragging) {\n      this.isDragging = false; // Try to calculate velocity,\n      // if it wasn't calculated yet in drag.change\n\n      if (!this._velocityCalculated) {\n        this._updateVelocity(true);\n      }\n\n      this.drag.end();\n      this.dragAxis = null;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerUp(e) {\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'up');\n\n    if (this.pswp.dispatch('pointerUp', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 0) {\n      this._rafStopLoop();\n\n      if (this.isDragging) {\n        this._finishDrag();\n      } else if (!this.isZooming && !this.isMultitouch) {\n        //this.zoomLevels.correctZoomPan();\n        this._finishTap(e);\n      }\n    }\n\n    if (this._numActivePoints < 2 && this.isZooming) {\n      this.isZooming = false;\n      this.zoomLevels.end();\n\n      if (this._numActivePoints === 1) {\n        // Since we have 1 point left, we need to reinitiate drag\n        this.dragAxis = null;\n\n        this._updateStartPoints();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _rafRenderLoop() {\n    if (this.isDragging || this.isZooming) {\n      this._updateVelocity();\n\n      if (this.isDragging) {\n        // make sure that pointer moved since the last update\n        if (!pointsEqual(this.p1, this.prevP1)) {\n          this.drag.change();\n        }\n      } else\n        /* if (this.isZooming) */\n        {\n          if (!pointsEqual(this.p1, this.prevP1) || !pointsEqual(this.p2, this.prevP2)) {\n            this.zoomLevels.change();\n          }\n        }\n\n      this._updatePrevPoints();\n\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\n    }\n  }\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\n\n\n  _updateVelocity(force) {\n    const time = Date.now();\n    const duration = time - this._intervalTime;\n\n    if (duration < 50 && !force) {\n      return;\n    }\n\n    this.velocity.x = this._getVelocity('x', duration);\n    this.velocity.y = this._getVelocity('y', duration);\n    this._intervalTime = time;\n    equalizePoints(this._intervalP1, this.p1);\n    this._velocityCalculated = true;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _finishTap(e) {\n    const {\n      mainScroll\n    } = this.pswp; // Do not trigger tap events if main scroll is shifted\n\n    if (mainScroll.isShifted()) {\n      // restore main scroll position\n      // (usually happens if stopped in the middle of animation)\n      mainScroll.moveIndexBy(0, true);\n      return;\n    } // Do not trigger tap for touchcancel or pointercancel\n\n\n    if (e.type.indexOf('cancel') > 0) {\n      return;\n    } // Trigger click instead of tap for mouse events\n\n\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\n      this.tapHandler.click(this.startP1, e);\n      return;\n    } // Disable delay if there is no doubleTapAction\n\n\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0; // If tapTimer is defined - we tapped recently,\n    // check if the current tap is close to the previous one,\n    // if yes - trigger double tap\n\n    if (this._tapTimer) {\n      this._clearTapTimer(); // Check if two taps were more or less on the same place\n\n\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\n        this.tapHandler.doubleTap(this.startP1, e);\n      }\n    } else {\n      equalizePoints(this._lastStartP1, this.startP1);\n      this._tapTimer = setTimeout(() => {\n        this.tapHandler.tap(this.startP1, e);\n\n        this._clearTapTimer();\n      }, tapDelay);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _clearTapTimer() {\n    if (this._tapTimer) {\n      clearTimeout(this._tapTimer);\n      this._tapTimer = null;\n    }\n  }\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\n\n\n  _getVelocity(axis, duration) {\n    // displacement is like distance, but can be negative.\n    const displacement = this.p1[axis] - this._intervalP1[axis];\n\n    if (Math.abs(displacement) > 1 && duration > 5) {\n      return displacement / duration;\n    }\n\n    return 0;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _rafStopLoop() {\n    if (this.raf) {\n      cancelAnimationFrame(this.raf);\n      this.raf = null;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n\n  _preventPointerEventBehaviour(e, pointerType) {\n    const preventPointerEvent = this.pswp.applyFilters('preventPointerEvent', true, e, pointerType);\n\n    if (preventPointerEvent) {\n      e.preventDefault();\n    }\n  }\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n\n  _updatePoints(e, pointerType) {\n    if (this._pointerEventEnabled) {\n      const pointerEvent =\n      /** @type {PointerEvent} */\n      e; // Try to find the current pointer in ongoing pointers by its ID\n\n      const pointerIndex = this._ongoingPointers.findIndex(ongoingPointer => {\n        return ongoingPointer.id === pointerEvent.pointerId;\n      });\n\n      if (pointerType === 'up' && pointerIndex > -1) {\n        // release the pointer - remove it from ongoing\n        this._ongoingPointers.splice(pointerIndex, 1);\n      } else if (pointerType === 'down' && pointerIndex === -1) {\n        // add new pointer\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {\n          x: 0,\n          y: 0\n        }));\n      } else if (pointerIndex > -1) {\n        // update existing pointer\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\n      }\n\n      this._numActivePoints = this._ongoingPointers.length; // update points that PhotoSwipe uses\n      // to calculate position and scale\n\n      if (this._numActivePoints > 0) {\n        equalizePoints(this.p1, this._ongoingPointers[0]);\n      }\n\n      if (this._numActivePoints > 1) {\n        equalizePoints(this.p2, this._ongoingPointers[1]);\n      }\n    } else {\n      const touchEvent =\n      /** @type {TouchEvent} */\n      e;\n      this._numActivePoints = 0;\n\n      if (touchEvent.type.indexOf('touch') > -1) {\n        // Touch Event\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\n\n          this._numActivePoints++;\n\n          if (touchEvent.touches.length > 1) {\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\n\n            this._numActivePoints++;\n          }\n        }\n      } else {\n        // Mouse Event\n        this._convertEventPosToPoint(\n        /** @type {PointerEvent} */\n        e, this.p1);\n\n        if (pointerType === 'up') {\n          // clear all points on mouseup\n          this._numActivePoints = 0;\n        } else {\n          this._numActivePoints++;\n        }\n      }\n    }\n  }\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\n\n\n  _updatePrevPoints() {\n    equalizePoints(this.prevP1, this.p1);\n    equalizePoints(this.prevP2, this.p2);\n  }\n  /** update points at the start of gesture\r\n   * @private\r\n   */\n\n\n  _updateStartPoints() {\n    equalizePoints(this.startP1, this.p1);\n    equalizePoints(this.startP2, this.p2);\n\n    this._updatePrevPoints();\n  }\n  /** @private */\n\n\n  _calculateDragDirection() {\n    if (this.pswp.mainScroll.isShifted()) {\n      // if main scroll position is shifted – direction is always horizontal\n      this.dragAxis = 'x';\n    } else {\n      // calculate delta of the last touchmove tick\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\n\n      if (diff !== 0) {\n        // check if pointer was shifted horizontally or vertically\n        const axisToCheck = diff > 0 ? 'x' : 'y';\n\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\n          this.dragAxis = axisToCheck;\n        }\n      }\n    }\n  }\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\n\n\n  _convertEventPosToPoint(e, p) {\n    p.x = e.pageX - this.pswp.offset.x;\n    p.y = e.pageY - this.pswp.offset.y;\n\n    if ('pointerId' in e) {\n      p.id = e.pointerId;\n    } else if (e.identifier !== undefined) {\n      p.id = e.identifier;\n    }\n\n    return p;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _onClick(e) {\n    // Do not allow click event to pass through after drag\n    if (this.pswp.mainScroll.isShifted()) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/slide.js').default} Slide */\n\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\n\nconst MAIN_SCROLL_END_FRICTION = 0.35; // const MIN_SWIPE_TRANSITION_DURATION = 250;\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\n\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\n\nclass MainScroll {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.x = 0;\n    this.slideWidth = 0;\n    /** @private */\n\n    this._currPositionIndex = 0;\n    /** @private */\n\n    this._prevPositionIndex = 0;\n    /** @private */\n\n    this._containerShiftIndex = -1;\n    /** @type {ItemHolder[]} */\n\n    this.itemHolders = [];\n  }\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\n\n\n  resize(resizeSlides) {\n    const {\n      pswp\n    } = this;\n    const newSlideWidth = Math.round(pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing); // Mobile browsers might trigger a resize event during a gesture.\n    // (due to toolbar appearing or hiding).\n    // Avoid re-adjusting main scroll position if width wasn't changed\n\n    const slideWidthChanged = newSlideWidth !== this.slideWidth;\n\n    if (slideWidthChanged) {\n      this.slideWidth = newSlideWidth;\n      this.moveTo(this.getCurrSlideX());\n    }\n\n    this.itemHolders.forEach((itemHolder, index) => {\n      if (slideWidthChanged) {\n        setTransform(itemHolder.el, (index + this._containerShiftIndex) * this.slideWidth);\n      }\n\n      if (resizeSlides && itemHolder.slide) {\n        itemHolder.slide.resize();\n      }\n    });\n  }\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\n\n\n  resetPosition() {\n    // Position on the main scroller (offset)\n    // it is independent from slide index\n    this._currPositionIndex = 0;\n    this._prevPositionIndex = 0; // This will force recalculation of size on next resize()\n\n    this.slideWidth = 0; // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\n\n    this._containerShiftIndex = -1;\n  }\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\n\n\n  appendHolders() {\n    this.itemHolders = []; // append our three slide holders -\n    // previous, current, and next\n\n    for (let i = 0; i < 3; i++) {\n      const el = createElement('pswp__item', 'div', this.pswp.container);\n      el.setAttribute('role', 'group');\n      el.setAttribute('aria-roledescription', 'slide');\n      el.setAttribute('aria-hidden', 'true'); // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n\n      el.style.display = i === 1 ? 'block' : 'none';\n      this.itemHolders.push({\n        el //index: -1\n\n      });\n    }\n  }\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\n\n\n  canBeSwiped() {\n    return this.pswp.getNumItems() > 1;\n  }\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\n\n\n  moveIndexBy(diff, animate, velocityX) {\n    const {\n      pswp\n    } = this;\n    let newIndex = pswp.potentialIndex + diff;\n    const numSlides = pswp.getNumItems();\n\n    if (pswp.canLoop()) {\n      newIndex = pswp.getLoopedIndex(newIndex);\n      const distance = (diff + numSlides) % numSlides;\n\n      if (distance <= numSlides / 2) {\n        // go forward\n        diff = distance;\n      } else {\n        // go backwards\n        diff = distance - numSlides;\n      }\n    } else {\n      if (newIndex < 0) {\n        newIndex = 0;\n      } else if (newIndex >= numSlides) {\n        newIndex = numSlides - 1;\n      }\n\n      diff = newIndex - pswp.potentialIndex;\n    }\n\n    pswp.potentialIndex = newIndex;\n    this._currPositionIndex -= diff;\n    pswp.animations.stopMainScroll();\n    const destinationX = this.getCurrSlideX();\n\n    if (!animate) {\n      this.moveTo(destinationX);\n      this.updateCurrItem();\n    } else {\n      pswp.animations.startSpring({\n        isMainScroll: true,\n        start: this.x,\n        end: destinationX,\n        velocity: velocityX || 0,\n        naturalFrequency: 30,\n        dampingRatio: 1,\n        //0.7,\n        onUpdate: x => {\n          this.moveTo(x);\n        },\n        onComplete: () => {\n          this.updateCurrItem();\n          pswp.appendHeavy();\n        }\n      });\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\n\n      if (pswp.canLoop()) {\n        const currDistance = (currDiff + numSlides) % numSlides;\n\n        if (currDistance <= numSlides / 2) {\n          // go forward\n          currDiff = currDistance;\n        } else {\n          // go backwards\n          currDiff = currDistance - numSlides;\n        }\n      } // Force-append new slides during transition\n      // if difference between slides is more than 1\n\n\n      if (Math.abs(currDiff) > 1) {\n        this.updateCurrItem();\n      }\n    }\n\n    return Boolean(diff);\n  }\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\n\n\n  getCurrSlideX() {\n    return this.slideWidth * this._currPositionIndex;\n  }\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\n\n\n  isShifted() {\n    return this.x !== this.getCurrSlideX();\n  }\n  /**\r\n   * Update slides X positions and set their content\r\n   */\n\n\n  updateCurrItem() {\n    var _this$itemHolders$;\n\n    const {\n      pswp\n    } = this;\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\n\n    if (!positionDifference) {\n      return;\n    }\n\n    this._prevPositionIndex = this._currPositionIndex;\n    pswp.currIndex = pswp.potentialIndex;\n    let diffAbs = Math.abs(positionDifference);\n    /** @type {ItemHolder | undefined} */\n\n    let tempHolder;\n\n    if (diffAbs >= 3) {\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\n      diffAbs = 3;\n    }\n\n    for (let i = 0; i < diffAbs; i++) {\n      if (positionDifference > 0) {\n        tempHolder = this.itemHolders.shift();\n\n        if (tempHolder) {\n          this.itemHolders[2] = tempHolder; // move first to last\n\n          this._containerShiftIndex++;\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\n          pswp.setContent(tempHolder, pswp.currIndex - diffAbs + i + 2);\n        }\n      } else {\n        tempHolder = this.itemHolders.pop();\n\n        if (tempHolder) {\n          this.itemHolders.unshift(tempHolder); // move last to first\n\n          this._containerShiftIndex--;\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\n          pswp.setContent(tempHolder, pswp.currIndex + diffAbs - i - 2);\n        }\n      }\n    } // Reset transfrom every 50ish navigations in one direction.\n    //\n    // Otherwise transform will keep growing indefinitely,\n    // which might cause issues as browsers have a maximum transform limit.\n    // I wasn't able to reach it, but just to be safe.\n    // This should not cause noticable lag.\n\n\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\n      this.resetPosition();\n      this.resize();\n    } // Pan transition might be running (and consntantly updating pan position)\n\n\n    pswp.animations.stopAllPan();\n    this.itemHolders.forEach((itemHolder, i) => {\n      if (itemHolder.slide) {\n        // Slide in the 2nd holder is always active\n        itemHolder.slide.setIsActive(i === 1);\n      }\n    });\n    pswp.currSlide = (_this$itemHolders$ = this.itemHolders[1]) === null || _this$itemHolders$ === void 0 ? void 0 : _this$itemHolders$.slide;\n    pswp.contentLoader.updateLazy(positionDifference);\n\n    if (pswp.currSlide) {\n      pswp.currSlide.applyCurrentZoomPan();\n    }\n\n    pswp.dispatch('change');\n  }\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\n\n\n  moveTo(x, dragging) {\n    if (!this.pswp.canLoop() && dragging) {\n      // Apply friction\n      let newSlideIndexOffset = (this.slideWidth * this._currPositionIndex - x) / this.slideWidth;\n      newSlideIndexOffset += this.pswp.currIndex;\n      const delta = Math.round(x - this.x);\n\n      if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0) {\n        x = this.x + delta * MAIN_SCROLL_END_FRICTION;\n      }\n    }\n\n    this.x = x;\n\n    if (this.pswp.container) {\n      setTransform(this.pswp.container, x);\n    }\n\n    this.pswp.dispatch('moveMainScroll', {\n      x,\n      dragging: dragging !== null && dragging !== void 0 ? dragging : false\n    });\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\n\nconst KeyboardKeyCodesMap = {\n  Escape: 27,\n  z: 90,\n  ArrowLeft: 37,\n  ArrowUp: 38,\n  ArrowRight: 39,\n  ArrowDown: 40,\n  Tab: 9\n};\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\n\nconst getKeyboardEventKey = (key, isKeySupported) => {\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\n};\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\n\n\nclass Keyboard {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @private */\n\n    this._wasFocused = false;\n    pswp.on('bindEvents', () => {\n      if (pswp.options.trapFocus) {\n        // Dialog was likely opened by keyboard if initial point is not defined\n        if (!pswp.options.initialPointerPos) {\n          // focus causes layout,\n          // which causes lag during the animation,\n          // that's why we delay it until the opener transition ends\n          this._focusRoot();\n        }\n\n        pswp.events.add(document, 'focusin',\n        /** @type EventListener */\n        this._onFocusIn.bind(this));\n      }\n\n      pswp.events.add(document, 'keydown',\n      /** @type EventListener */\n      this._onKeyDown.bind(this));\n    });\n    const lastActiveElement =\n    /** @type {HTMLElement} */\n    document.activeElement;\n    pswp.on('destroy', () => {\n      if (pswp.options.returnFocus && lastActiveElement && this._wasFocused) {\n        lastActiveElement.focus();\n      }\n    });\n  }\n  /** @private */\n\n\n  _focusRoot() {\n    if (!this._wasFocused && this.pswp.element) {\n      this.pswp.element.focus();\n      this._wasFocused = true;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\n\n\n  _onKeyDown(e) {\n    const {\n      pswp\n    } = this;\n\n    if (pswp.dispatch('keydown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (specialKeyUsed(e)) {\n      // don't do anything if special key pressed\n      // to prevent from overriding default browser actions\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\n      return;\n    }\n    /** @type {Methods<PhotoSwipe> | undefined} */\n\n\n    let keydownAction;\n    /** @type {'x' | 'y' | undefined} */\n\n    let axis;\n    let isForward = false;\n    const isKeySupported = ('key' in e);\n\n    switch (isKeySupported ? e.key : e.keyCode) {\n      case getKeyboardEventKey('Escape', isKeySupported):\n        if (pswp.options.escKey) {\n          keydownAction = 'close';\n        }\n\n        break;\n\n      case getKeyboardEventKey('z', isKeySupported):\n        keydownAction = 'toggleZoom';\n        break;\n\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\n        axis = 'x';\n        break;\n\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\n        axis = 'y';\n        break;\n\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\n        axis = 'x';\n        isForward = true;\n        break;\n\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\n        isForward = true;\n        axis = 'y';\n        break;\n\n      case getKeyboardEventKey('Tab', isKeySupported):\n        this._focusRoot();\n\n        break;\n    } // if left/right/top/bottom key\n\n\n    if (axis) {\n      // prevent page scroll\n      e.preventDefault();\n      const {\n        currSlide\n      } = pswp;\n\n      if (pswp.options.arrowKeys && axis === 'x' && pswp.getNumItems() > 1) {\n        keydownAction = isForward ? 'next' : 'prev';\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\n        // up/down arrow keys pan the image vertically\n        // left/right arrow keys pan horizontally.\n        // Unless there is only one image,\n        // or arrowKeys option is disabled\n        currSlide.pan[axis] += isForward ? -80 : 80;\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\n      }\n    }\n\n    if (keydownAction) {\n      e.preventDefault(); // @ts-ignore\n\n      pswp[keydownAction]();\n    }\n  }\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\n\n\n  _onFocusIn(e) {\n    const {\n      template\n    } = this.pswp;\n\n    if (template && document !== e.target && template !== e.target && !template.contains(\n    /** @type {Node} */\n    e.target)) {\n      // focus root element\n      template.focus();\n    }\n  }\n\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\n\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\n\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\n\n/**\r\n * Runs CSS transition.\r\n */\n\nclass CSSAnimation {\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\n  constructor(props) {\n    var _props$prop;\n\n    this.props = props;\n    const {\n      target,\n      onComplete,\n      transform,\n      onFinish = () => {},\n      duration = 333,\n      easing = DEFAULT_EASING\n    } = props;\n    this.onFinish = onFinish; // support only transform and opacity\n\n    const prop = transform ? 'transform' : 'opacity';\n    const propValue = (_props$prop = props[prop]) !== null && _props$prop !== void 0 ? _props$prop : '';\n    /** @private */\n\n    this._target = target;\n    /** @private */\n\n    this._onComplete = onComplete;\n    /** @private */\n\n    this._finished = false;\n    /** @private */\n\n    this._onTransitionEnd = this._onTransitionEnd.bind(this); // Using timeout hack to make sure that animation\n    // starts even if the animated property was changed recently,\n    // otherwise transitionend might not fire or transition won't start.\n    // https://drafts.csswg.org/css-transitions/#starting\n    //\n    // ¯\\_(ツ)_/¯\n\n    /** @private */\n\n    this._helperTimeout = setTimeout(() => {\n      setTransitionStyle(target, prop, duration, easing);\n      this._helperTimeout = setTimeout(() => {\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false); // Safari occasionally does not emit transitionend event\n        // if element property was modified during the transition,\n        // which may be caused by resize or third party component,\n        // using timeout as a safety fallback\n\n        this._helperTimeout = setTimeout(() => {\n          this._finalizeAnimation();\n        }, duration + 500);\n        target.style[prop] = propValue;\n      }, 30); // Do not reduce this number\n    }, 0);\n  }\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\n\n\n  _onTransitionEnd(e) {\n    if (e.target === this._target) {\n      this._finalizeAnimation();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _finalizeAnimation() {\n    if (!this._finished) {\n      this._finished = true;\n      this.onFinish();\n\n      if (this._onComplete) {\n        this._onComplete();\n      }\n    }\n  } // Destroy is called automatically onFinish\n\n\n  destroy() {\n    if (this._helperTimeout) {\n      clearTimeout(this._helperTimeout);\n    }\n\n    removeTransitionStyle(this._target);\n\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\n\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\n\n    if (!this._finished) {\n      this._finalizeAnimation();\n    }\n  }\n\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\nconst DEFAULT_DAMPING_RATIO = 0.75;\n/**\r\n * Spring easing helper\r\n */\n\nclass SpringEaser {\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\n    // https://en.wikipedia.org/wiki/Damping_ratio\n\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO; // https://en.wikipedia.org/wiki/Natural_frequency\n\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\n    this._dampedFrequency = this._naturalFrequency;\n\n    if (this._dampingRatio < 1) {\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\n    }\n  }\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\n\n\n  easeFrame(deltaPosition, deltaTime) {\n    // Inspired by Apple Webkit and Android spring function implementation\n    // https://en.wikipedia.org/wiki/Oscillation\n    // https://en.wikipedia.org/wiki/Damping_ratio\n    // we ignore mass (assume that it's 1kg)\n    let displacement = 0;\n    let coeff;\n    deltaTime /= 1000;\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\n\n    if (this._dampingRatio === 1) {\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\n      this.velocity = displacement * -this._naturalFrequency + coeff * naturalDumpingPow;\n    } else if (this._dampingRatio < 1) {\n      coeff = 1 / this._dampedFrequency * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\n      displacement = naturalDumpingPow * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\n      this.velocity = displacement * -this._naturalFrequency * this._dampingRatio + naturalDumpingPow * (-this._dampedFrequency * deltaPosition * dumpedFSin + this._dampedFrequency * coeff * dumpedFCos);\n    } // Overdamped (>1) damping ratio is not supported\n\n\n    return displacement;\n  }\n\n}\n\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\n\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\n\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\n\nclass SpringAnimation {\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\n  constructor(props) {\n    this.props = props;\n    this._raf = 0;\n    const {\n      start,\n      end,\n      velocity,\n      onUpdate,\n      onComplete,\n      onFinish = () => {},\n      dampingRatio,\n      naturalFrequency\n    } = props;\n    this.onFinish = onFinish;\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\n    let prevTime = Date.now();\n    let deltaPosition = start - end;\n\n    const animationLoop = () => {\n      if (this._raf) {\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime); // Stop the animation if velocity is low and position is close to end\n\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\n          // Finalize the animation\n          onUpdate(end);\n\n          if (onComplete) {\n            onComplete();\n          }\n\n          this.onFinish();\n        } else {\n          prevTime = Date.now();\n          onUpdate(deltaPosition + end);\n          this._raf = requestAnimationFrame(animationLoop);\n        }\n      }\n    };\n\n    this._raf = requestAnimationFrame(animationLoop);\n  } // Destroy is called automatically onFinish\n\n\n  destroy() {\n    if (this._raf >= 0) {\n      cancelAnimationFrame(this._raf);\n    }\n\n    this._raf = 0;\n  }\n\n}\n\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\n\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\n\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\n\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\n\n/**\r\n * Manages animations\r\n */\n\nclass Animations {\n  constructor() {\n    /** @type {Animation[]} */\n    this.activeAnimations = [];\n  }\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\n\n\n  startSpring(props) {\n    this._start(props, true);\n  }\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\n\n\n  startTransition(props) {\n    this._start(props);\n  }\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\n\n\n  _start(props, isSpring) {\n    const animation = isSpring ? new SpringAnimation(\n    /** @type SpringAnimationProps */\n    props) : new CSSAnimation(\n    /** @type CssAnimationProps */\n    props);\n    this.activeAnimations.push(animation);\n\n    animation.onFinish = () => this.stop(animation);\n\n    return animation;\n  }\n  /**\r\n   * @param {Animation} animation\r\n   */\n\n\n  stop(animation) {\n    animation.destroy();\n    const index = this.activeAnimations.indexOf(animation);\n\n    if (index > -1) {\n      this.activeAnimations.splice(index, 1);\n    }\n  }\n\n  stopAll() {\n    // _stopAllAnimations\n    this.activeAnimations.forEach(animation => {\n      animation.destroy();\n    });\n    this.activeAnimations = [];\n  }\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\n\n\n  stopAllPan() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isPan) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  stopMainScroll() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isMainScroll) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\n  // isMainScrollRunning() {\n  //   return this.activeAnimations.some((animation) => {\n  //     return animation.props.isMainScroll;\n  //   });\n  // }\n\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\n\n\n  isPanRunning() {\n    return this.activeAnimations.some(animation => {\n      return animation.props.isPan;\n    });\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\nclass ScrollWheel {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    pswp.events.add(pswp.element, 'wheel',\n    /** @type EventListener */\n    this._onWheel.bind(this));\n  }\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\n\n\n  _onWheel(e) {\n    e.preventDefault();\n    const {\n      currSlide\n    } = this.pswp;\n    let {\n      deltaX,\n      deltaY\n    } = e;\n\n    if (!currSlide) {\n      return;\n    }\n\n    if (this.pswp.dispatch('wheel', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\n      // zoom\n      if (currSlide.isZoomable()) {\n        let zoomFactor = -deltaY;\n\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */\n        ) {\n          zoomFactor *= 0.05;\n        } else {\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\n        }\n\n        zoomFactor = 2 ** zoomFactor;\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\n        currSlide.zoomTo(destZoomLevel, {\n          x: e.clientX,\n          y: e.clientY\n        });\n      }\n    } else {\n      // pan\n      if (currSlide.isPannable()) {\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */\n        ) {\n          // 18 - average line height\n          deltaX *= 18;\n          deltaY *= 18;\n        }\n\n        currSlide.panTo(currSlide.pan.x - deltaX, currSlide.pan.y - deltaY);\n      }\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\n\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\n\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\n\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\n\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\n\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\n\nfunction addElementHTML(htmlData) {\n  if (typeof htmlData === 'string') {\n    // Allow developers to provide full svg,\n    // For example:\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\n    //   <path d=\"...\" />\n    //   <circle ... />\n    // </svg>\n    // Can also be any HTML string.\n    return htmlData;\n  }\n\n  if (!htmlData || !htmlData.isCustomSVG) {\n    return '';\n  }\n\n  const svgData = htmlData;\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">'; // replace all %d with size\n\n  out = out.split('%d').join(\n  /** @type {string} */\n  svgData.size || 32); // Icons may contain outline/shadow,\n  // to make it we \"clone\" base icon shape and add border to it.\n  // Icon itself and border are styled via CSS.\n  //\n  // Property shadowID defines ID of element that should be cloned.\n\n  if (svgData.outlineID) {\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\n  }\n\n  out += svgData.inner;\n  out += '</svg>';\n  return out;\n}\n\nclass UIElement {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\n  constructor(pswp, data) {\n    var _container;\n\n    const name = data.name || data.className;\n    let elementHTML = data.html; // @ts-expect-error lookup only by `data.name` maybe?\n\n    if (pswp.options[name] === false) {\n      // exit if element is disabled from options\n      return;\n    } // Allow to override SVG icons from options\n    // @ts-expect-error lookup only by `data.name` maybe?\n\n\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\n      // arrowPrevSVG\n      // arrowNextSVG\n      // closeSVG\n      // zoomSVG\n      // @ts-expect-error lookup only by `data.name` maybe?\n      elementHTML = pswp.options[name + 'SVG'];\n    }\n\n    pswp.dispatch('uiElementCreate', {\n      data\n    });\n    let className = '';\n\n    if (data.isButton) {\n      className += 'pswp__button ';\n      className += data.className || `pswp__button--${data.name}`;\n    } else {\n      className += data.className || `pswp__${data.name}`;\n    }\n\n    let tagName = data.isButton ? data.tagName || 'button' : data.tagName || 'div';\n    tagName =\n    /** @type {keyof HTMLElementTagNameMap} */\n    tagName.toLowerCase();\n    /** @type {HTMLElement} */\n\n    const element = createElement(className, tagName);\n\n    if (data.isButton) {\n      if (tagName === 'button') {\n        /** @type {HTMLButtonElement} */\n        element.type = 'button';\n      }\n\n      let {\n        title\n      } = data;\n      const {\n        ariaLabel\n      } = data; // @ts-expect-error lookup only by `data.name` maybe?\n\n      if (typeof pswp.options[name + 'Title'] === 'string') {\n        // @ts-expect-error lookup only by `data.name` maybe?\n        title = pswp.options[name + 'Title'];\n      }\n\n      if (title) {\n        element.title = title;\n      }\n\n      const ariaText = ariaLabel || title;\n\n      if (ariaText) {\n        element.setAttribute('aria-label', ariaText);\n      }\n    }\n\n    element.innerHTML = addElementHTML(elementHTML);\n\n    if (data.onInit) {\n      data.onInit(element, pswp);\n    }\n\n    if (data.onClick) {\n      element.onclick = e => {\n        if (typeof data.onClick === 'string') {\n          // @ts-ignore\n          pswp[data.onClick]();\n        } else if (typeof data.onClick === 'function') {\n          data.onClick(e, element, pswp);\n        }\n      };\n    } // Top bar is default position\n\n\n    const appendTo = data.appendTo || 'bar';\n    /** @type {HTMLElement | undefined} root element by default */\n\n    let container = pswp.element;\n\n    if (appendTo === 'bar') {\n      if (!pswp.topBar) {\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\n      }\n\n      container = pswp.topBar;\n    } else {\n      // element outside of top bar gets a secondary class\n      // that makes element fade out on close\n      element.classList.add('pswp__hide-on-close');\n\n      if (appendTo === 'wrapper') {\n        container = pswp.scrollWrap;\n      }\n    }\n\n    (_container = container) === null || _container === void 0 || _container.appendChild(pswp.applyFilters('uiElement', element, data));\n  }\n\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\nfunction initArrowButton(element, pswp, isNextButton) {\n  element.classList.add('pswp__button--arrow'); // TODO: this should point to a unique id for this instance\n\n  element.setAttribute('aria-controls', 'pswp__items');\n  pswp.on('change', () => {\n    if (!pswp.options.loop) {\n      if (isNextButton) {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\n      } else {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex > 0);\n      }\n    }\n  });\n}\n/** @type {UIElementData} */\n\n\nconst arrowPrev = {\n  name: 'arrowPrev',\n  className: 'pswp__button--arrow--prev',\n  title: 'Previous',\n  order: 10,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'prev',\n  onInit: initArrowButton\n};\n/** @type {UIElementData} */\n\nconst arrowNext = {\n  name: 'arrowNext',\n  className: 'pswp__button--arrow--next',\n  title: 'Next',\n  order: 11,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'next',\n  onInit: (el, pswp) => {\n    initArrowButton(el, pswp, true);\n  }\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst closeButton = {\n  name: 'close',\n  title: 'Close',\n  order: 20,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\n    outlineID: 'pswp__icn-close'\n  },\n  onClick: 'close'\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst zoomButton = {\n  name: 'zoom',\n  title: 'Zoom',\n  order: 10,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\n    outlineID: 'pswp__icn-zoom'\n  },\n  onClick: 'toggleZoom'\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst loadingIndicator = {\n  name: 'preloader',\n  appendTo: 'bar',\n  order: 7,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\n    outlineID: 'pswp__icn-loading'\n  },\n  onInit: (indicatorElement, pswp) => {\n    /** @type {boolean | undefined} */\n    let isVisible;\n    /** @type {NodeJS.Timeout | null} */\n\n    let delayTimeout = null;\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\n\n    const toggleIndicatorClass = (className, add) => {\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\n    };\n    /**\r\n     * @param {boolean} visible\r\n     */\n\n\n    const setIndicatorVisibility = visible => {\n      if (isVisible !== visible) {\n        isVisible = visible;\n        toggleIndicatorClass('active', visible);\n      }\n    };\n\n    const updatePreloaderVisibility = () => {\n      var _pswp$currSlide;\n\n      if (!((_pswp$currSlide = pswp.currSlide) !== null && _pswp$currSlide !== void 0 && _pswp$currSlide.content.isLoading())) {\n        setIndicatorVisibility(false);\n\n        if (delayTimeout) {\n          clearTimeout(delayTimeout);\n          delayTimeout = null;\n        }\n\n        return;\n      }\n\n      if (!delayTimeout) {\n        // display loading indicator with delay\n        delayTimeout = setTimeout(() => {\n          var _pswp$currSlide2;\n\n          setIndicatorVisibility(Boolean((_pswp$currSlide2 = pswp.currSlide) === null || _pswp$currSlide2 === void 0 ? void 0 : _pswp$currSlide2.content.isLoading()));\n          delayTimeout = null;\n        }, pswp.options.preloaderDelay);\n      }\n    };\n\n    pswp.on('change', updatePreloaderVisibility);\n    pswp.on('loadComplete', e => {\n      if (pswp.currSlide === e.slide) {\n        updatePreloaderVisibility();\n      }\n    }); // expose the method\n\n    if (pswp.ui) {\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\n    }\n  }\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst counterIndicator = {\n  name: 'counter',\n  order: 5,\n  onInit: (counterElement, pswp) => {\n    pswp.on('change', () => {\n      counterElement.innerText = pswp.currIndex + 1 + pswp.options.indexIndicatorSep + pswp.getNumItems();\n    });\n  }\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\n\nfunction setZoomedIn(el, isZoomedIn) {\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\n}\n\nclass UI {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isRegistered = false;\n    /** @type {UIElementData[]} */\n\n    this.uiElementsData = [];\n    /** @type {(UIElement | UIElementData)[]} */\n\n    this.items = [];\n    /** @type {() => void} */\n\n    this.updatePreloaderVisibility = () => {};\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\n\n\n    this._lastUpdatedZoomLevel = undefined;\n  }\n\n  init() {\n    const {\n      pswp\n    } = this;\n    this.isRegistered = false;\n    this.uiElementsData = [closeButton, arrowPrev, arrowNext, zoomButton, loadingIndicator, counterIndicator];\n    pswp.dispatch('uiRegister'); // sort by order\n\n    this.uiElementsData.sort((a, b) => {\n      // default order is 0\n      return (a.order || 0) - (b.order || 0);\n    });\n    this.items = [];\n    this.isRegistered = true;\n    this.uiElementsData.forEach(uiElementData => {\n      this.registerElement(uiElementData);\n    });\n    pswp.on('change', () => {\n      var _pswp$element;\n\n      (_pswp$element = pswp.element) === null || _pswp$element === void 0 || _pswp$element.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\n    });\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\n  }\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\n\n\n  registerElement(elementData) {\n    if (this.isRegistered) {\n      this.items.push(new UIElement(this.pswp, elementData));\n    } else {\n      this.uiElementsData.push(elementData);\n    }\n  }\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\n\n\n  _onZoomPanUpdate() {\n    const {\n      template,\n      currSlide,\n      options\n    } = this.pswp;\n\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\n      return;\n    }\n\n    let {\n      currZoomLevel\n    } = currSlide; // if not open yet - check against initial zoom level\n\n    if (!this.pswp.opener.isOpen) {\n      currZoomLevel = currSlide.zoomLevels.initial;\n    }\n\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\n      return;\n    }\n\n    this._lastUpdatedZoomLevel = currZoomLevel;\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary; // Initial and secondary zoom levels are almost equal\n\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\n      // disable zoom\n      setZoomedIn(template, false);\n      template.classList.remove('pswp--zoom-allowed');\n      return;\n    }\n\n    template.classList.add('pswp--zoom-allowed');\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\n\n    if (options.imageClickAction === 'zoom' || options.imageClickAction === 'zoom-or-close') {\n      template.classList.add('pswp--click-to-zoom');\n    }\n  }\n\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\n\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\nfunction getBoundsByElement(el) {\n  const thumbAreaRect = el.getBoundingClientRect();\n  return {\n    x: thumbAreaRect.left,\n    y: thumbAreaRect.top,\n    w: thumbAreaRect.width\n  };\n}\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\n\n\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\n  const thumbAreaRect = el.getBoundingClientRect(); // fill image into the area\n  // (do they same as object-fit:cover does to retrieve coordinates)\n\n  const hRatio = thumbAreaRect.width / imageWidth;\n  const vRatio = thumbAreaRect.height / imageHeight;\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\n\n  const bounds = {\n    x: thumbAreaRect.left + offsetX,\n    y: thumbAreaRect.top + offsetY,\n    w: imageWidth * fillZoomLevel\n  }; // Coordinates of inner crop area\n  // relative to the image\n\n  bounds.innerRect = {\n    w: thumbAreaRect.width,\n    h: thumbAreaRect.height,\n    x: offsetX,\n    y: offsetY\n  };\n  return bounds;\n}\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\n\n\nfunction getThumbBounds(index, itemData, instance) {\n  // legacy event, before filters were introduced\n  const event = instance.dispatch('thumbBounds', {\n    index,\n    itemData,\n    instance\n  }); // @ts-expect-error\n\n  if (event.thumbBounds) {\n    // @ts-expect-error\n    return event.thumbBounds;\n  }\n\n  const {\n    element\n  } = itemData;\n  /** @type {Bounds | undefined} */\n\n  let thumbBounds;\n  /** @type {HTMLElement | null | undefined} */\n\n  let thumbnail;\n\n  if (element && instance.options.thumbSelector !== false) {\n    const thumbSelector = instance.options.thumbSelector || 'img';\n    thumbnail = element.matches(thumbSelector) ? element :\n    /** @type {HTMLElement | null} */\n    element.querySelector(thumbSelector);\n  }\n\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\n\n  if (thumbnail) {\n    if (!itemData.thumbCropped) {\n      thumbBounds = getBoundsByElement(thumbnail);\n    } else {\n      thumbBounds = getCroppedBoundsByElement(thumbnail, itemData.width || itemData.w || 0, itemData.height || itemData.h || 0);\n    }\n  }\n\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../slide/content.js').default} ContentDefault */\n\n/** @typedef {import('../slide/slide.js').default} Slide */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\n\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\n\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\n\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\nclass PhotoSwipeEvent {\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\n  constructor(type, details) {\n    this.type = type;\n    this.defaultPrevented = false;\n\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n}\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\n\n\nclass Eventable {\n  constructor() {\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\n    this._listeners = {};\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\n\n    this._filters = {};\n    /** @type {PhotoSwipe | undefined} */\n\n    this.pswp = undefined;\n    /** @type {PhotoSwipeOptions | undefined} */\n\n    this.options = undefined;\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\n\n\n  addFilter(name, fn, priority = 100) {\n    var _this$_filters$name, _this$_filters$name2, _this$pswp;\n\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n\n    (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.push({\n      fn,\n      priority\n    });\n    (_this$_filters$name2 = this._filters[name]) === null || _this$_filters$name2 === void 0 || _this$_filters$name2.sort((f1, f2) => f1.priority - f2.priority);\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.addFilter(name, fn, priority);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\n\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      // @ts-expect-error\n      this._filters[name] = this._filters[name].filter(filter => filter.fn !== fn);\n    }\n\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\n\n\n  applyFilters(name, ...args) {\n    var _this$_filters$name3;\n\n    (_this$_filters$name3 = this._filters[name]) === null || _this$_filters$name3 === void 0 || _this$_filters$name3.forEach(filter => {\n      // @ts-expect-error\n      args[0] = filter.fn.apply(this, args);\n    });\n    return args[0];\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  on(name, fn) {\n    var _this$_listeners$name, _this$pswp2;\n\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n\n    (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.push(fn); // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n\n    (_this$pswp2 = this.pswp) === null || _this$pswp2 === void 0 || _this$pswp2.on(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  off(name, fn) {\n    var _this$pswp3;\n\n    if (this._listeners[name]) {\n      // @ts-expect-error\n      this._listeners[name] = this._listeners[name].filter(listener => fn !== listener);\n    }\n\n    (_this$pswp3 = this.pswp) === null || _this$pswp3 === void 0 || _this$pswp3.off(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\n\n\n  dispatch(name, details) {\n    var _this$_listeners$name2;\n\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event =\n    /** @type {AugmentedEvent<T>} */\n    new PhotoSwipeEvent(name, details);\n    (_this$_listeners$name2 = this._listeners[name]) === null || _this$_listeners$name2 === void 0 || _this$_listeners$name2.forEach(listener => {\n      listener.call(this, event);\n    });\n    return event;\n  }\n\n}\n\nclass Placeholder {\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\n    this.element = createElement('pswp__img pswp__img--placeholder', imageSrc ? 'img' : 'div', container);\n\n    if (imageSrc) {\n      const imgEl =\n      /** @type {HTMLImageElement} */\n      this.element;\n      imgEl.decoding = 'async';\n      imgEl.alt = '';\n      imgEl.src = imageSrc;\n      imgEl.setAttribute('role', 'presentation');\n    }\n\n    this.element.setAttribute('aria-hidden', 'true');\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  destroy() {\n    var _this$element;\n\n    if ((_this$element = this.element) !== null && _this$element !== void 0 && _this$element.parentNode) {\n      this.element.remove();\n    }\n\n    this.element = null;\n  }\n\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../util/util.js').LoadState} LoadState */\n\nclass Content {\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\n  constructor(itemData, instance, index) {\n    this.instance = instance;\n    this.data = itemData;\n    this.index = index;\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {Placeholder | undefined} */\n\n    this.placeholder = undefined;\n    /** @type {Slide | undefined} */\n\n    this.slide = undefined;\n    this.displayedImageWidth = 0;\n    this.displayedImageHeight = 0;\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n    this.isAttached = false;\n    this.hasSlide = false;\n    this.isDecoding = false;\n    /** @type {LoadState} */\n\n    this.state = LOAD_STATE.IDLE;\n\n    if (this.data.type) {\n      this.type = this.data.type;\n    } else if (this.data.src) {\n      this.type = 'image';\n    } else {\n      this.type = 'html';\n    }\n\n    this.instance.dispatch('contentInit', {\n      content: this\n    });\n  }\n\n  removePlaceholder() {\n    if (this.placeholder && !this.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not rendered\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = undefined;\n        }\n      }, 1000);\n    }\n  }\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\n\n\n  load(isLazy, reload) {\n    if (this.slide && this.usePlaceholder()) {\n      if (!this.placeholder) {\n        const placeholderSrc = this.instance.applyFilters('placeholderSrc', // use  image-based placeholder only for the first slide,\n        // as rendering (even small stretched thumbnail) is an expensive operation\n        this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false, this);\n        this.placeholder = new Placeholder(placeholderSrc, this.slide.container);\n      } else {\n        const placeholderEl = this.placeholder.element; // Add placeholder to DOM if it was already created\n\n        if (placeholderEl && !placeholderEl.parentElement) {\n          this.slide.container.prepend(placeholderEl);\n        }\n      }\n    }\n\n    if (this.element && !reload) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentLoad', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.isImageContent()) {\n      this.element = createElement('pswp__img', 'img'); // Start loading only after width is defined, as sizes might depend on it.\n      // Due to Safari feature, we must define sizes before srcset.\n\n      if (this.displayedImageWidth) {\n        this.loadImage(isLazy);\n      }\n    } else {\n      this.element = createElement('pswp__content', 'div');\n      this.element.innerHTML = this.data.html || '';\n    }\n\n    if (reload && this.slide) {\n      this.slide.updateContentSize(true);\n    }\n  }\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\n\n\n  loadImage(isLazy) {\n    var _this$data$src, _this$data$alt;\n\n    if (!this.isImageContent() || !this.element || this.instance.dispatch('contentLoadImage', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    const imageElement =\n    /** @type HTMLImageElement */\n    this.element;\n    this.updateSrcsetSizes();\n\n    if (this.data.srcset) {\n      imageElement.srcset = this.data.srcset;\n    }\n\n    imageElement.src = (_this$data$src = this.data.src) !== null && _this$data$src !== void 0 ? _this$data$src : '';\n    imageElement.alt = (_this$data$alt = this.data.alt) !== null && _this$data$alt !== void 0 ? _this$data$alt : '';\n    this.state = LOAD_STATE.LOADING;\n\n    if (imageElement.complete) {\n      this.onLoaded();\n    } else {\n      imageElement.onload = () => {\n        this.onLoaded();\n      };\n\n      imageElement.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\n\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.hasSlide = true;\n    this.instance = slide.pswp; // todo: do we need to unset slide?\n  }\n  /**\r\n   * Content load success handler\r\n   */\n\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide && this.element) {\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        content: this\n      }); // if content is reloaded\n\n      if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {\n        this.append();\n        this.slide.updateContentSize(true);\n      }\n\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n        this.removePlaceholder();\n      }\n    }\n  }\n  /**\r\n   * Content load error handler\r\n   */\n\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.displayError();\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        isError: true,\n        content: this\n      });\n      this.instance.dispatch('loadError', {\n        slide: this.slide,\n        content: this\n      });\n    }\n  }\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\n\n\n  isLoading() {\n    return this.instance.applyFilters('isContentLoading', this.state === LOAD_STATE.LOADING, this);\n  }\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\n\n\n  isError() {\n    return this.state === LOAD_STATE.ERROR;\n  }\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\n\n\n  isImageContent() {\n    return this.type === 'image';\n  }\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    }\n\n    if (this.instance.dispatch('contentResize', {\n      content: this,\n      width,\n      height\n    }).defaultPrevented) {\n      return;\n    }\n\n    setWidthHeight(this.element, width, height);\n\n    if (this.isImageContent() && !this.isError()) {\n      const isInitialSizeUpdate = !this.displayedImageWidth && width;\n      this.displayedImageWidth = width;\n      this.displayedImageHeight = height;\n\n      if (isInitialSizeUpdate) {\n        this.loadImage(false);\n      } else {\n        this.updateSrcsetSizes();\n      }\n\n      if (this.slide) {\n        this.instance.dispatch('imageSizeChange', {\n          slide: this.slide,\n          width,\n          height,\n          content: this\n        });\n      }\n    }\n  }\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\n\n\n  isZoomable() {\n    return this.instance.applyFilters('isContentZoomable', this.isImageContent() && this.state !== LOAD_STATE.ERROR, this);\n  }\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\n\n\n  updateSrcsetSizes() {\n    // Handle srcset sizes attribute.\n    //\n    // Never lower quality, if it was increased previously.\n    // Chrome does this automatically, Firefox and Safari do not,\n    // so we store largest used size in dataset.\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\n      return;\n    }\n\n    const image =\n    /** @type HTMLImageElement */\n    this.element;\n    const sizesWidth = this.instance.applyFilters('srcsetSizesWidth', this.displayedImageWidth, this);\n\n    if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\n      image.sizes = sizesWidth + 'px';\n      image.dataset.largestUsedSize = String(sizesWidth);\n    }\n  }\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\n\n\n  usePlaceholder() {\n    return this.instance.applyFilters('useContentPlaceholder', this.isImageContent(), this);\n  }\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\n\n\n  lazyLoad() {\n    if (this.instance.dispatch('contentLazyLoad', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.load(true);\n  }\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\n\n\n  keepPlaceholder() {\n    return this.instance.applyFilters('isKeepingPlaceholder', this.isLoading(), this);\n  }\n  /**\r\n   * Destroy the content\r\n   */\n\n\n  destroy() {\n    this.hasSlide = false;\n    this.slide = undefined;\n\n    if (this.instance.dispatch('contentDestroy', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.remove();\n\n    if (this.placeholder) {\n      this.placeholder.destroy();\n      this.placeholder = undefined;\n    }\n\n    if (this.isImageContent() && this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = undefined;\n    }\n  }\n  /**\r\n   * Display error message\r\n   */\n\n\n  displayError() {\n    if (this.slide) {\n      var _this$instance$option, _this$instance$option2;\n\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\n      errorMsgEl.innerText = (_this$instance$option = (_this$instance$option2 = this.instance.options) === null || _this$instance$option2 === void 0 ? void 0 : _this$instance$option2.errorMsg) !== null && _this$instance$option !== void 0 ? _this$instance$option : '';\n      errorMsgEl =\n      /** @type {HTMLDivElement} */\n      this.instance.applyFilters('contentErrorElement', errorMsgEl, this);\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\n      this.element.appendChild(errorMsgEl);\n      this.slide.container.innerText = '';\n      this.slide.container.appendChild(this.element);\n      this.slide.updateContentSize(true);\n      this.removePlaceholder();\n    }\n  }\n  /**\r\n   * Append the content\r\n   */\n\n\n  append() {\n    if (this.isAttached || !this.element) {\n      return;\n    }\n\n    this.isAttached = true;\n\n    if (this.state === LOAD_STATE.ERROR) {\n      this.displayError();\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppend', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    const supportsDecode = ('decode' in this.element);\n\n    if (this.isImageContent()) {\n      // Use decode() on nearby slides\n      //\n      // Nearby slide images are in DOM and not hidden via display:none.\n      // However, they are placed offscreen (to the left and right side).\n      //\n      // Some browsers do not composite the image until it's actually visible,\n      // using decode() helps.\n      //\n      // You might ask \"why dont you just decode() and then append all images\",\n      // that's because I want to show image before it's fully loaded,\n      // as browser can render parts of image while it is loading.\n      // We do not do this in Safari due to partial loading bug.\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\n        this.isDecoding = true; // purposefully using finally instead of then,\n        // as if srcset sizes changes dynamically - it may cause decode error\n\n        /** @type {HTMLImageElement} */\n\n        this.element.decode().catch(() => {}).finally(() => {\n          this.isDecoding = false;\n          this.appendImage();\n        });\n      } else {\n        this.appendImage();\n      }\n    } else if (this.slide && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n  }\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\n\n\n  activate() {\n    if (this.instance.dispatch('contentActivate', {\n      content: this\n    }).defaultPrevented || !this.slide) {\n      return;\n    }\n\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImage();\n    } else if (this.isError()) {\n      this.load(false, true); // try to reload\n    }\n\n    if (this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\n    }\n  }\n  /**\r\n   * Deactivate the content\r\n   */\n\n\n  deactivate() {\n    this.instance.dispatch('contentDeactivate', {\n      content: this\n    });\n\n    if (this.slide && this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\r\n   * Remove the content from DOM\r\n   */\n\n\n  remove() {\n    this.isAttached = false;\n\n    if (this.instance.dispatch('contentRemove', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n\n    if (this.placeholder && this.placeholder.element) {\n      this.placeholder.element.remove();\n    }\n  }\n  /**\r\n   * Append the image content to slide container\r\n   */\n\n\n  appendImage() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppendImage', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    } // ensure that element exists and is not already appended\n\n\n    if (this.slide && this.element && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n      this.removePlaceholder();\n    }\n  }\n\n}\n\n/** @typedef {import('./content.js').default} Content */\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\nconst MIN_SLIDES_TO_CACHE = 5;\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\n\nfunction lazyLoadData(itemData, instance, index) {\n  const content = instance.createContentFromData(itemData, index);\n  /** @type {ZoomLevel | undefined} */\n\n  let zoomLevel;\n  const {\n    options\n  } = instance; // We need to know dimensions of the image to preload it,\n  // as it might use srcset, and we need to define sizes\n\n  if (options) {\n    zoomLevel = new ZoomLevel(options, itemData, -1);\n    let viewportSize;\n\n    if (instance.pswp) {\n      viewportSize = instance.pswp.viewportSize;\n    } else {\n      viewportSize = getViewportSize(options, instance);\n    }\n\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\n    zoomLevel.update(content.width, content.height, panAreaSize);\n  }\n\n  content.lazyLoad();\n\n  if (zoomLevel) {\n    content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));\n  }\n\n  return content;\n}\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\n\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', {\n    index,\n    itemData\n  }).defaultPrevented) {\n    return;\n  }\n\n  return lazyLoadData(itemData, instance, index);\n}\n\nclass ContentLoader {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp; // Total amount of cached images\n\n    this.limit = Math.max(pswp.options.preload[0] + pswp.options.preload[1] + 1, MIN_SLIDES_TO_CACHE);\n    /** @type {Content[]} */\n\n    this._cachedItems = [];\n  }\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\n\n\n  updateLazy(diff) {\n    const {\n      pswp\n    } = this;\n\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\n      return;\n    }\n\n    const {\n      preload\n    } = pswp.options;\n    const isForward = diff === undefined ? true : diff >= 0;\n    let i; // preload[1] - num items to preload in forward direction\n\n    for (i = 0; i <= preload[1]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : -i));\n    } // preload[0] - num items to preload in backward direction\n\n\n    for (i = 1; i <= preload[0]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? -i : i));\n    }\n  }\n  /**\r\n   * @param {number} initialIndex\r\n   */\n\n\n  loadSlideByIndex(initialIndex) {\n    const index = this.pswp.getLoopedIndex(initialIndex); // try to get cached content\n\n    let content = this.getContentByIndex(index);\n\n    if (!content) {\n      // no cached content, so try to load from scratch:\n      content = lazyLoadSlide(index, this.pswp); // if content can be loaded, add it to cache:\n\n      if (content) {\n        this.addToCache(content);\n      }\n    }\n  }\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\n\n\n  getContentBySlide(slide) {\n    let content = this.getContentByIndex(slide.index);\n\n    if (!content) {\n      // create content if not found in cache\n      content = this.pswp.createContentFromData(slide.data, slide.index);\n      this.addToCache(content);\n    } // assign slide to content\n\n\n    content.setSlide(slide);\n    return content;\n  }\n  /**\r\n   * @param {Content} content\r\n   */\n\n\n  addToCache(content) {\n    // move to the end of array\n    this.removeByIndex(content.index);\n\n    this._cachedItems.push(content);\n\n    if (this._cachedItems.length > this.limit) {\n      // Destroy the first content that's not attached\n      const indexToRemove = this._cachedItems.findIndex(item => {\n        return !item.isAttached && !item.hasSlide;\n      });\n\n      if (indexToRemove !== -1) {\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\n\n        removedItem.destroy();\n      }\n    }\n  }\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\n\n\n  removeByIndex(index) {\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\n\n    if (indexToRemove !== -1) {\n      this._cachedItems.splice(indexToRemove, 1);\n    }\n  }\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\n\n\n  getContentByIndex(index) {\n    return this._cachedItems.find(content => content.index === index);\n  }\n\n  destroy() {\n    this._cachedItems.forEach(content => content.destroy());\n\n    this._cachedItems = [];\n  }\n\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\n\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\n\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\n\nclass PhotoSwipeBase extends Eventable {\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\n  getNumItems() {\n    var _this$options;\n\n    let numItems = 0;\n    const dataSource = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.dataSource;\n\n    if (dataSource && 'length' in dataSource) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource && 'gallery' in dataSource) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    } // legacy event, before filters were introduced\n\n\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\n\n\n  createContentFromData(slideData, index) {\n    return new Content(slideData, this, index);\n  }\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\n\n\n  getItemData(index) {\n    var _this$options2;\n\n    const dataSource = (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.dataSource;\n    /** @type {SlideData | HTMLElement} */\n\n    let dataSourceItem = {};\n\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && 'gallery' in dataSource) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallery and children options\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    } // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n\n\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\n\n\n  _getGalleryDOMElements(galleryElement) {\n    var _this$options3, _this$options4;\n\n    if ((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.children || (_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.childSelector) {\n      return getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];\n    }\n\n    return [galleryElement];\n  }\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\n\n\n  _domElementToItemData(element) {\n    /** @type {SlideData} */\n    const itemData = {\n      element\n    };\n    const linkEl =\n    /** @type {HTMLAnchorElement} */\n    element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n      if (linkEl.dataset.pswpSrcset) {\n        itemData.srcset = linkEl.dataset.pswpSrcset;\n      }\n\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0; // support legacy w & h properties\n\n      itemData.w = itemData.width;\n      itemData.h = itemData.height;\n\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n\n      const thumbnailEl = element.querySelector('img');\n\n      if (thumbnailEl) {\n        var _thumbnailEl$getAttri;\n\n        // msrc is URL to placeholder image that's displayed before large image is loaded\n        // by default it's displayed only for the first slide\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = (_thumbnailEl$getAttri = thumbnailEl.getAttribute('alt')) !== null && _thumbnailEl$getAttri !== void 0 ? _thumbnailEl$getAttri : '';\n      }\n\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n\n    return this.applyFilters('domItemData', itemData, element, linkEl);\n  }\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\n\n\n  lazyLoadData(itemData, index) {\n    return lazyLoadData(itemData, this, index);\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\n// some browsers do not paint\n// elements which opacity is set to 0,\n// since we need to pre-render elements for the animation -\n// we set it to the minimum amount\n\nconst MIN_OPACITY = 0.003;\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\n\nclass Opener {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isClosed = true;\n    this.isOpen = false;\n    this.isClosing = false;\n    this.isOpening = false;\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\n\n    this._duration = undefined;\n    /** @private */\n\n    this._useAnimation = false;\n    /** @private */\n\n    this._croppedZoom = false;\n    /** @private */\n\n    this._animateRootOpacity = false;\n    /** @private */\n\n    this._animateBgOpacity = false;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\n\n    this._placeholder = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\n\n    this._opacityElement = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\n\n    this._cropContainer1 = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\n\n    this._cropContainer2 = undefined;\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\n\n    this._thumbBounds = undefined;\n    this._prepareOpen = this._prepareOpen.bind(this); // Override initial zoom and pan position\n\n    pswp.on('firstZoomPan', this._prepareOpen);\n  }\n\n  open() {\n    this._prepareOpen();\n\n    this._start();\n  }\n\n  close() {\n    if (this.isClosed || this.isClosing || this.isOpening) {\n      // if we close during opening animation\n      // for now do nothing,\n      // browsers aren't good at changing the direction of the CSS transition\n      return;\n    }\n\n    const slide = this.pswp.currSlide;\n    this.isOpen = false;\n    this.isOpening = false;\n    this.isClosing = true;\n    this._duration = this.pswp.options.hideAnimationDuration;\n\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\n      this._duration = 0;\n    }\n\n    this._applyStartProps();\n\n    setTimeout(() => {\n      this._start();\n    }, this._croppedZoom ? 30 : 0);\n  }\n  /** @private */\n\n\n  _prepareOpen() {\n    this.pswp.off('firstZoomPan', this._prepareOpen);\n\n    if (!this.isOpening) {\n      const slide = this.pswp.currSlide;\n      this.isOpening = true;\n      this.isClosing = false;\n      this._duration = this.pswp.options.showAnimationDuration;\n\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\n        this._duration = 0;\n      }\n\n      this._applyStartProps();\n    }\n  }\n  /** @private */\n\n\n  _applyStartProps() {\n    const {\n      pswp\n    } = this;\n    const slide = this.pswp.currSlide;\n    const {\n      options\n    } = pswp;\n\n    if (options.showHideAnimationType === 'fade') {\n      options.showHideOpacity = true;\n      this._thumbBounds = undefined;\n    } else if (options.showHideAnimationType === 'none') {\n      options.showHideOpacity = false;\n      this._duration = 0;\n      this._thumbBounds = undefined;\n    } else if (this.isOpening && pswp._initialThumbBounds) {\n      // Use initial bounds if defined\n      this._thumbBounds = pswp._initialThumbBounds;\n    } else {\n      this._thumbBounds = this.pswp.getThumbBounds();\n    }\n\n    this._placeholder = slide === null || slide === void 0 ? void 0 : slide.getPlaceholderElement();\n    pswp.animations.stopAll(); // Discard animations when duration is less than 50ms\n\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\n    this._animateZoom = Boolean(this._thumbBounds) && (slide === null || slide === void 0 ? void 0 : slide.content.usePlaceholder()) && (!this.isClosing || !pswp.mainScroll.isShifted());\n\n    if (!this._animateZoom) {\n      this._animateRootOpacity = true;\n\n      if (this.isOpening && slide) {\n        slide.zoomAndPanToInitial();\n        slide.applyCurrentZoomPan();\n      }\n    } else {\n      var _options$showHideOpac;\n\n      this._animateRootOpacity = (_options$showHideOpac = options.showHideOpacity) !== null && _options$showHideOpac !== void 0 ? _options$showHideOpac : false;\n    }\n\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\n\n    if (!this._useAnimation) {\n      this._duration = 0;\n      this._animateZoom = false;\n      this._animateBgOpacity = false;\n      this._animateRootOpacity = true;\n\n      if (this.isOpening) {\n        if (pswp.element) {\n          pswp.element.style.opacity = String(MIN_OPACITY);\n        }\n\n        pswp.applyBgOpacity(1);\n      }\n\n      return;\n    }\n\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\n      var _this$pswp$currSlide;\n\n      // Properties are used when animation from cropped thumbnail\n      this._croppedZoom = true;\n      this._cropContainer1 = this.pswp.container;\n      this._cropContainer2 = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.holderElement;\n\n      if (pswp.container) {\n        pswp.container.style.overflow = 'hidden';\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\n      }\n    } else {\n      this._croppedZoom = false;\n    }\n\n    if (this.isOpening) {\n      // Apply styles before opening transition\n      if (this._animateRootOpacity) {\n        if (pswp.element) {\n          pswp.element.style.opacity = String(MIN_OPACITY);\n        }\n\n        pswp.applyBgOpacity(1);\n      } else {\n        if (this._animateBgOpacity && pswp.bg) {\n          pswp.bg.style.opacity = String(MIN_OPACITY);\n        }\n\n        if (pswp.element) {\n          pswp.element.style.opacity = '1';\n        }\n      }\n\n      if (this._animateZoom) {\n        this._setClosedStateZoomPan();\n\n        if (this._placeholder) {\n          // tell browser that we plan to animate the placeholder\n          this._placeholder.style.willChange = 'transform'; // hide placeholder to allow hiding of\n          // elements that overlap it (such as icons over the thumbnail)\n\n          this._placeholder.style.opacity = String(MIN_OPACITY);\n        }\n      }\n    } else if (this.isClosing) {\n      // hide nearby slides to make sure that\n      // they are not painted during the transition\n      if (pswp.mainScroll.itemHolders[0]) {\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\n      }\n\n      if (pswp.mainScroll.itemHolders[2]) {\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\n      }\n\n      if (this._croppedZoom) {\n        if (pswp.mainScroll.x !== 0) {\n          // shift the main scroller to zero position\n          pswp.mainScroll.resetPosition();\n          pswp.mainScroll.resize();\n        }\n      }\n    }\n  }\n  /** @private */\n\n\n  _start() {\n    if (this.isOpening && this._useAnimation && this._placeholder && this._placeholder.tagName === 'IMG') {\n      // To ensure smooth animation\n      // we wait till the current slide image placeholder is decoded,\n      // but no longer than 250ms,\n      // and no shorter than 50ms\n      // (just using requestanimationframe is not enough in Firefox,\n      // for some reason)\n      new Promise(resolve => {\n        let decoded = false;\n        let isDelaying = true;\n        decodeImage(\n        /** @type {HTMLImageElement} */\n        this._placeholder).finally(() => {\n          decoded = true;\n\n          if (!isDelaying) {\n            resolve(true);\n          }\n        });\n        setTimeout(() => {\n          isDelaying = false;\n\n          if (decoded) {\n            resolve(true);\n          }\n        }, 50);\n        setTimeout(resolve, 250);\n      }).finally(() => this._initiate());\n    } else {\n      this._initiate();\n    }\n  }\n  /** @private */\n\n\n  _initiate() {\n    var _this$pswp$element, _this$pswp$element2;\n\n    (_this$pswp$element = this.pswp.element) === null || _this$pswp$element === void 0 || _this$pswp$element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\n    this.pswp.dispatch(this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'); // legacy event\n\n    this.pswp.dispatch(\n    /** @type {'initialZoomIn' | 'initialZoomOut'} */\n    'initialZoom' + (this.isOpening ? 'In' : 'Out'));\n    (_this$pswp$element2 = this.pswp.element) === null || _this$pswp$element2 === void 0 || _this$pswp$element2.classList.toggle('pswp--ui-visible', this.isOpening);\n\n    if (this.isOpening) {\n      if (this._placeholder) {\n        // unhide the placeholder\n        this._placeholder.style.opacity = '1';\n      }\n\n      this._animateToOpenState();\n    } else if (this.isClosing) {\n      this._animateToClosedState();\n    }\n\n    if (!this._useAnimation) {\n      this._onAnimationComplete();\n    }\n  }\n  /** @private */\n\n\n  _onAnimationComplete() {\n    const {\n      pswp\n    } = this;\n    this.isOpen = this.isOpening;\n    this.isClosed = this.isClosing;\n    this.isOpening = false;\n    this.isClosing = false;\n    pswp.dispatch(this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'); // legacy event\n\n    pswp.dispatch(\n    /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\n    'initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\n\n    if (this.isClosed) {\n      pswp.destroy();\n    } else if (this.isOpen) {\n      var _pswp$currSlide;\n\n      if (this._animateZoom && pswp.container) {\n        pswp.container.style.overflow = 'visible';\n        pswp.container.style.width = '100%';\n      }\n\n      (_pswp$currSlide = pswp.currSlide) === null || _pswp$currSlide === void 0 || _pswp$currSlide.applyCurrentZoomPan();\n    }\n  }\n  /** @private */\n\n\n  _animateToOpenState() {\n    const {\n      pswp\n    } = this;\n\n    if (this._animateZoom) {\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\n\n        this._animateTo(this._cropContainer2, 'transform', 'none');\n      }\n\n      if (pswp.currSlide) {\n        pswp.currSlide.zoomAndPanToInitial();\n\n        this._animateTo(pswp.currSlide.container, 'transform', pswp.currSlide.getCurrentTransform());\n      }\n    }\n\n    if (this._animateBgOpacity && pswp.bg) {\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\n    }\n\n    if (this._animateRootOpacity && pswp.element) {\n      this._animateTo(pswp.element, 'opacity', '1');\n    }\n  }\n  /** @private */\n\n\n  _animateToClosedState() {\n    const {\n      pswp\n    } = this;\n\n    if (this._animateZoom) {\n      this._setClosedStateZoomPan(true);\n    } // do not animate opacity if it's already at 0\n\n\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\n      this._animateTo(pswp.bg, 'opacity', '0');\n    }\n\n    if (this._animateRootOpacity && pswp.element) {\n      this._animateTo(pswp.element, 'opacity', '0');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\n\n\n  _setClosedStateZoomPan(animate) {\n    if (!this._thumbBounds) return;\n    const {\n      pswp\n    } = this;\n    const {\n      innerRect\n    } = this._thumbBounds;\n    const {\n      currSlide,\n      viewportSize\n    } = pswp;\n\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\n      const containerTwoPanX = viewportSize.x - innerRect.w;\n      const containerTwoPanY = viewportSize.y - innerRect.h;\n\n      if (animate) {\n        this._animateTo(this._cropContainer1, 'transform', toTransformString(containerOnePanX, containerOnePanY));\n\n        this._animateTo(this._cropContainer2, 'transform', toTransformString(containerTwoPanX, containerTwoPanY));\n      } else {\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\n      }\n    }\n\n    if (currSlide) {\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\n\n      if (animate) {\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\n      } else {\n        currSlide.applyCurrentZoomPan();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\n\n\n  _animateTo(target, prop, propValue) {\n    if (!this._duration) {\n      target.style[prop] = propValue;\n      return;\n    }\n\n    const {\n      animations\n    } = this.pswp;\n    /** @type {AnimationProps} */\n\n    const animProps = {\n      duration: this._duration,\n      easing: this.pswp.options.easing,\n      onComplete: () => {\n        if (!animations.activeAnimations.length) {\n          this._onAnimationComplete();\n        }\n      },\n      target\n    };\n    animProps[prop] = propValue;\n    animations.startTransition(animProps);\n  }\n\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\n\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\n\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\n\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\n\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\n\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\n\n/** @typedef {SlideData[]} DataSourceArray */\n\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\n\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\n\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\n\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\n\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\n\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\n\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\n\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\n\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} trapFocus\r\n * Trap focus within PhotoSwipe element while it's open.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\n\n/** @type {PreparedPhotoSwipeOptions} */\n\nconst defaultOptions = {\n  allowPanToNext: true,\n  spacing: 0.1,\n  loop: true,\n  pinchToClose: true,\n  closeOnVerticalDrag: true,\n  hideAnimationDuration: 333,\n  showAnimationDuration: 333,\n  zoomAnimationDuration: 333,\n  escKey: true,\n  arrowKeys: true,\n  trapFocus: true,\n  returnFocus: true,\n  maxWidthToAnimate: 4000,\n  clickToCloseNonZoomable: true,\n  imageClickAction: 'zoom-or-close',\n  bgClickAction: 'close',\n  tapAction: 'toggle-controls',\n  doubleTapAction: 'zoom',\n  indexIndicatorSep: ' / ',\n  preloaderDelay: 2000,\n  bgOpacity: 0.8,\n  index: 0,\n  errorMsg: 'The image cannot be loaded',\n  preload: [1, 2],\n  easing: 'cubic-bezier(.4,0,.22,1)'\n};\n/**\r\n * PhotoSwipe Core\r\n */\n\nclass PhotoSwipe extends PhotoSwipeBase {\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\n  constructor(options) {\n    super();\n    this.options = this._prepareOptions(options || {});\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\n\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\n\n    this._prevViewportSize = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\n\n    this.viewportSize = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * background (backdrop) opacity\r\n     */\n\n    this.bgOpacity = 1;\n    this.currIndex = 0;\n    this.potentialIndex = 0;\n    this.isOpen = false;\n    this.isDestroying = false;\n    this.hasMouse = false;\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\n\n    this._initialItemData = {};\n    /** @type {Bounds | undefined} */\n\n    this._initialThumbBounds = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.topBar = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.template = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.container = undefined;\n    /** @type {HTMLElement | undefined} */\n\n    this.scrollWrap = undefined;\n    /** @type {Slide | undefined} */\n\n    this.currSlide = undefined;\n    this.events = new DOMEvents();\n    this.animations = new Animations();\n    this.mainScroll = new MainScroll(this);\n    this.gestures = new Gestures(this);\n    this.opener = new Opener(this);\n    this.keyboard = new Keyboard(this);\n    this.contentLoader = new ContentLoader(this);\n  }\n  /** @returns {boolean} */\n\n\n  init() {\n    if (this.isOpen || this.isDestroying) {\n      return false;\n    }\n\n    this.isOpen = true;\n    this.dispatch('init'); // legacy\n\n    this.dispatch('beforeOpen');\n\n    this._createMainStructure(); // add classes to the root element of PhotoSwipe\n\n\n    let rootClasses = 'pswp--open';\n\n    if (this.gestures.supportsTouch) {\n      rootClasses += ' pswp--touch';\n    }\n\n    if (this.options.mainClass) {\n      rootClasses += ' ' + this.options.mainClass;\n    }\n\n    if (this.element) {\n      this.element.className += ' ' + rootClasses;\n    }\n\n    this.currIndex = this.options.index || 0;\n    this.potentialIndex = this.currIndex;\n    this.dispatch('firstUpdate'); // starting index can be modified here\n    // initialize scroll wheel handler to block the scroll\n\n    this.scrollWheel = new ScrollWheel(this); // sanitize index\n\n    if (Number.isNaN(this.currIndex) || this.currIndex < 0 || this.currIndex >= this.getNumItems()) {\n      this.currIndex = 0;\n    }\n\n    if (!this.gestures.supportsTouch) {\n      // enable mouse features if no touch support detected\n      this.mouseDetected();\n    } // causes forced synchronous layout\n\n\n    this.updateSize();\n    this.offset.y = window.pageYOffset;\n    this._initialItemData = this.getItemData(this.currIndex);\n    this.dispatch('gettingData', {\n      index: this.currIndex,\n      data: this._initialItemData,\n      slide: undefined\n    }); // *Layout* - calculate size and position of elements here\n\n    this._initialThumbBounds = this.getThumbBounds();\n    this.dispatch('initialLayout');\n    this.on('openingAnimationEnd', () => {\n      const {\n        itemHolders\n      } = this.mainScroll; // Add content to the previous and next slide\n\n      if (itemHolders[0]) {\n        itemHolders[0].el.style.display = 'block';\n        this.setContent(itemHolders[0], this.currIndex - 1);\n      }\n\n      if (itemHolders[2]) {\n        itemHolders[2].el.style.display = 'block';\n        this.setContent(itemHolders[2], this.currIndex + 1);\n      }\n\n      this.appendHeavy();\n      this.contentLoader.updateLazy();\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\n      this.dispatch('bindEvents');\n    }); // set content for center slide (first time)\n\n    if (this.mainScroll.itemHolders[1]) {\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\n    }\n\n    this.dispatch('change');\n    this.opener.open();\n    this.dispatch('afterInit');\n    return true;\n  }\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\n\n\n  getLoopedIndex(index) {\n    const numSlides = this.getNumItems();\n\n    if (this.options.loop) {\n      if (index > numSlides - 1) {\n        index -= numSlides;\n      }\n\n      if (index < 0) {\n        index += numSlides;\n      }\n    }\n\n    return clamp(index, 0, numSlides - 1);\n  }\n\n  appendHeavy() {\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      var _itemHolder$slide;\n\n      (_itemHolder$slide = itemHolder.slide) === null || _itemHolder$slide === void 0 || _itemHolder$slide.appendHeavy();\n    });\n  }\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\n\n\n  goTo(index) {\n    this.mainScroll.moveIndexBy(this.getLoopedIndex(index) - this.potentialIndex);\n  }\n  /**\r\n   * Go to the next slide.\r\n   */\n\n\n  next() {\n    this.goTo(this.potentialIndex + 1);\n  }\n  /**\r\n   * Go to the previous slide.\r\n   */\n\n\n  prev() {\n    this.goTo(this.potentialIndex - 1);\n  }\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\n\n\n  zoomTo(...args) {\n    var _this$currSlide;\n\n    (_this$currSlide = this.currSlide) === null || _this$currSlide === void 0 || _this$currSlide.zoomTo(...args);\n  }\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\n\n\n  toggleZoom() {\n    var _this$currSlide2;\n\n    (_this$currSlide2 = this.currSlide) === null || _this$currSlide2 === void 0 || _this$currSlide2.toggleZoom();\n  }\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\n\n\n  close() {\n    if (!this.opener.isOpen || this.isDestroying) {\n      return;\n    }\n\n    this.isDestroying = true;\n    this.dispatch('close');\n    this.events.removeAll();\n    this.opener.close();\n  }\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\n\n\n  destroy() {\n    var _this$element;\n\n    if (!this.isDestroying) {\n      this.options.showHideAnimationType = 'none';\n      this.close();\n      return;\n    }\n\n    this.dispatch('destroy');\n    this._listeners = {};\n\n    if (this.scrollWrap) {\n      this.scrollWrap.ontouchmove = null;\n      this.scrollWrap.ontouchend = null;\n    }\n\n    (_this$element = this.element) === null || _this$element === void 0 || _this$element.remove();\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      var _itemHolder$slide2;\n\n      (_itemHolder$slide2 = itemHolder.slide) === null || _itemHolder$slide2 === void 0 || _itemHolder$slide2.destroy();\n    });\n    this.contentLoader.destroy();\n    this.events.removeAll();\n  }\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\n\n\n  refreshSlideContent(slideIndex) {\n    this.contentLoader.removeByIndex(slideIndex);\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\n      var _this$currSlide$index, _this$currSlide3;\n\n      let potentialHolderIndex = ((_this$currSlide$index = (_this$currSlide3 = this.currSlide) === null || _this$currSlide3 === void 0 ? void 0 : _this$currSlide3.index) !== null && _this$currSlide$index !== void 0 ? _this$currSlide$index : 0) - 1 + i;\n\n      if (this.canLoop()) {\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\n      }\n\n      if (potentialHolderIndex === slideIndex) {\n        // set the new slide content\n        this.setContent(itemHolder, slideIndex, true); // activate the new slide if it's current\n\n        if (i === 1) {\n          var _itemHolder$slide3;\n\n          this.currSlide = itemHolder.slide;\n          (_itemHolder$slide3 = itemHolder.slide) === null || _itemHolder$slide3 === void 0 || _itemHolder$slide3.setIsActive(true);\n        }\n      }\n    });\n    this.dispatch('change');\n  }\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\n\n\n  setContent(holder, index, force) {\n    if (this.canLoop()) {\n      index = this.getLoopedIndex(index);\n    }\n\n    if (holder.slide) {\n      if (holder.slide.index === index && !force) {\n        // exit if holder already contains this slide\n        // this could be common when just three slides are used\n        return;\n      } // destroy previous slide\n\n\n      holder.slide.destroy();\n      holder.slide = undefined;\n    } // exit if no loop and index is out of bounds\n\n\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\n      return;\n    }\n\n    const itemData = this.getItemData(index);\n    holder.slide = new Slide(itemData, index, this); // set current slide\n\n    if (index === this.currIndex) {\n      this.currSlide = holder.slide;\n    }\n\n    holder.slide.append(holder.el);\n  }\n  /** @returns {Point} */\n\n\n  getViewportCenterPoint() {\n    return {\n      x: this.viewportSize.x / 2,\n      y: this.viewportSize.y / 2\n    };\n  }\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\n\n\n  updateSize(force) {\n    // let item;\n    // let itemIndex;\n    if (this.isDestroying) {\n      // exit if PhotoSwipe is closed or closing\n      // (to avoid errors, as resize event might be delayed)\n      return;\n    } //const newWidth = this.scrollWrap.clientWidth;\n    //const newHeight = this.scrollWrap.clientHeight;\n\n\n    const newViewportSize = getViewportSize(this.options, this);\n\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\n      // Exit if dimensions were not changed\n      return;\n    } //this._prevViewportSize.x = newWidth;\n    //this._prevViewportSize.y = newHeight;\n\n\n    equalizePoints(this._prevViewportSize, newViewportSize);\n    this.dispatch('beforeResize');\n    equalizePoints(this.viewportSize, this._prevViewportSize);\n\n    this._updatePageScrollOffset();\n\n    this.dispatch('viewportSize'); // Resize slides only after opener animation is finished\n    // and don't re-calculate size on inital size update\n\n    this.mainScroll.resize(this.opener.isOpen);\n\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\n      this.mouseDetected();\n    }\n\n    this.dispatch('resize');\n  }\n  /**\r\n   * @param {number} opacity\r\n   */\n\n\n  applyBgOpacity(opacity) {\n    this.bgOpacity = Math.max(opacity, 0);\n\n    if (this.bg) {\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\n    }\n  }\n  /**\r\n   * Whether mouse is detected\r\n   */\n\n\n  mouseDetected() {\n    if (!this.hasMouse) {\n      var _this$element2;\n\n      this.hasMouse = true;\n      (_this$element2 = this.element) === null || _this$element2 === void 0 || _this$element2.classList.add('pswp--has_mouse');\n    }\n  }\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\n\n\n  _handlePageResize() {\n    this.updateSize(); // In iOS webview, if element size depends on document size,\n    // it'll be measured incorrectly in resize event\n    //\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\n\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\n      setTimeout(() => {\n        this.updateSize();\n      }, 500);\n    }\n  }\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\n\n\n  _updatePageScrollOffset() {\n    this.setScrollOffset(0, window.pageYOffset);\n  }\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\n\n\n  setScrollOffset(x, y) {\n    this.offset.x = x;\n    this.offset.y = y;\n    this.dispatch('updateScrollOffset');\n  }\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\n\n\n  _createMainStructure() {\n    // root DOM element of PhotoSwipe (.pswp)\n    this.element = createElement('pswp', 'div');\n    this.element.setAttribute('tabindex', '-1');\n    this.element.setAttribute('role', 'dialog'); // template is legacy prop\n\n    this.template = this.element; // Background is added as a separate element,\n    // as animating opacity is faster than animating rgba()\n\n    this.bg = createElement('pswp__bg', 'div', this.element);\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\n    this.container = createElement('pswp__container', 'div', this.scrollWrap); // aria pattern: carousel\n\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\n    this.container.setAttribute('aria-live', 'off');\n    this.container.setAttribute('id', 'pswp__items');\n    this.mainScroll.appendHolders();\n    this.ui = new UI(this);\n    this.ui.init(); // append to DOM\n\n    (this.options.appendToEl || document.body).appendChild(this.element);\n  }\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\n\n\n  getThumbBounds() {\n    return getThumbBounds(this.currIndex, this.currSlide ? this.currSlide.data : this._initialItemData, this);\n  }\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\n\n\n  canLoop() {\n    return this.options.loop && this.getNumItems() > 2;\n  }\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\n\n\n  _prepareOptions(options) {\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\n      options.showHideAnimationType = 'none';\n      options.zoomAnimationDuration = 0;\n    }\n    /** @type {PreparedPhotoSwipeOptions} */\n\n\n    return { ...defaultOptions,\n      ...options\n    };\n  }\n\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n","/**\r\n * PhotoSwipe Dynamic Caption plugin v1.2.7\r\n * https://github.com/dimsemenov/photoswipe-dynamic-caption-plugin\r\n * \r\n * By https://dimsemenov.com\r\n */\r\n\r\nconst defaultOptions = {\r\n  captionContent: '.pswp-caption-content',\r\n  type: 'auto',\r\n  horizontalEdgeThreshold: 20,\r\n  mobileCaptionOverlapRatio: 0.3,\r\n  mobileLayoutBreakpoint: 600,\r\n  verticallyCenterImage: false\r\n};\r\n\r\nclass PhotoSwipeDynamicCaption {\r\n  constructor(lightbox, options) {\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n\r\n    this.lightbox = lightbox;\r\n\r\n    this.lightbox.on('init', () => {\r\n      this.pswp = this.lightbox.pswp;\r\n      this.initCaption();\r\n    });\r\n  }\r\n\r\n  initCaption() {\r\n    const { pswp } = this;\r\n\r\n    pswp.on('change', () => {\r\n      // make sure caption is displayed after slides are switched\r\n      this.showCaption(this.pswp.currSlide);\r\n    });\r\n\r\n    pswp.on('calcSlideSize', (e) => this.onCalcSlideSize(e));\r\n\r\n    pswp.on('slideDestroy', (e) => {\r\n      if (e.slide.dynamicCaption) {\r\n        if (e.slide.dynamicCaption.element) {\r\n          e.slide.dynamicCaption.element.remove();\r\n        }\r\n        delete e.slide.dynamicCaption;\r\n      }\r\n    });\r\n\r\n    // hide caption if zoomed\r\n    pswp.on('zoomPanUpdate', ({ slide }) => {\r\n      if (pswp.opener.isOpen && slide.dynamicCaption) {\r\n        if (slide.currZoomLevel > slide.zoomLevels.initial) {\r\n          this.hideCaption(slide);\r\n        } else {\r\n          this.showCaption(slide);\r\n        }\r\n  \r\n        // move caption on vertical drag\r\n        if (slide.dynamicCaption.element) {\r\n          let captionYOffset = 0;\r\n          if (slide.currZoomLevel <= slide.zoomLevels.initial) {\r\n            const shiftedAmount = slide.pan.y - slide.bounds.center.y;\r\n            if (Math.abs(shiftedAmount) > 1) {\r\n              captionYOffset = shiftedAmount;\r\n            }\r\n          }\r\n\r\n          this.setCaptionYOffset(slide.dynamicCaption.element, captionYOffset);\r\n        }\r\n\r\n        this.adjustPanArea(slide, slide.currZoomLevel);\r\n      }\r\n    });\r\n\r\n    pswp.on('beforeZoomTo', (e) => {\r\n      this.adjustPanArea(pswp.currSlide, e.destZoomLevel);\r\n    });\r\n\r\n    // Stop default action of tap when tapping on the caption\r\n    pswp.on('tapAction', (e) => {\r\n      if (e.originalEvent.target.closest('.pswp__dynamic-caption')) {\r\n        e.preventDefault();\r\n      }\r\n    });\r\n  }\r\n\r\n  adjustPanArea(slide, zoomLevel) {\r\n    if (slide.dynamicCaption && slide.dynamicCaption.adjustedPanAreaSize) {\r\n      if (zoomLevel > slide.zoomLevels.initial) {\r\n        slide.panAreaSize.x = slide.dynamicCaption.originalPanAreaSize.x;\r\n        slide.panAreaSize.y = slide.dynamicCaption.originalPanAreaSize.y;\r\n      } else {\r\n        // Restore panAreaSize after we zoom back to initial position\r\n        slide.panAreaSize.x = slide.dynamicCaption.adjustedPanAreaSize.x;\r\n        slide.panAreaSize.y = slide.dynamicCaption.adjustedPanAreaSize.y;\r\n      }\r\n    }\r\n  }\r\n\r\n  useMobileLayout() {\r\n    const { mobileLayoutBreakpoint } = this.options;\r\n\r\n    if (typeof mobileLayoutBreakpoint === 'function') {\r\n      return mobileLayoutBreakpoint.call(this);\r\n    } else if (typeof mobileLayoutBreakpoint === 'number') {\r\n      if (window.innerWidth < mobileLayoutBreakpoint) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  hideCaption(slide) {\r\n    if (slide.dynamicCaption && !slide.dynamicCaption.hidden) {\r\n      const captionElement = slide.dynamicCaption.element;\r\n\r\n      if (!captionElement) {\r\n        return;\r\n      }\r\n\r\n      slide.dynamicCaption.hidden = true;\r\n      captionElement.classList.add('pswp__dynamic-caption--faded');\r\n\r\n      // Disable caption visibility with the delay, so it's not interactable \r\n      if (slide.captionFadeTimeout) {\r\n        clearTimeout(slide.captionFadeTimeout);\r\n      }\r\n      slide.captionFadeTimeout = setTimeout(() => {\r\n        captionElement.style.visibility = 'hidden';\r\n        delete slide.captionFadeTimeout;\r\n      }, 400);\r\n    }\r\n  }\r\n\r\n  setCaptionYOffset(el, y) {\r\n    el.style.transform = `translateY(${y}px)`;\r\n  }\r\n\r\n  showCaption(slide) {\r\n    if (slide.dynamicCaption && slide.dynamicCaption.hidden) {\r\n      const captionElement = slide.dynamicCaption.element;\r\n\r\n      if (!captionElement) {\r\n        return;\r\n      }\r\n\r\n      slide.dynamicCaption.hidden = false;\r\n      captionElement.style.visibility = 'visible';\r\n      \r\n      clearTimeout(slide.captionFadeTimeout);\r\n      slide.captionFadeTimeout = setTimeout(() => {\r\n        captionElement.classList.remove('pswp__dynamic-caption--faded');\r\n        delete slide.captionFadeTimeout;;\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  setCaptionPosition(captionEl, x, y) {\r\n    const isOnHorizontalEdge = (x <= this.options.horizontalEdgeThreshold);\r\n    captionEl.classList[\r\n      isOnHorizontalEdge ? 'add' : 'remove'\r\n    ]('pswp__dynamic-caption--on-hor-edge');\r\n\r\n    captionEl.style.left = x + 'px';\r\n    captionEl.style.top = y + 'px';\r\n  }\r\n\r\n  setCaptionWidth(captionEl, width) {\r\n    if (!width) {\r\n      captionEl.style.removeProperty('width');\r\n    } else {\r\n      captionEl.style.width = width + 'px';\r\n    }\r\n  }\r\n\r\n  setCaptionType(captionEl, type) {\r\n    const prevType = captionEl.dataset.pswpCaptionType;\r\n    if (type !== prevType) {\r\n      captionEl.classList.add('pswp__dynamic-caption--' + type);\r\n      captionEl.classList.remove('pswp__dynamic-caption--' + prevType);\r\n      captionEl.dataset.pswpCaptionType = type;\r\n    }\r\n  }\r\n\r\n  updateCaptionPosition(slide) {\r\n    if (!slide.dynamicCaption || !slide.dynamicCaption.type || !slide.dynamicCaption.element) {\r\n      return;\r\n    }\r\n\r\n    if (slide.dynamicCaption.type === 'mobile') {\r\n      this.setCaptionType(\r\n        slide.dynamicCaption.element, \r\n        slide.dynamicCaption.type\r\n      );\r\n      \r\n      slide.dynamicCaption.element.style.removeProperty('left');\r\n      slide.dynamicCaption.element.style.removeProperty('top');\r\n      this.setCaptionWidth(slide.dynamicCaption.element, false);\r\n      return;\r\n    }\r\n\r\n    const zoomLevel = slide.zoomLevels.initial;\r\n    const imageWidth = Math.ceil(slide.width * zoomLevel);\r\n    const imageHeight = Math.ceil(slide.height * zoomLevel);\r\n    \r\n    this.setCaptionType(slide.dynamicCaption.element, slide.dynamicCaption.type);\r\n    if (slide.dynamicCaption.type === 'aside') {\r\n      this.setCaptionPosition(\r\n        slide.dynamicCaption.element,\r\n        slide.bounds.center.x + imageWidth,\r\n        slide.bounds.center.y\r\n      );\r\n      this.setCaptionWidth(slide.dynamicCaption.element, false);\r\n    } else if (slide.dynamicCaption.type === 'below') {\r\n      this.setCaptionPosition(\r\n        slide.dynamicCaption.element,\r\n        slide.bounds.center.x,\r\n        slide.bounds.center.y + imageHeight\r\n      );\r\n      this.setCaptionWidth(slide.dynamicCaption.element, imageWidth);\r\n    }\r\n  }\r\n\r\n  onCalcSlideSize(e) {\r\n    const { slide } = e;\r\n    let captionSize;\r\n    let useMobileVersion;\r\n\r\n    if (!slide.dynamicCaption) {\r\n      slide.dynamicCaption = {\r\n        element: undefined,\r\n        type: false,\r\n        hidden: false\r\n      };\r\n\r\n      const captionHTML = this.getCaptionHTML(slide);\r\n\r\n      if (!captionHTML) {\r\n        return;\r\n      }\r\n\r\n      slide.dynamicCaption.element = document.createElement('div');\r\n      slide.dynamicCaption.element.className = 'pswp__dynamic-caption pswp__hide-on-close';\r\n      slide.dynamicCaption.element.innerHTML = captionHTML;\r\n\r\n      this.pswp.dispatch('dynamicCaptionUpdateHTML', { \r\n        captionElement: slide.dynamicCaption.element,\r\n        slide\r\n      });\r\n\r\n      slide.holderElement.appendChild(slide.dynamicCaption.element);\r\n    }\r\n\r\n    if (!slide.dynamicCaption.element) {\r\n      return;\r\n    }\r\n\r\n    this.storeOriginalPanAreaSize(slide);\r\n\r\n    slide.bounds.update(slide.zoomLevels.initial);\r\n    \r\n    if (this.useMobileLayout()) {\r\n      slide.dynamicCaption.type = 'mobile';\r\n      useMobileVersion = true;\r\n    } else {\r\n      if (this.options.type === 'auto') {\r\n        if (slide.bounds.center.x > slide.bounds.center.y) {\r\n          slide.dynamicCaption.type = 'aside';\r\n        } else {\r\n          slide.dynamicCaption.type = 'below';\r\n        }\r\n      } else {\r\n        slide.dynamicCaption.type = this.options.type;\r\n      }\r\n    } \r\n\r\n    const imageWidth = Math.ceil(slide.width * slide.zoomLevels.initial);\r\n    const imageHeight = Math.ceil(slide.height * slide.zoomLevels.initial);\r\n\r\n    this.setCaptionType(\r\n      slide.dynamicCaption.element, \r\n      slide.dynamicCaption.type\r\n    );\r\n\r\n    if (slide.dynamicCaption.type === 'aside') {\r\n      this.setCaptionWidth(slide.dynamicCaption.element, false);\r\n      captionSize = this.measureCaptionSize(slide.dynamicCaption.element, e.slide);\r\n\r\n      const captionWidth = captionSize.x;      \r\n\r\n      const horizontalEnding = imageWidth + slide.bounds.center.x;\r\n      const horizontalLeftover = (slide.panAreaSize.x - horizontalEnding);\r\n\r\n      if (horizontalLeftover <= captionWidth) {\r\n        slide.panAreaSize.x -= captionWidth;\r\n        this.recalculateZoomLevelAndBounds(slide);\r\n      } else {\r\n        // do nothing, caption will fit aside without any adjustments\r\n      }\r\n    } else if (slide.dynamicCaption.type === 'below' || useMobileVersion) {\r\n      this.setCaptionWidth(\r\n        slide.dynamicCaption.element, \r\n        useMobileVersion ? this.pswp.viewportSize.x : imageWidth\r\n      );\r\n\r\n      captionSize = this.measureCaptionSize(slide.dynamicCaption.element, e.slide);\r\n      const captionHeight = captionSize.y;\r\n\r\n      if (this.options.verticallyCenterImage) {\r\n        slide.panAreaSize.y -= captionHeight;\r\n        this.recalculateZoomLevelAndBounds(slide);\r\n      } else {\r\n        // Lift up the image only by caption height\r\n\r\n        // vertical ending of the image\r\n        const verticalEnding = imageHeight + slide.bounds.center.y;\r\n\r\n        // height between bottom of the screen and ending of the image\r\n        // (before any adjustments applied) \r\n        const verticalLeftover = slide.panAreaSize.y - verticalEnding;\r\n        const initialPanAreaHeight = slide.panAreaSize.y;\r\n\r\n        if (verticalLeftover <= captionHeight) {\r\n          // lift up the image to give more space for caption\r\n          slide.panAreaSize.y -= Math.min((captionHeight - verticalLeftover) * 2, captionHeight);\r\n\r\n          // we reduce viewport size, thus we need to update zoom level and pan bounds\r\n          this.recalculateZoomLevelAndBounds(slide);\r\n\r\n          const maxPositionX = slide.panAreaSize.x * this.options.mobileCaptionOverlapRatio / 2;\r\n\r\n          // Do not reduce viewport height if too few space available\r\n          if (useMobileVersion \r\n              && slide.bounds.center.x > maxPositionX) {\r\n            // Restore the default position\r\n            slide.panAreaSize.y = initialPanAreaHeight;\r\n            this.recalculateZoomLevelAndBounds(slide);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // mobile\r\n    }\r\n\r\n    this.storeAdjustedPanAreaSize(slide);\r\n    this.updateCaptionPosition(slide);\r\n  }\r\n\r\n  measureCaptionSize(captionEl, slide) {\r\n    const rect = captionEl.getBoundingClientRect();\r\n    const event = this.pswp.dispatch('dynamicCaptionMeasureSize', {\r\n      captionEl,\r\n      slide,\r\n      captionSize: {\r\n        x: rect.width,\r\n        y: rect.height\r\n      }\r\n    });\r\n    return event.captionSize;\r\n  }\r\n\r\n  recalculateZoomLevelAndBounds(slide) {\r\n    slide.zoomLevels.update(slide.width, slide.height, slide.panAreaSize);\r\n    slide.bounds.update(slide.zoomLevels.initial);\r\n  }\r\n\r\n  storeAdjustedPanAreaSize(slide) {\r\n    if (slide.dynamicCaption) {\r\n      if (!slide.dynamicCaption.adjustedPanAreaSize) {\r\n        slide.dynamicCaption.adjustedPanAreaSize = {};\r\n      }\r\n      slide.dynamicCaption.adjustedPanAreaSize.x = slide.panAreaSize.x;\r\n      slide.dynamicCaption.adjustedPanAreaSize.y = slide.panAreaSize.y;\r\n    }\r\n  }\r\n\r\n  storeOriginalPanAreaSize(slide) {\r\n    if (slide.dynamicCaption) {\r\n      if (!slide.dynamicCaption.originalPanAreaSize) {\r\n        slide.dynamicCaption.originalPanAreaSize = {};\r\n      }\r\n      slide.dynamicCaption.originalPanAreaSize.x = slide.panAreaSize.x;\r\n      slide.dynamicCaption.originalPanAreaSize.y = slide.panAreaSize.y;\r\n    }\r\n  }\r\n\r\n  getCaptionHTML(slide) {\r\n    if (typeof this.options.captionContent === 'function') {\r\n      return this.options.captionContent.call(this, slide);\r\n    }\r\n\r\n    const currSlideElement = slide.data.element;\r\n    let captionHTML = '';\r\n    if (currSlideElement) {\r\n      const hiddenCaption = currSlideElement.querySelector(this.options.captionContent);\r\n      if (hiddenCaption) {\r\n        // get caption from element with class pswp-caption-content\r\n        captionHTML = hiddenCaption.innerHTML;\r\n      } else {\r\n        const img = currSlideElement.querySelector('img');\r\n        if (img) {\r\n          // get caption from alt attribute\r\n          captionHTML = img.getAttribute('alt');\r\n        }\r\n      }\r\n    }\r\n    return captionHTML;\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeDynamicCaption;\r\n","/**\n * SSR Window 4.0.2\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2021, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: December 13, 2021\n */\n/* eslint-disable no-param-reassign */\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object' && 'constructor' in obj && obj.constructor === Object;\n}\nfunction extend(target, src) {\n  if (target === void 0) {\n    target = {};\n  }\n  if (src === void 0) {\n    src = {};\n  }\n  Object.keys(src).forEach(key => {\n    if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n      extend(target[key], src[key]);\n    }\n  });\n}\nconst ssrDocument = {\n  body: {},\n  addEventListener() {},\n  removeEventListener() {},\n  activeElement: {\n    blur() {},\n    nodeName: ''\n  },\n  querySelector() {\n    return null;\n  },\n  querySelectorAll() {\n    return [];\n  },\n  getElementById() {\n    return null;\n  },\n  createEvent() {\n    return {\n      initEvent() {}\n    };\n  },\n  createElement() {\n    return {\n      children: [],\n      childNodes: [],\n      style: {},\n      setAttribute() {},\n      getElementsByTagName() {\n        return [];\n      }\n    };\n  },\n  createElementNS() {\n    return {};\n  },\n  importNode() {\n    return null;\n  },\n  location: {\n    hash: '',\n    host: '',\n    hostname: '',\n    href: '',\n    origin: '',\n    pathname: '',\n    protocol: '',\n    search: ''\n  }\n};\nfunction getDocument() {\n  const doc = typeof document !== 'undefined' ? document : {};\n  extend(doc, ssrDocument);\n  return doc;\n}\nconst ssrWindow = {\n  document: ssrDocument,\n  navigator: {\n    userAgent: ''\n  },\n  location: {\n    hash: '',\n    host: '',\n    hostname: '',\n    href: '',\n    origin: '',\n    pathname: '',\n    protocol: '',\n    search: ''\n  },\n  history: {\n    replaceState() {},\n    pushState() {},\n    go() {},\n    back() {}\n  },\n  CustomEvent: function CustomEvent() {\n    return this;\n  },\n  addEventListener() {},\n  removeEventListener() {},\n  getComputedStyle() {\n    return {\n      getPropertyValue() {\n        return '';\n      }\n    };\n  },\n  Image() {},\n  Date() {},\n  screen: {},\n  setTimeout() {},\n  clearTimeout() {},\n  matchMedia() {\n    return {};\n  },\n  requestAnimationFrame(callback) {\n    if (typeof setTimeout === 'undefined') {\n      callback();\n      return null;\n    }\n    return setTimeout(callback, 0);\n  },\n  cancelAnimationFrame(id) {\n    if (typeof setTimeout === 'undefined') {\n      return;\n    }\n    clearTimeout(id);\n  }\n};\nfunction getWindow() {\n  const win = typeof window !== 'undefined' ? window : {};\n  extend(win, ssrWindow);\n  return win;\n}\n\nexport { getWindow as a, getDocument as g };\n","import { a as getWindow, g as getDocument } from './ssr-window.esm.mjs';\n\nfunction classesToTokens(classes) {\n  if (classes === void 0) {\n    classes = '';\n  }\n  return classes.trim().split(' ').filter(c => !!c.trim());\n}\n\nfunction deleteProps(obj) {\n  const object = obj;\n  Object.keys(object).forEach(key => {\n    try {\n      object[key] = null;\n    } catch (e) {\n      // no getter for object\n    }\n    try {\n      delete object[key];\n    } catch (e) {\n      // something got wrong\n    }\n  });\n}\nfunction nextTick(callback, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n  return setTimeout(callback, delay);\n}\nfunction now() {\n  return Date.now();\n}\nfunction getComputedStyle(el) {\n  const window = getWindow();\n  let style;\n  if (window.getComputedStyle) {\n    style = window.getComputedStyle(el, null);\n  }\n  if (!style && el.currentStyle) {\n    style = el.currentStyle;\n  }\n  if (!style) {\n    style = el.style;\n  }\n  return style;\n}\nfunction getTranslate(el, axis) {\n  if (axis === void 0) {\n    axis = 'x';\n  }\n  const window = getWindow();\n  let matrix;\n  let curTransform;\n  let transformMatrix;\n  const curStyle = getComputedStyle(el);\n  if (window.WebKitCSSMatrix) {\n    curTransform = curStyle.transform || curStyle.webkitTransform;\n    if (curTransform.split(',').length > 6) {\n      curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');\n    }\n    // Some old versions of Webkit choke when 'none' is passed; pass\n    // empty string instead in this case\n    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n  } else {\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n    matrix = transformMatrix.toString().split(',');\n  }\n  if (axis === 'x') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41;\n    // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);\n    // Normal Browsers\n    else curTransform = parseFloat(matrix[4]);\n  }\n  if (axis === 'y') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42;\n    // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);\n    // Normal Browsers\n    else curTransform = parseFloat(matrix[5]);\n  }\n  return curTransform || 0;\n}\nfunction isObject(o) {\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n}\nfunction isNode(node) {\n  // eslint-disable-next-line\n  if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {\n    return node instanceof HTMLElement;\n  }\n  return node && (node.nodeType === 1 || node.nodeType === 11);\n}\nfunction extend() {\n  const to = Object(arguments.length <= 0 ? undefined : arguments[0]);\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\n  for (let i = 1; i < arguments.length; i += 1) {\n    const nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\n      const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);\n      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n        const nextKey = keysArray[nextIndex];\n        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n        if (desc !== undefined && desc.enumerable) {\n          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            to[nextKey] = {};\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n  }\n  return to;\n}\nfunction setCSSProperty(el, varName, varValue) {\n  el.style.setProperty(varName, varValue);\n}\nfunction animateCSSModeScroll(_ref) {\n  let {\n    swiper,\n    targetPosition,\n    side\n  } = _ref;\n  const window = getWindow();\n  const startPosition = -swiper.translate;\n  let startTime = null;\n  let time;\n  const duration = swiper.params.speed;\n  swiper.wrapperEl.style.scrollSnapType = 'none';\n  window.cancelAnimationFrame(swiper.cssModeFrameID);\n  const dir = targetPosition > startPosition ? 'next' : 'prev';\n  const isOutOfBound = (current, target) => {\n    return dir === 'next' && current >= target || dir === 'prev' && current <= target;\n  };\n  const animate = () => {\n    time = new Date().getTime();\n    if (startTime === null) {\n      startTime = time;\n    }\n    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      currentPosition = targetPosition;\n    }\n    swiper.wrapperEl.scrollTo({\n      [side]: currentPosition\n    });\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      swiper.wrapperEl.style.overflow = 'hidden';\n      swiper.wrapperEl.style.scrollSnapType = '';\n      setTimeout(() => {\n        swiper.wrapperEl.style.overflow = '';\n        swiper.wrapperEl.scrollTo({\n          [side]: currentPosition\n        });\n      });\n      window.cancelAnimationFrame(swiper.cssModeFrameID);\n      return;\n    }\n    swiper.cssModeFrameID = window.requestAnimationFrame(animate);\n  };\n  animate();\n}\nfunction getSlideTransformEl(slideEl) {\n  return slideEl.querySelector('.swiper-slide-transform') || slideEl.shadowRoot && slideEl.shadowRoot.querySelector('.swiper-slide-transform') || slideEl;\n}\nfunction elementChildren(element, selector) {\n  if (selector === void 0) {\n    selector = '';\n  }\n  return [...element.children].filter(el => el.matches(selector));\n}\nfunction showWarning(text) {\n  try {\n    console.warn(text);\n    return;\n  } catch (err) {\n    // err\n  }\n}\nfunction createElement(tag, classes) {\n  if (classes === void 0) {\n    classes = [];\n  }\n  const el = document.createElement(tag);\n  el.classList.add(...(Array.isArray(classes) ? classes : classesToTokens(classes)));\n  return el;\n}\nfunction elementOffset(el) {\n  const window = getWindow();\n  const document = getDocument();\n  const box = el.getBoundingClientRect();\n  const body = document.body;\n  const clientTop = el.clientTop || body.clientTop || 0;\n  const clientLeft = el.clientLeft || body.clientLeft || 0;\n  const scrollTop = el === window ? window.scrollY : el.scrollTop;\n  const scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n  return {\n    top: box.top + scrollTop - clientTop,\n    left: box.left + scrollLeft - clientLeft\n  };\n}\nfunction elementPrevAll(el, selector) {\n  const prevEls = [];\n  while (el.previousElementSibling) {\n    const prev = el.previousElementSibling; // eslint-disable-line\n    if (selector) {\n      if (prev.matches(selector)) prevEls.push(prev);\n    } else prevEls.push(prev);\n    el = prev;\n  }\n  return prevEls;\n}\nfunction elementNextAll(el, selector) {\n  const nextEls = [];\n  while (el.nextElementSibling) {\n    const next = el.nextElementSibling; // eslint-disable-line\n    if (selector) {\n      if (next.matches(selector)) nextEls.push(next);\n    } else nextEls.push(next);\n    el = next;\n  }\n  return nextEls;\n}\nfunction elementStyle(el, prop) {\n  const window = getWindow();\n  return window.getComputedStyle(el, null).getPropertyValue(prop);\n}\nfunction elementIndex(el) {\n  let child = el;\n  let i;\n  if (child) {\n    i = 0;\n    // eslint-disable-next-line\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1) i += 1;\n    }\n    return i;\n  }\n  return undefined;\n}\nfunction elementParents(el, selector) {\n  const parents = []; // eslint-disable-line\n  let parent = el.parentElement; // eslint-disable-line\n  while (parent) {\n    if (selector) {\n      if (parent.matches(selector)) parents.push(parent);\n    } else {\n      parents.push(parent);\n    }\n    parent = parent.parentElement;\n  }\n  return parents;\n}\nfunction elementTransitionEnd(el, callback) {\n  function fireCallBack(e) {\n    if (e.target !== el) return;\n    callback.call(el, e);\n    el.removeEventListener('transitionend', fireCallBack);\n  }\n  if (callback) {\n    el.addEventListener('transitionend', fireCallBack);\n  }\n}\nfunction elementOuterSize(el, size, includeMargins) {\n  const window = getWindow();\n  if (includeMargins) {\n    return el[size === 'width' ? 'offsetWidth' : 'offsetHeight'] + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-right' : 'margin-top')) + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-left' : 'margin-bottom'));\n  }\n  return el.offsetWidth;\n}\nfunction makeElementsArray(el) {\n  return (Array.isArray(el) ? el : [el]).filter(e => !!e);\n}\n\nexport { elementParents as a, elementOffset as b, createElement as c, now as d, elementChildren as e, elementOuterSize as f, getSlideTransformEl as g, elementIndex as h, classesToTokens as i, getTranslate as j, elementTransitionEnd as k, isObject as l, makeElementsArray as m, nextTick as n, elementStyle as o, elementNextAll as p, elementPrevAll as q, animateCSSModeScroll as r, setCSSProperty as s, showWarning as t, extend as u, deleteProps as v };\n","import { a as getWindow, g as getDocument } from './ssr-window.esm.mjs';\nimport { a as elementParents, o as elementStyle, e as elementChildren, s as setCSSProperty, f as elementOuterSize, p as elementNextAll, q as elementPrevAll, j as getTranslate, r as animateCSSModeScroll, n as nextTick, t as showWarning, c as createElement, d as now, u as extend, h as elementIndex, v as deleteProps } from './utils.mjs';\n\nlet support;\nfunction calcSupport() {\n  const window = getWindow();\n  const document = getDocument();\n  return {\n    smoothScroll: document.documentElement && document.documentElement.style && 'scrollBehavior' in document.documentElement.style,\n    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch)\n  };\n}\nfunction getSupport() {\n  if (!support) {\n    support = calcSupport();\n  }\n  return support;\n}\n\nlet deviceCached;\nfunction calcDevice(_temp) {\n  let {\n    userAgent\n  } = _temp === void 0 ? {} : _temp;\n  const support = getSupport();\n  const window = getWindow();\n  const platform = window.navigator.platform;\n  const ua = userAgent || window.navigator.userAgent;\n  const device = {\n    ios: false,\n    android: false\n  };\n  const screenWidth = window.screen.width;\n  const screenHeight = window.screen.height;\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  const windows = platform === 'Win32';\n  let macos = platform === 'MacIntel';\n\n  // iPadOs 13 fix\n  const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];\n  if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    if (!ipad) ipad = [0, 1, '13_0_0'];\n    macos = false;\n  }\n\n  // Android\n  if (android && !windows) {\n    device.os = 'android';\n    device.android = true;\n  }\n  if (ipad || iphone || ipod) {\n    device.os = 'ios';\n    device.ios = true;\n  }\n\n  // Export object\n  return device;\n}\nfunction getDevice(overrides) {\n  if (overrides === void 0) {\n    overrides = {};\n  }\n  if (!deviceCached) {\n    deviceCached = calcDevice(overrides);\n  }\n  return deviceCached;\n}\n\nlet browser;\nfunction calcBrowser() {\n  const window = getWindow();\n  const device = getDevice();\n  let needPerspectiveFix = false;\n  function isSafari() {\n    const ua = window.navigator.userAgent.toLowerCase();\n    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\n  }\n  if (isSafari()) {\n    const ua = String(window.navigator.userAgent);\n    if (ua.includes('Version/')) {\n      const [major, minor] = ua.split('Version/')[1].split(' ')[0].split('.').map(num => Number(num));\n      needPerspectiveFix = major < 16 || major === 16 && minor < 2;\n    }\n  }\n  const isWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent);\n  const isSafariBrowser = isSafari();\n  const need3dFix = isSafariBrowser || isWebView && device.ios;\n  return {\n    isSafari: needPerspectiveFix || isSafariBrowser,\n    needPerspectiveFix,\n    need3dFix,\n    isWebView\n  };\n}\nfunction getBrowser() {\n  if (!browser) {\n    browser = calcBrowser();\n  }\n  return browser;\n}\n\nfunction Resize(_ref) {\n  let {\n    swiper,\n    on,\n    emit\n  } = _ref;\n  const window = getWindow();\n  let observer = null;\n  let animationFrame = null;\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('beforeResize');\n    emit('resize');\n  };\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    observer = new ResizeObserver(entries => {\n      animationFrame = window.requestAnimationFrame(() => {\n        const {\n          width,\n          height\n        } = swiper;\n        let newWidth = width;\n        let newHeight = height;\n        entries.forEach(_ref2 => {\n          let {\n            contentBoxSize,\n            contentRect,\n            target\n          } = _ref2;\n          if (target && target !== swiper.el) return;\n          newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n          newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n        });\n        if (newWidth !== width || newHeight !== height) {\n          resizeHandler();\n        }\n      });\n    });\n    observer.observe(swiper.el);\n  };\n  const removeObserver = () => {\n    if (animationFrame) {\n      window.cancelAnimationFrame(animationFrame);\n    }\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('orientationchange');\n  };\n  on('init', () => {\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n      createObserver();\n      return;\n    }\n    window.addEventListener('resize', resizeHandler);\n    window.addEventListener('orientationchange', orientationChangeHandler);\n  });\n  on('destroy', () => {\n    removeObserver();\n    window.removeEventListener('resize', resizeHandler);\n    window.removeEventListener('orientationchange', orientationChangeHandler);\n  });\n}\n\nfunction Observer(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const observers = [];\n  const window = getWindow();\n  const attach = function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\n    const observer = new ObserverFunc(mutations => {\n      // The observerUpdate event should only be triggered\n      // once despite the number of mutations.  Additional\n      // triggers are redundant and are very costly\n      if (swiper.__preventObserver__) return;\n      if (mutations.length === 1) {\n        emit('observerUpdate', mutations[0]);\n        return;\n      }\n      const observerUpdate = function observerUpdate() {\n        emit('observerUpdate', mutations[0]);\n      };\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(observerUpdate);\n      } else {\n        window.setTimeout(observerUpdate, 0);\n      }\n    });\n    observer.observe(target, {\n      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n      childList: typeof options.childList === 'undefined' ? true : options.childList,\n      characterData: typeof options.characterData === 'undefined' ? true : options.characterData\n    });\n    observers.push(observer);\n  };\n  const init = () => {\n    if (!swiper.params.observer) return;\n    if (swiper.params.observeParents) {\n      const containerParents = elementParents(swiper.hostEl);\n      for (let i = 0; i < containerParents.length; i += 1) {\n        attach(containerParents[i]);\n      }\n    }\n    // Observe container\n    attach(swiper.hostEl, {\n      childList: swiper.params.observeSlideChildren\n    });\n\n    // Observe wrapper\n    attach(swiper.wrapperEl, {\n      attributes: false\n    });\n  };\n  const destroy = () => {\n    observers.forEach(observer => {\n      observer.disconnect();\n    });\n    observers.splice(0, observers.length);\n  };\n  extendParams({\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false\n  });\n  on('init', init);\n  on('destroy', destroy);\n}\n\n/* eslint-disable no-underscore-dangle */\n\nvar eventsEmitter = {\n  on(events, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n    events.split(' ').forEach(event => {\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  },\n  once(events, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n    function onceHandler() {\n      self.off(events, onceHandler);\n      if (onceHandler.__emitterProxy) {\n        delete onceHandler.__emitterProxy;\n      }\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      handler.apply(self, args);\n    }\n    onceHandler.__emitterProxy = handler;\n    return self.on(events, onceHandler, priority);\n  },\n  onAny(handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\n      self.eventsAnyListeners[method](handler);\n    }\n    return self;\n  },\n  offAny(handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsAnyListeners) return self;\n    const index = self.eventsAnyListeners.indexOf(handler);\n    if (index >= 0) {\n      self.eventsAnyListeners.splice(index, 1);\n    }\n    return self;\n  },\n  off(events, handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsListeners) return self;\n    events.split(' ').forEach(event => {\n      if (typeof handler === 'undefined') {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach((eventHandler, index) => {\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n            self.eventsListeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n    return self;\n  },\n  emit() {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsListeners) return self;\n    let events;\n    let data;\n    let context;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n      events = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n    data.unshift(context);\n    const eventsArray = Array.isArray(events) ? events : events.split(' ');\n    eventsArray.forEach(event => {\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n        self.eventsAnyListeners.forEach(eventHandler => {\n          eventHandler.apply(context, [event, ...data]);\n        });\n      }\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach(eventHandler => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n};\n\nfunction updateSize() {\n  const swiper = this;\n  let width;\n  let height;\n  const el = swiper.el;\n  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {\n    width = swiper.params.width;\n  } else {\n    width = el.clientWidth;\n  }\n  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {\n    height = swiper.params.height;\n  } else {\n    height = el.clientHeight;\n  }\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n    return;\n  }\n\n  // Subtract paddings\n  width = width - parseInt(elementStyle(el, 'padding-left') || 0, 10) - parseInt(elementStyle(el, 'padding-right') || 0, 10);\n  height = height - parseInt(elementStyle(el, 'padding-top') || 0, 10) - parseInt(elementStyle(el, 'padding-bottom') || 0, 10);\n  if (Number.isNaN(width)) width = 0;\n  if (Number.isNaN(height)) height = 0;\n  Object.assign(swiper, {\n    width,\n    height,\n    size: swiper.isHorizontal() ? width : height\n  });\n}\n\nfunction updateSlides() {\n  const swiper = this;\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(swiper.getDirectionLabel(label)) || 0);\n  }\n  const params = swiper.params;\n  const {\n    wrapperEl,\n    slidesEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = elementChildren(slidesEl, `.${swiper.params.slideClass}, swiper-slide`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n  let offsetAfter = params.slidesOffsetAfter;\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  } else if (typeof spaceBetween === 'string') {\n    spaceBetween = parseFloat(spaceBetween);\n  }\n  swiper.virtualSize = -spaceBetween;\n\n  // reset margins\n  slides.forEach(slideEl => {\n    if (rtl) {\n      slideEl.style.marginLeft = '';\n    } else {\n      slideEl.style.marginRight = '';\n    }\n    slideEl.style.marginBottom = '';\n    slideEl.style.marginTop = '';\n  });\n\n  // reset cssMode offsets\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(wrapperEl, '--swiper-centered-offset-before', '');\n    setCSSProperty(wrapperEl, '--swiper-centered-offset-after', '');\n  }\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n  if (gridEnabled) {\n    swiper.grid.initSlides(slides);\n  } else if (swiper.grid) {\n    swiper.grid.unsetSlides();\n  }\n\n  // Calc slides\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\n    return typeof params.breakpoints[key].slidesPerView !== 'undefined';\n  }).length > 0;\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    let slide;\n    if (slides[i]) slide = slides[i];\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slides);\n    }\n    if (slides[i] && elementStyle(slide, 'display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      if (shouldResetSlideSize) {\n        slides[i].style[swiper.getDirectionLabel('width')] = ``;\n      }\n      const slideStyles = getComputedStyle(slide);\n      const currentTransform = slide.style.transform;\n      const currentWebKitTransform = slide.style.webkitTransform;\n      if (currentTransform) {\n        slide.style.transform = 'none';\n      }\n      if (currentWebKitTransform) {\n        slide.style.webkitTransform = 'none';\n      }\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? elementOuterSize(slide, 'width', true) : elementOuterSize(slide, 'height', true);\n      } else {\n        // eslint-disable-next-line\n        const width = getDirectionPropertyValue(slideStyles, 'width');\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide;\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n      if (currentTransform) {\n        slide.style.transform = currentTransform;\n      }\n      if (currentWebKitTransform) {\n        slide.style.webkitTransform = currentWebKitTransform;\n      }\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n      if (slides[i]) {\n        slides[i].style[swiper.getDirectionLabel('width')] = `${slideSize}px`;\n      }\n    }\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n    slidesSizesGrid.push(slideSize);\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    wrapperEl.style.width = `${swiper.virtualSize + spaceBetween}px`;\n  }\n  if (params.setWrapperSize) {\n    wrapperEl.style[swiper.getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n  }\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid);\n  }\n\n  // Remove last grid elements depending on width\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n    snapGrid = newSlidesGrid;\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n  if (isVirtual && params.loop) {\n    const size = slidesSizesGrid[0] + spaceBetween;\n    if (params.slidesPerGroup > 1) {\n      const groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup);\n      const groupSize = size * params.slidesPerGroup;\n      for (let i = 0; i < groups; i += 1) {\n        snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);\n      }\n    }\n    for (let i = 0; i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i += 1) {\n      if (params.slidesPerGroup === 1) {\n        snapGrid.push(snapGrid[snapGrid.length - 1] + size);\n      }\n      slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);\n      swiper.virtualSize += size;\n    }\n  }\n  if (snapGrid.length === 0) snapGrid = [0];\n  if (spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : swiper.getDirectionLabel('marginRight');\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode || params.loop) return true;\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n      return true;\n    }).forEach(slideEl => {\n      slideEl.style[key] = `${spaceBetween}px`;\n    });\n  }\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (spaceBetween || 0);\n    });\n    allSlidesSize -= spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap <= 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (spaceBetween || 0);\n    });\n    allSlidesSize -= spaceBetween;\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n    setCSSProperty(wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n  }\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n  swiper.emit('slidesUpdated');\n  if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {\n    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n    const hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);\n    if (slidesLength <= params.maxBackfaceHiddenSlides) {\n      if (!hasClassBackfaceClassAdded) swiper.el.classList.add(backFaceHiddenClass);\n    } else if (hasClassBackfaceClassAdded) {\n      swiper.el.classList.remove(backFaceHiddenClass);\n    }\n  }\n}\n\nfunction updateAutoHeight(speed) {\n  const swiper = this;\n  const activeSlides = [];\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  let newHeight = 0;\n  let i;\n  if (typeof speed === 'number') {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n  const getSlideByIndex = index => {\n    if (isVirtual) {\n      return swiper.slides[swiper.getSlideIndexByData(index)];\n    }\n    return swiper.slides[index];\n  };\n  // Find slides currently in view\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      (swiper.visibleSlides || []).forEach(slide => {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index = swiper.activeIndex + i;\n        if (index > swiper.slides.length && !isVirtual) break;\n        activeSlides.push(getSlideByIndex(index));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  }\n\n  // Find new height from highest slide in view\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== 'undefined') {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  }\n\n  // Update Height\n  if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = `${newHeight}px`;\n}\n\nfunction updateSlidesOffset() {\n  const swiper = this;\n  const slides = swiper.slides;\n  // eslint-disable-next-line\n  const minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;\n  for (let i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = (swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop) - minusOffset - swiper.cssOverflowAdjustment();\n  }\n}\n\nfunction updateSlidesProgress(translate) {\n  if (translate === void 0) {\n    translate = this && this.translate || 0;\n  }\n  const swiper = this;\n  const params = swiper.params;\n  const {\n    slides,\n    rtlTranslate: rtl,\n    snapGrid\n  } = swiper;\n  if (slides.length === 0) return;\n  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\n  let offsetCenter = -translate;\n  if (rtl) offsetCenter = translate;\n\n  // Visible Slides\n  slides.forEach(slideEl => {\n    slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass);\n  });\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n  let spaceBetween = params.spaceBetween;\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n  } else if (typeof spaceBetween === 'string') {\n    spaceBetween = parseFloat(spaceBetween);\n  }\n  for (let i = 0; i < slides.length; i += 1) {\n    const slide = slides[i];\n    let slideOffset = slide.swiperSlideOffset;\n    if (params.cssMode && params.centeredSlides) {\n      slideOffset -= slides[0].swiperSlideOffset;\n    }\n    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\n    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\n    const slideBefore = -(offsetCenter - slideOffset);\n    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n    const isFullyVisible = slideBefore >= 0 && slideBefore <= swiper.size - swiper.slidesSizesGrid[i];\n    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n    if (isVisible) {\n      swiper.visibleSlides.push(slide);\n      swiper.visibleSlidesIndexes.push(i);\n      slides[i].classList.add(params.slideVisibleClass);\n    }\n    if (isFullyVisible) {\n      slides[i].classList.add(params.slideFullyVisibleClass);\n    }\n    slide.progress = rtl ? -slideProgress : slideProgress;\n    slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n  }\n}\n\nfunction updateProgress(translate) {\n  const swiper = this;\n  if (typeof translate === 'undefined') {\n    const multiplier = swiper.rtlTranslate ? -1 : 1;\n    // eslint-disable-next-line\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let {\n    progress,\n    isBeginning,\n    isEnd,\n    progressLoop\n  } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\n    const isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1;\n    const isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;\n    isBeginning = isBeginningRounded || progress <= 0;\n    isEnd = isEndRounded || progress >= 1;\n    if (isBeginningRounded) progress = 0;\n    if (isEndRounded) progress = 1;\n  }\n  if (params.loop) {\n    const firstSlideIndex = swiper.getSlideIndexByData(0);\n    const lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);\n    const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];\n    const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];\n    const translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];\n    const translateAbs = Math.abs(translate);\n    if (translateAbs >= firstSlideTranslate) {\n      progressLoop = (translateAbs - firstSlideTranslate) / translateMax;\n    } else {\n      progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax;\n    }\n    if (progressLoop > 1) progressLoop -= 1;\n  }\n  Object.assign(swiper, {\n    progress,\n    progressLoop,\n    isBeginning,\n    isEnd\n  });\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n  if (isBeginning && !wasBeginning) {\n    swiper.emit('reachBeginning toEdge');\n  }\n  if (isEnd && !wasEnd) {\n    swiper.emit('reachEnd toEdge');\n  }\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit('fromEdge');\n  }\n  swiper.emit('progress', progress);\n}\n\nfunction updateSlidesClasses() {\n  const swiper = this;\n  const {\n    slides,\n    params,\n    slidesEl,\n    activeIndex\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n  const getFilteredSlide = selector => {\n    return elementChildren(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];\n  };\n  slides.forEach(slideEl => {\n    slideEl.classList.remove(params.slideActiveClass, params.slideNextClass, params.slidePrevClass);\n  });\n  let activeSlide;\n  let prevSlide;\n  let nextSlide;\n  if (isVirtual) {\n    if (params.loop) {\n      let slideIndex = activeIndex - swiper.virtual.slidesBefore;\n      if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;\n      if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;\n      activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${slideIndex}\"]`);\n    } else {\n      activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${activeIndex}\"]`);\n    }\n  } else {\n    if (gridEnabled) {\n      activeSlide = slides.filter(slideEl => slideEl.column === activeIndex)[0];\n      nextSlide = slides.filter(slideEl => slideEl.column === activeIndex + 1)[0];\n      prevSlide = slides.filter(slideEl => slideEl.column === activeIndex - 1)[0];\n    } else {\n      activeSlide = slides[activeIndex];\n    }\n  }\n  if (activeSlide) {\n    // Active classes\n    activeSlide.classList.add(params.slideActiveClass);\n    if (gridEnabled) {\n      if (nextSlide) {\n        nextSlide.classList.add(params.slideNextClass);\n      }\n      if (prevSlide) {\n        prevSlide.classList.add(params.slidePrevClass);\n      }\n    } else {\n      // Next Slide\n      nextSlide = elementNextAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\n      if (params.loop && !nextSlide) {\n        nextSlide = slides[0];\n      }\n      if (nextSlide) {\n        nextSlide.classList.add(params.slideNextClass);\n      }\n\n      // Prev Slide\n      prevSlide = elementPrevAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\n      if (params.loop && !prevSlide === 0) {\n        prevSlide = slides[slides.length - 1];\n      }\n      if (prevSlide) {\n        prevSlide.classList.add(params.slidePrevClass);\n      }\n    }\n  }\n  swiper.emitSlidesClasses();\n}\n\nconst processLazyPreloader = (swiper, imageEl) => {\n  if (!swiper || swiper.destroyed || !swiper.params) return;\n  const slideSelector = () => swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\n  const slideEl = imageEl.closest(slideSelector());\n  if (slideEl) {\n    let lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n    if (!lazyEl && swiper.isElement) {\n      if (slideEl.shadowRoot) {\n        lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n      } else {\n        // init later\n        requestAnimationFrame(() => {\n          if (slideEl.shadowRoot) {\n            lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n            if (lazyEl) lazyEl.remove();\n          }\n        });\n      }\n    }\n    if (lazyEl) lazyEl.remove();\n  }\n};\nconst unlazy = (swiper, index) => {\n  if (!swiper.slides[index]) return;\n  const imageEl = swiper.slides[index].querySelector('[loading=\"lazy\"]');\n  if (imageEl) imageEl.removeAttribute('loading');\n};\nconst preload = swiper => {\n  if (!swiper || swiper.destroyed || !swiper.params) return;\n  let amount = swiper.params.lazyPreloadPrevNext;\n  const len = swiper.slides.length;\n  if (!len || !amount || amount < 0) return;\n  amount = Math.min(amount, len);\n  const slidesPerView = swiper.params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);\n  const activeIndex = swiper.activeIndex;\n  if (swiper.params.grid && swiper.params.grid.rows > 1) {\n    const activeColumn = activeIndex;\n    const preloadColumns = [activeColumn - amount];\n    preloadColumns.push(...Array.from({\n      length: amount\n    }).map((_, i) => {\n      return activeColumn + slidesPerView + i;\n    }));\n    swiper.slides.forEach((slideEl, i) => {\n      if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);\n    });\n    return;\n  }\n  const slideIndexLastInView = activeIndex + slidesPerView - 1;\n  if (swiper.params.rewind || swiper.params.loop) {\n    for (let i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1) {\n      const realIndex = (i % len + len) % len;\n      if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);\n    }\n  } else {\n    for (let i = Math.max(activeIndex - amount, 0); i <= Math.min(slideIndexLastInView + amount, len - 1); i += 1) {\n      if (i !== activeIndex && (i > slideIndexLastInView || i < activeIndex)) {\n        unlazy(swiper, i);\n      }\n    }\n  }\n};\n\nfunction getActiveIndexByTranslate(swiper) {\n  const {\n    slidesGrid,\n    params\n  } = swiper;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  let activeIndex;\n  for (let i = 0; i < slidesGrid.length; i += 1) {\n    if (typeof slidesGrid[i + 1] !== 'undefined') {\n      if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n        activeIndex = i;\n      } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n        activeIndex = i + 1;\n      }\n    } else if (translate >= slidesGrid[i]) {\n      activeIndex = i;\n    }\n  }\n  // Normalize slideIndex\n  if (params.normalizeSlideIndex) {\n    if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\n  }\n  return activeIndex;\n}\nfunction updateActiveIndex(newActiveIndex) {\n  const swiper = this;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  const {\n    snapGrid,\n    params,\n    activeIndex: previousIndex,\n    realIndex: previousRealIndex,\n    snapIndex: previousSnapIndex\n  } = swiper;\n  let activeIndex = newActiveIndex;\n  let snapIndex;\n  const getVirtualRealIndex = aIndex => {\n    let realIndex = aIndex - swiper.virtual.slidesBefore;\n    if (realIndex < 0) {\n      realIndex = swiper.virtual.slides.length + realIndex;\n    }\n    if (realIndex >= swiper.virtual.slides.length) {\n      realIndex -= swiper.virtual.slides.length;\n    }\n    return realIndex;\n  };\n  if (typeof activeIndex === 'undefined') {\n    activeIndex = getActiveIndexByTranslate(swiper);\n  }\n  if (snapGrid.indexOf(translate) >= 0) {\n    snapIndex = snapGrid.indexOf(translate);\n  } else {\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n  if (activeIndex === previousIndex && !swiper.params.loop) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit('snapIndexChange');\n    }\n    return;\n  }\n  if (activeIndex === previousIndex && swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\n    swiper.realIndex = getVirtualRealIndex(activeIndex);\n    return;\n  }\n  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n\n  // Get real index\n  let realIndex;\n  if (swiper.virtual && params.virtual.enabled && params.loop) {\n    realIndex = getVirtualRealIndex(activeIndex);\n  } else if (gridEnabled) {\n    const firstSlideInColumn = swiper.slides.filter(slideEl => slideEl.column === activeIndex)[0];\n    let activeSlideIndex = parseInt(firstSlideInColumn.getAttribute('data-swiper-slide-index'), 10);\n    if (Number.isNaN(activeSlideIndex)) {\n      activeSlideIndex = Math.max(swiper.slides.indexOf(firstSlideInColumn), 0);\n    }\n    realIndex = Math.floor(activeSlideIndex / params.grid.rows);\n  } else if (swiper.slides[activeIndex]) {\n    const slideIndex = swiper.slides[activeIndex].getAttribute('data-swiper-slide-index');\n    if (slideIndex) {\n      realIndex = parseInt(slideIndex, 10);\n    } else {\n      realIndex = activeIndex;\n    }\n  } else {\n    realIndex = activeIndex;\n  }\n  Object.assign(swiper, {\n    previousSnapIndex,\n    snapIndex,\n    previousRealIndex,\n    realIndex,\n    previousIndex,\n    activeIndex\n  });\n  if (swiper.initialized) {\n    preload(swiper);\n  }\n  swiper.emit('activeIndexChange');\n  swiper.emit('snapIndexChange');\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    if (previousRealIndex !== realIndex) {\n      swiper.emit('realIndexChange');\n    }\n    swiper.emit('slideChange');\n  }\n}\n\nfunction updateClickedSlide(el, path) {\n  const swiper = this;\n  const params = swiper.params;\n  let slide = el.closest(`.${params.slideClass}, swiper-slide`);\n  if (!slide && swiper.isElement && path && path.length > 1 && path.includes(el)) {\n    [...path.slice(path.indexOf(el) + 1, path.length)].forEach(pathEl => {\n      if (!slide && pathEl.matches && pathEl.matches(`.${params.slideClass}, swiper-slide`)) {\n        slide = pathEl;\n      }\n    });\n  }\n  let slideFound = false;\n  let slideIndex;\n  if (slide) {\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide) {\n        slideFound = true;\n        slideIndex = i;\n        break;\n      }\n    }\n  }\n  if (slide && slideFound) {\n    swiper.clickedSlide = slide;\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt(slide.getAttribute('data-swiper-slide-index'), 10);\n    } else {\n      swiper.clickedIndex = slideIndex;\n    }\n  } else {\n    swiper.clickedSlide = undefined;\n    swiper.clickedIndex = undefined;\n    return;\n  }\n  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}\n\nvar update = {\n  updateSize,\n  updateSlides,\n  updateAutoHeight,\n  updateSlidesOffset,\n  updateSlidesProgress,\n  updateProgress,\n  updateSlidesClasses,\n  updateActiveIndex,\n  updateClickedSlide\n};\n\nfunction getSwiperTranslate(axis) {\n  if (axis === void 0) {\n    axis = this.isHorizontal() ? 'x' : 'y';\n  }\n  const swiper = this;\n  const {\n    params,\n    rtlTranslate: rtl,\n    translate,\n    wrapperEl\n  } = swiper;\n  if (params.virtualTranslate) {\n    return rtl ? -translate : translate;\n  }\n  if (params.cssMode) {\n    return translate;\n  }\n  let currentTranslate = getTranslate(wrapperEl, axis);\n  currentTranslate += swiper.cssOverflowAdjustment();\n  if (rtl) currentTranslate = -currentTranslate;\n  return currentTranslate || 0;\n}\n\nfunction setTranslate(translate, byController) {\n  const swiper = this;\n  const {\n    rtlTranslate: rtl,\n    params,\n    wrapperEl,\n    progress\n  } = swiper;\n  let x = 0;\n  let y = 0;\n  const z = 0;\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate : translate;\n  } else {\n    y = translate;\n  }\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y;\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    if (swiper.isHorizontal()) {\n      x -= swiper.cssOverflowAdjustment();\n    } else {\n      y -= swiper.cssOverflowAdjustment();\n    }\n    wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;\n  }\n\n  // Check if we need to update progress\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n  }\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate);\n  }\n  swiper.emit('setTranslate', swiper.translate, byController);\n}\n\nfunction minTranslate() {\n  return -this.snapGrid[0];\n}\n\nfunction maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}\n\nfunction translateTo(translate, speed, runCallbacks, translateBounds, internal) {\n  if (translate === void 0) {\n    translate = 0;\n  }\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (translateBounds === void 0) {\n    translateBounds = true;\n  }\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n  const minTranslate = swiper.minTranslate();\n  const maxTranslate = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate;\n\n  // Update progress\n  swiper.updateProgress(newTranslate);\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: -newTranslate,\n        behavior: 'smooth'\n      });\n    }\n    return true;\n  }\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionEnd');\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionStart');\n    }\n    if (!swiper.animating) {\n      swiper.animating = true;\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.wrapperEl.removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n          if (runCallbacks) {\n            swiper.emit('transitionEnd');\n          }\n        };\n      }\n      swiper.wrapperEl.addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n  return true;\n}\n\nvar translate = {\n  getTranslate: getSwiperTranslate,\n  setTranslate,\n  minTranslate,\n  maxTranslate,\n  translateTo\n};\n\nfunction setTransition(duration, byController) {\n  const swiper = this;\n  if (!swiper.params.cssMode) {\n    swiper.wrapperEl.style.transitionDuration = `${duration}ms`;\n    swiper.wrapperEl.style.transitionDelay = duration === 0 ? `0ms` : '';\n  }\n  swiper.emit('setTransition', duration, byController);\n}\n\nfunction transitionEmit(_ref) {\n  let {\n    swiper,\n    runCallbacks,\n    direction,\n    step\n  } = _ref;\n  const {\n    activeIndex,\n    previousIndex\n  } = swiper;\n  let dir = direction;\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\n  }\n  swiper.emit(`transition${step}`);\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit(`slideResetTransition${step}`);\n      return;\n    }\n    swiper.emit(`slideChangeTransition${step}`);\n    if (dir === 'next') {\n      swiper.emit(`slideNextTransition${step}`);\n    } else {\n      swiper.emit(`slidePrevTransition${step}`);\n    }\n  }\n}\n\nfunction transitionStart(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  if (params.cssMode) return;\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'Start'\n  });\n}\n\nfunction transitionEnd(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  swiper.animating = false;\n  if (params.cssMode) return;\n  swiper.setTransition(0);\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'End'\n  });\n}\n\nvar transition = {\n  setTransition,\n  transitionStart,\n  transitionEnd\n};\n\nfunction slideTo(index, speed, runCallbacks, internal, initial) {\n  if (index === void 0) {\n    index = 0;\n  }\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (typeof index === 'string') {\n    index = parseInt(index, 10);\n  }\n  const swiper = this;\n  let slideIndex = index;\n  if (slideIndex < 0) slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial || swiper.destroyed) {\n    return false;\n  }\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n  const translate = -snapGrid[snapIndex];\n  // Normalize slideIndex\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  }\n  // Directions locks\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && (rtl ? translate > swiper.translate && translate > swiper.minTranslate() : translate < swiper.translate && translate < swiper.minTranslate())) {\n      return false;\n    }\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex) {\n        return false;\n      }\n    }\n  }\n  if (slideIndex !== (previousIndex || 0) && runCallbacks) {\n    swiper.emit('beforeSlideChangeStart');\n  }\n\n  // Update progress\n  swiper.updateProgress(translate);\n  let direction;\n  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset';\n\n  // Update Index\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex);\n    // Update Height\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n    swiper.updateSlidesClasses();\n    if (params.effect !== 'slide') {\n      swiper.setTranslate(translate);\n    }\n    if (direction !== 'reset') {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n    return false;\n  }\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate : -translate;\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = 'none';\n        swiper._immediateVirtual = true;\n      }\n      if (isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0) {\n        swiper._cssModeVirtualInitialSet = true;\n        requestAnimationFrame(() => {\n          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n        });\n      } else {\n        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n      }\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = '';\n          swiper._immediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: t,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: t,\n        behavior: 'smooth'\n      });\n    }\n    return true;\n  }\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit('beforeTransitionStart', speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n        if (!swiper || swiper.destroyed) return;\n        if (e.target !== this) return;\n        swiper.wrapperEl.removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n    swiper.wrapperEl.addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n  }\n  return true;\n}\n\nfunction slideToLoop(index, speed, runCallbacks, internal) {\n  if (index === void 0) {\n    index = 0;\n  }\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (typeof index === 'string') {\n    const indexAsNumber = parseInt(index, 10);\n    index = indexAsNumber;\n  }\n  const swiper = this;\n  if (swiper.destroyed) return;\n  const gridEnabled = swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;\n  let newIndex = index;\n  if (swiper.params.loop) {\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      // eslint-disable-next-line\n      newIndex = newIndex + swiper.virtual.slidesBefore;\n    } else {\n      let targetSlideIndex;\n      if (gridEnabled) {\n        const slideIndex = newIndex * swiper.params.grid.rows;\n        targetSlideIndex = swiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === slideIndex)[0].column;\n      } else {\n        targetSlideIndex = swiper.getSlideIndexByData(newIndex);\n      }\n      const cols = gridEnabled ? Math.ceil(swiper.slides.length / swiper.params.grid.rows) : swiper.slides.length;\n      const {\n        centeredSlides\n      } = swiper.params;\n      let slidesPerView = swiper.params.slidesPerView;\n      if (slidesPerView === 'auto') {\n        slidesPerView = swiper.slidesPerViewDynamic();\n      } else {\n        slidesPerView = Math.ceil(parseFloat(swiper.params.slidesPerView, 10));\n        if (centeredSlides && slidesPerView % 2 === 0) {\n          slidesPerView = slidesPerView + 1;\n        }\n      }\n      let needLoopFix = cols - targetSlideIndex < slidesPerView;\n      if (centeredSlides) {\n        needLoopFix = needLoopFix || targetSlideIndex < Math.ceil(slidesPerView / 2);\n      }\n      if (needLoopFix) {\n        const direction = centeredSlides ? targetSlideIndex < swiper.activeIndex ? 'prev' : 'next' : targetSlideIndex - swiper.activeIndex - 1 < swiper.params.slidesPerView ? 'next' : 'prev';\n        swiper.loopFix({\n          direction,\n          slideTo: true,\n          activeSlideIndex: direction === 'next' ? targetSlideIndex + 1 : targetSlideIndex - cols + 1,\n          slideRealIndex: direction === 'next' ? swiper.realIndex : undefined\n        });\n      }\n      if (gridEnabled) {\n        const slideIndex = newIndex * swiper.params.grid.rows;\n        newIndex = swiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === slideIndex)[0].column;\n      } else {\n        newIndex = swiper.getSlideIndexByData(newIndex);\n      }\n    }\n  }\n  requestAnimationFrame(() => {\n    swiper.slideTo(newIndex, speed, runCallbacks, internal);\n  });\n  return swiper;\n}\n\n/* eslint no-unused-vars: \"off\" */\nfunction slideNext(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    enabled,\n    params,\n    animating\n  } = swiper;\n  if (!enabled || swiper.destroyed) return swiper;\n  let perGroup = params.slidesPerGroup;\n  if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n    perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);\n  }\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  if (params.loop) {\n    if (animating && !isVirtual && params.loopPreventsSliding) return false;\n    swiper.loopFix({\n      direction: 'next'\n    });\n    // eslint-disable-next-line\n    swiper._clientLeft = swiper.wrapperEl.clientLeft;\n    if (swiper.activeIndex === swiper.slides.length - 1 && params.cssMode) {\n      requestAnimationFrame(() => {\n        swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n      });\n      return true;\n    }\n  }\n  if (params.rewind && swiper.isEnd) {\n    return swiper.slideTo(0, speed, runCallbacks, internal);\n  }\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}\n\n/* eslint no-unused-vars: \"off\" */\nfunction slidePrev(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    rtlTranslate,\n    enabled,\n    animating\n  } = swiper;\n  if (!enabled || swiper.destroyed) return swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  if (params.loop) {\n    if (animating && !isVirtual && params.loopPreventsSliding) return false;\n    swiper.loopFix({\n      direction: 'prev'\n    });\n    // eslint-disable-next-line\n    swiper._clientLeft = swiper.wrapperEl.clientLeft;\n  }\n  const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n  function normalize(val) {\n    if (val < 0) return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n  const normalizedTranslate = normalize(translate);\n  const normalizedSnapGrid = snapGrid.map(val => normalize(val));\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n  if (typeof prevSnap === 'undefined' && params.cssMode) {\n    let prevSnapIndex;\n    snapGrid.forEach((snap, snapIndex) => {\n      if (normalizedTranslate >= snap) {\n        // prevSnap = snap;\n        prevSnapIndex = snapIndex;\n      }\n    });\n    if (typeof prevSnapIndex !== 'undefined') {\n      prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n    }\n  }\n  let prevIndex = 0;\n  if (typeof prevSnap !== 'undefined') {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n      prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;\n      prevIndex = Math.max(prevIndex, 0);\n    }\n  }\n  if (params.rewind && swiper.isBeginning) {\n    const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n  } else if (params.loop && swiper.activeIndex === 0 && params.cssMode) {\n    requestAnimationFrame(() => {\n      swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n    });\n    return true;\n  }\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}\n\n/* eslint no-unused-vars: \"off\" */\nfunction slideReset(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  if (swiper.destroyed) return;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}\n\n/* eslint no-unused-vars: \"off\" */\nfunction slideToClosest(speed, runCallbacks, internal, threshold) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (threshold === void 0) {\n    threshold = 0.5;\n  }\n  const swiper = this;\n  if (swiper.destroyed) return;\n  let index = swiper.activeIndex;\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n  const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  if (translate >= swiper.snapGrid[snapIndex]) {\n    // The current translate is on or after the current snap index, so the choice\n    // is between the current index and the one after it.\n    const currentSnap = swiper.snapGrid[snapIndex];\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\n    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n      index += swiper.params.slidesPerGroup;\n    }\n  } else {\n    // The current translate is before the current snap index, so the choice\n    // is between the current index and the one before it.\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\n    const currentSnap = swiper.snapGrid[snapIndex];\n    if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n      index -= swiper.params.slidesPerGroup;\n    }\n  }\n  index = Math.max(index, 0);\n  index = Math.min(index, swiper.slidesGrid.length - 1);\n  return swiper.slideTo(index, speed, runCallbacks, internal);\n}\n\nfunction slideToClickedSlide() {\n  const swiper = this;\n  if (swiper.destroyed) return;\n  const {\n    params,\n    slidesEl\n  } = swiper;\n  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  let slideToIndex = swiper.clickedIndex;\n  let realIndex;\n  const slideSelector = swiper.isElement ? `swiper-slide` : `.${params.slideClass}`;\n  if (params.loop) {\n    if (swiper.animating) return;\n    realIndex = parseInt(swiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);\n    if (params.centeredSlides) {\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n        swiper.loopFix();\n        slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\n        nextTick(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\n      nextTick(() => {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}\n\nvar slide = {\n  slideTo,\n  slideToLoop,\n  slideNext,\n  slidePrev,\n  slideReset,\n  slideToClosest,\n  slideToClickedSlide\n};\n\nfunction loopCreate(slideRealIndex) {\n  const swiper = this;\n  const {\n    params,\n    slidesEl\n  } = swiper;\n  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\n  const initSlides = () => {\n    const slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);\n    slides.forEach((el, index) => {\n      el.setAttribute('data-swiper-slide-index', index);\n    });\n  };\n  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n  const slidesPerGroup = params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);\n  const shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;\n  const shouldFillGrid = gridEnabled && swiper.slides.length % params.grid.rows !== 0;\n  const addBlankSlides = amountOfSlides => {\n    for (let i = 0; i < amountOfSlides; i += 1) {\n      const slideEl = swiper.isElement ? createElement('swiper-slide', [params.slideBlankClass]) : createElement('div', [params.slideClass, params.slideBlankClass]);\n      swiper.slidesEl.append(slideEl);\n    }\n  };\n  if (shouldFillGroup) {\n    if (params.loopAddBlankSlides) {\n      const slidesToAdd = slidesPerGroup - swiper.slides.length % slidesPerGroup;\n      addBlankSlides(slidesToAdd);\n      swiper.recalcSlides();\n      swiper.updateSlides();\n    } else {\n      showWarning('Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)');\n    }\n    initSlides();\n  } else if (shouldFillGrid) {\n    if (params.loopAddBlankSlides) {\n      const slidesToAdd = params.grid.rows - swiper.slides.length % params.grid.rows;\n      addBlankSlides(slidesToAdd);\n      swiper.recalcSlides();\n      swiper.updateSlides();\n    } else {\n      showWarning('Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)');\n    }\n    initSlides();\n  } else {\n    initSlides();\n  }\n  swiper.loopFix({\n    slideRealIndex,\n    direction: params.centeredSlides ? undefined : 'next'\n  });\n}\n\nfunction loopFix(_temp) {\n  let {\n    slideRealIndex,\n    slideTo = true,\n    direction,\n    setTranslate,\n    activeSlideIndex,\n    byController,\n    byMousewheel\n  } = _temp === void 0 ? {} : _temp;\n  const swiper = this;\n  if (!swiper.params.loop) return;\n  swiper.emit('beforeLoopFix');\n  const {\n    slides,\n    allowSlidePrev,\n    allowSlideNext,\n    slidesEl,\n    params\n  } = swiper;\n  const {\n    centeredSlides\n  } = params;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  if (swiper.virtual && params.virtual.enabled) {\n    if (slideTo) {\n      if (!params.centeredSlides && swiper.snapIndex === 0) {\n        swiper.slideTo(swiper.virtual.slides.length, 0, false, true);\n      } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {\n        swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);\n      } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {\n        swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);\n      }\n    }\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    swiper.emit('loopFix');\n    return;\n  }\n  let slidesPerView = params.slidesPerView;\n  if (slidesPerView === 'auto') {\n    slidesPerView = swiper.slidesPerViewDynamic();\n  } else {\n    slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));\n    if (centeredSlides && slidesPerView % 2 === 0) {\n      slidesPerView = slidesPerView + 1;\n    }\n  }\n  const slidesPerGroup = params.slidesPerGroupAuto ? slidesPerView : params.slidesPerGroup;\n  let loopedSlides = slidesPerGroup;\n  if (loopedSlides % slidesPerGroup !== 0) {\n    loopedSlides += slidesPerGroup - loopedSlides % slidesPerGroup;\n  }\n  loopedSlides += params.loopAdditionalSlides;\n  swiper.loopedSlides = loopedSlides;\n  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n  if (slides.length < slidesPerView + loopedSlides) {\n    showWarning('Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters');\n  } else if (gridEnabled && params.grid.fill === 'row') {\n    showWarning('Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`');\n  }\n  const prependSlidesIndexes = [];\n  const appendSlidesIndexes = [];\n  let activeIndex = swiper.activeIndex;\n  if (typeof activeSlideIndex === 'undefined') {\n    activeSlideIndex = swiper.getSlideIndex(slides.filter(el => el.classList.contains(params.slideActiveClass))[0]);\n  } else {\n    activeIndex = activeSlideIndex;\n  }\n  const isNext = direction === 'next' || !direction;\n  const isPrev = direction === 'prev' || !direction;\n  let slidesPrepended = 0;\n  let slidesAppended = 0;\n  const cols = gridEnabled ? Math.ceil(slides.length / params.grid.rows) : slides.length;\n  const activeColIndex = gridEnabled ? slides[activeSlideIndex].column : activeSlideIndex;\n  const activeColIndexWithShift = activeColIndex + (centeredSlides && typeof setTranslate === 'undefined' ? -slidesPerView / 2 + 0.5 : 0);\n  // prepend last slides before start\n  if (activeColIndexWithShift < loopedSlides) {\n    slidesPrepended = Math.max(loopedSlides - activeColIndexWithShift, slidesPerGroup);\n    for (let i = 0; i < loopedSlides - activeColIndexWithShift; i += 1) {\n      const index = i - Math.floor(i / cols) * cols;\n      if (gridEnabled) {\n        const colIndexToPrepend = cols - index - 1;\n        for (let i = slides.length - 1; i >= 0; i -= 1) {\n          if (slides[i].column === colIndexToPrepend) prependSlidesIndexes.push(i);\n        }\n        // slides.forEach((slide, slideIndex) => {\n        //   if (slide.column === colIndexToPrepend) prependSlidesIndexes.push(slideIndex);\n        // });\n      } else {\n        prependSlidesIndexes.push(cols - index - 1);\n      }\n    }\n  } else if (activeColIndexWithShift + slidesPerView > cols - loopedSlides) {\n    slidesAppended = Math.max(activeColIndexWithShift - (cols - loopedSlides * 2), slidesPerGroup);\n    for (let i = 0; i < slidesAppended; i += 1) {\n      const index = i - Math.floor(i / cols) * cols;\n      if (gridEnabled) {\n        slides.forEach((slide, slideIndex) => {\n          if (slide.column === index) appendSlidesIndexes.push(slideIndex);\n        });\n      } else {\n        appendSlidesIndexes.push(index);\n      }\n    }\n  }\n  swiper.__preventObserver__ = true;\n  requestAnimationFrame(() => {\n    swiper.__preventObserver__ = false;\n  });\n  if (isPrev) {\n    prependSlidesIndexes.forEach(index => {\n      slides[index].swiperLoopMoveDOM = true;\n      slidesEl.prepend(slides[index]);\n      slides[index].swiperLoopMoveDOM = false;\n    });\n  }\n  if (isNext) {\n    appendSlidesIndexes.forEach(index => {\n      slides[index].swiperLoopMoveDOM = true;\n      slidesEl.append(slides[index]);\n      slides[index].swiperLoopMoveDOM = false;\n    });\n  }\n  swiper.recalcSlides();\n  if (params.slidesPerView === 'auto') {\n    swiper.updateSlides();\n  } else if (gridEnabled && (prependSlidesIndexes.length > 0 && isPrev || appendSlidesIndexes.length > 0 && isNext)) {\n    swiper.slides.forEach((slide, slideIndex) => {\n      swiper.grid.updateSlide(slideIndex, slide, swiper.slides);\n    });\n  }\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n  if (slideTo) {\n    if (prependSlidesIndexes.length > 0 && isPrev) {\n      if (typeof slideRealIndex === 'undefined') {\n        const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n        const newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];\n        const diff = newSlideTranslate - currentSlideTranslate;\n        if (byMousewheel) {\n          swiper.setTranslate(swiper.translate - diff);\n        } else {\n          swiper.slideTo(activeIndex + Math.ceil(slidesPrepended), 0, false, true);\n          if (setTranslate) {\n            swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\n            swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\n          }\n        }\n      } else {\n        if (setTranslate) {\n          const shift = gridEnabled ? prependSlidesIndexes.length / params.grid.rows : prependSlidesIndexes.length;\n          swiper.slideTo(swiper.activeIndex + shift, 0, false, true);\n          swiper.touchEventsData.currentTranslate = swiper.translate;\n        }\n      }\n    } else if (appendSlidesIndexes.length > 0 && isNext) {\n      if (typeof slideRealIndex === 'undefined') {\n        const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n        const newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];\n        const diff = newSlideTranslate - currentSlideTranslate;\n        if (byMousewheel) {\n          swiper.setTranslate(swiper.translate - diff);\n        } else {\n          swiper.slideTo(activeIndex - slidesAppended, 0, false, true);\n          if (setTranslate) {\n            swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\n            swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\n          }\n        }\n      } else {\n        const shift = gridEnabled ? appendSlidesIndexes.length / params.grid.rows : appendSlidesIndexes.length;\n        swiper.slideTo(swiper.activeIndex - shift, 0, false, true);\n      }\n    }\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  if (swiper.controller && swiper.controller.control && !byController) {\n    const loopParams = {\n      slideRealIndex,\n      direction,\n      setTranslate,\n      activeSlideIndex,\n      byController: true\n    };\n    if (Array.isArray(swiper.controller.control)) {\n      swiper.controller.control.forEach(c => {\n        if (!c.destroyed && c.params.loop) c.loopFix({\n          ...loopParams,\n          slideTo: c.params.slidesPerView === params.slidesPerView ? slideTo : false\n        });\n      });\n    } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {\n      swiper.controller.control.loopFix({\n        ...loopParams,\n        slideTo: swiper.controller.control.params.slidesPerView === params.slidesPerView ? slideTo : false\n      });\n    }\n  }\n  swiper.emit('loopFix');\n}\n\nfunction loopDestroy() {\n  const swiper = this;\n  const {\n    params,\n    slidesEl\n  } = swiper;\n  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\n  swiper.recalcSlides();\n  const newSlidesOrder = [];\n  swiper.slides.forEach(slideEl => {\n    const index = typeof slideEl.swiperSlideIndex === 'undefined' ? slideEl.getAttribute('data-swiper-slide-index') * 1 : slideEl.swiperSlideIndex;\n    newSlidesOrder[index] = slideEl;\n  });\n  swiper.slides.forEach(slideEl => {\n    slideEl.removeAttribute('data-swiper-slide-index');\n  });\n  newSlidesOrder.forEach(slideEl => {\n    slidesEl.append(slideEl);\n  });\n  swiper.recalcSlides();\n  swiper.slideTo(swiper.realIndex, 0);\n}\n\nvar loop = {\n  loopCreate,\n  loopFix,\n  loopDestroy\n};\n\nfunction setGrabCursor(moving) {\n  const swiper = this;\n  if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n  const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;\n  if (swiper.isElement) {\n    swiper.__preventObserver__ = true;\n  }\n  el.style.cursor = 'move';\n  el.style.cursor = moving ? 'grabbing' : 'grab';\n  if (swiper.isElement) {\n    requestAnimationFrame(() => {\n      swiper.__preventObserver__ = false;\n    });\n  }\n}\n\nfunction unsetGrabCursor() {\n  const swiper = this;\n  if (swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n    return;\n  }\n  if (swiper.isElement) {\n    swiper.__preventObserver__ = true;\n  }\n  swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';\n  if (swiper.isElement) {\n    requestAnimationFrame(() => {\n      swiper.__preventObserver__ = false;\n    });\n  }\n}\n\nvar grabCursor = {\n  setGrabCursor,\n  unsetGrabCursor\n};\n\n// Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\nfunction closestElement(selector, base) {\n  if (base === void 0) {\n    base = this;\n  }\n  function __closestFrom(el) {\n    if (!el || el === getDocument() || el === getWindow()) return null;\n    if (el.assignedSlot) el = el.assignedSlot;\n    const found = el.closest(selector);\n    if (!found && !el.getRootNode) {\n      return null;\n    }\n    return found || __closestFrom(el.getRootNode().host);\n  }\n  return __closestFrom(base);\n}\nfunction preventEdgeSwipe(swiper, event, startX) {\n  const window = getWindow();\n  const {\n    params\n  } = swiper;\n  const edgeSwipeDetection = params.edgeSwipeDetection;\n  const edgeSwipeThreshold = params.edgeSwipeThreshold;\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {\n    if (edgeSwipeDetection === 'prevent') {\n      event.preventDefault();\n      return true;\n    }\n    return false;\n  }\n  return true;\n}\nfunction onTouchStart(event) {\n  const swiper = this;\n  const document = getDocument();\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  const data = swiper.touchEventsData;\n  if (e.type === 'pointerdown') {\n    if (data.pointerId !== null && data.pointerId !== e.pointerId) {\n      return;\n    }\n    data.pointerId = e.pointerId;\n  } else if (e.type === 'touchstart' && e.targetTouches.length === 1) {\n    data.touchId = e.targetTouches[0].identifier;\n  }\n  if (e.type === 'touchstart') {\n    // don't proceed touch event\n    preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);\n    return;\n  }\n  const {\n    params,\n    touches,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  if (!params.simulateTouch && e.pointerType === 'mouse') return;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n  if (!swiper.animating && params.cssMode && params.loop) {\n    swiper.loopFix();\n  }\n  let targetEl = e.target;\n  if (params.touchEventsTarget === 'wrapper') {\n    if (!swiper.wrapperEl.contains(targetEl)) return;\n  }\n  if ('which' in e && e.which === 3) return;\n  if ('button' in e && e.button > 0) return;\n  if (data.isTouched && data.isMoved) return;\n\n  // change target el for shadow root component\n  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';\n  // eslint-disable-next-line\n  const eventPath = e.composedPath ? e.composedPath() : e.path;\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {\n    targetEl = eventPath[0];\n  }\n  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n  const isTargetShadow = !!(e.target && e.target.shadowRoot);\n\n  // use closestElement for shadow root element to get the actual closest for nested shadow root element\n  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {\n    swiper.allowClick = true;\n    return;\n  }\n  if (params.swipeHandler) {\n    if (!targetEl.closest(params.swipeHandler)) return;\n  }\n  touches.currentX = e.pageX;\n  touches.currentY = e.pageY;\n  const startX = touches.currentX;\n  const startY = touches.currentY;\n\n  // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n\n  if (!preventEdgeSwipe(swiper, e, startX)) {\n    return;\n  }\n  Object.assign(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: undefined,\n    startMoving: undefined\n  });\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = now();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = undefined;\n  if (params.threshold > 0) data.allowThresholdMove = false;\n  let preventDefault = true;\n  if (targetEl.matches(data.focusableElements)) {\n    preventDefault = false;\n    if (targetEl.nodeName === 'SELECT') {\n      data.isTouched = false;\n    }\n  }\n  if (document.activeElement && document.activeElement.matches(data.focusableElements) && document.activeElement !== targetEl) {\n    document.activeElement.blur();\n  }\n  const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n  if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable) {\n    e.preventDefault();\n  }\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n    swiper.freeMode.onTouchStart();\n  }\n  swiper.emit('touchStart', e);\n}\n\nfunction onTouchMove(event) {\n  const document = getDocument();\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  if (!params.simulateTouch && event.pointerType === 'mouse') return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  if (e.type === 'pointermove') {\n    if (data.touchId !== null) return; // return from pointer if we use touch\n    const id = e.pointerId;\n    if (id !== data.pointerId) return;\n  }\n  let targetTouch;\n  if (e.type === 'touchmove') {\n    targetTouch = [...e.changedTouches].filter(t => t.identifier === data.touchId)[0];\n    if (!targetTouch || targetTouch.identifier !== data.touchId) return;\n  } else {\n    targetTouch = e;\n  }\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit('touchMoveOpposite', e);\n    }\n    return;\n  }\n  const pageX = targetTouch.pageX;\n  const pageY = targetTouch.pageY;\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n  if (!swiper.allowTouchMove) {\n    if (!e.target.matches(data.focusableElements)) {\n      swiper.allowClick = false;\n    }\n    if (data.isTouched) {\n      Object.assign(touches, {\n        startX: pageX,\n        startY: pageY,\n        currentX: pageX,\n        currentY: pageY\n      });\n      data.touchStartTime = now();\n    }\n    return;\n  }\n  if (params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      // Vertical\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n      return;\n    }\n  }\n  if (document.activeElement) {\n    if (e.target === document.activeElement && e.target.matches(data.focusableElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchMove', e);\n  }\n  touches.previousX = touches.currentX;\n  touches.previousY = touches.currentY;\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n  const diffX = touches.currentX - touches.startX;\n  const diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\n  if (typeof data.isScrolling === 'undefined') {\n    let touchAngle;\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n      data.isScrolling = false;\n    } else {\n      // eslint-disable-next-line\n      if (diffX * diffX + diffY * diffY >= 25) {\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n      }\n    }\n  }\n  if (data.isScrolling) {\n    swiper.emit('touchMoveOpposite', e);\n  }\n  if (typeof data.startMoving === 'undefined') {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n  if (data.isScrolling) {\n    data.isTouched = false;\n    return;\n  }\n  if (!data.startMoving) {\n    return;\n  }\n  swiper.allowClick = false;\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n  let diff = swiper.isHorizontal() ? diffX : diffY;\n  let touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;\n  if (params.oneWayMovement) {\n    diff = Math.abs(diff) * (rtl ? 1 : -1);\n    touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);\n  }\n  touches.diff = diff;\n  diff *= params.touchRatio;\n  if (rtl) {\n    diff = -diff;\n    touchesDiff = -touchesDiff;\n  }\n  const prevTouchesDirection = swiper.touchesDirection;\n  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\n  swiper.touchesDirection = touchesDiff > 0 ? 'prev' : 'next';\n  const isLoop = swiper.params.loop && !params.cssMode;\n  const allowLoopFix = swiper.touchesDirection === 'next' && swiper.allowSlideNext || swiper.touchesDirection === 'prev' && swiper.allowSlidePrev;\n  if (!data.isMoved) {\n    if (isLoop && allowLoopFix) {\n      swiper.loopFix({\n        direction: swiper.swipeDirection\n      });\n    }\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n    if (swiper.animating) {\n      const evt = new window.CustomEvent('transitionend', {\n        bubbles: true,\n        cancelable: true\n      });\n      swiper.wrapperEl.dispatchEvent(evt);\n    }\n    data.allowMomentumBounce = false;\n    // Grab Cursor\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n    swiper.emit('sliderFirstMove', e);\n  }\n  let loopFixed;\n  new Date().getTime();\n  if (data.isMoved && data.allowThresholdMove && prevTouchesDirection !== swiper.touchesDirection && isLoop && allowLoopFix && Math.abs(diff) >= 1) {\n    Object.assign(touches, {\n      startX: pageX,\n      startY: pageY,\n      currentX: pageX,\n      currentY: pageY,\n      startTranslate: data.currentTranslate\n    });\n    data.loopSwapReset = true;\n    data.startTranslate = data.currentTranslate;\n    return;\n  }\n  swiper.emit('sliderMove', e);\n  data.isMoved = true;\n  data.currentTranslate = diff + data.startTranslate;\n  let disableParentSwiper = true;\n  let resistanceRatio = params.resistanceRatio;\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n  if (diff > 0) {\n    if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.slidesSizesGrid[swiper.activeIndex + 1] : swiper.minTranslate())) {\n      swiper.loopFix({\n        direction: 'prev',\n        setTranslate: true,\n        activeSlideIndex: 0\n      });\n    }\n    if (data.currentTranslate > swiper.minTranslate()) {\n      disableParentSwiper = false;\n      if (params.resistance) {\n        data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n      }\n    }\n  } else if (diff < 0) {\n    if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] : swiper.maxTranslate())) {\n      swiper.loopFix({\n        direction: 'next',\n        setTranslate: true,\n        activeSlideIndex: swiper.slides.length - (params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))\n      });\n    }\n    if (data.currentTranslate < swiper.maxTranslate()) {\n      disableParentSwiper = false;\n      if (params.resistance) {\n        data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n      }\n    }\n  }\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  }\n\n  // Directions locks\n  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  // Threshold\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n  if (!params.followFinger || params.cssMode) return;\n\n  // Update active index in free mode\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n    swiper.freeMode.onTouchMove();\n  }\n  // Update progress\n  swiper.updateProgress(data.currentTranslate);\n  // Update translate\n  swiper.setTranslate(data.currentTranslate);\n}\n\nfunction onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  let targetTouch;\n  const isTouchEvent = e.type === 'touchend' || e.type === 'touchcancel';\n  if (!isTouchEvent) {\n    if (data.touchId !== null) return; // return from pointer if we use touch\n    if (e.pointerId !== data.pointerId) return;\n    targetTouch = e;\n  } else {\n    targetTouch = [...e.changedTouches].filter(t => t.identifier === data.touchId)[0];\n    if (!targetTouch || targetTouch.identifier !== data.touchId) return;\n  }\n  if (['pointercancel', 'pointerout', 'pointerleave', 'contextmenu'].includes(e.type)) {\n    const proceed = ['pointercancel', 'contextmenu'].includes(e.type) && (swiper.browser.isSafari || swiper.browser.isWebView);\n    if (!proceed) {\n      return;\n    }\n  }\n  data.pointerId = null;\n  data.touchId = null;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  if (!params.simulateTouch && e.pointerType === 'mouse') return;\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n  data.allowTouchCallbacks = false;\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n\n  // Return Grab Cursor\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  }\n\n  // Time diff\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime;\n\n  // Tap, doubleTap, Click\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target, pathTree);\n    swiper.emit('tap click', e);\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 && !data.loopSwapReset || data.currentTranslate === data.startTranslate && !data.loopSwapReset) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n  if (params.cssMode) {\n    return;\n  }\n  if (params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  }\n\n  // Find current slide\n  const swipeToLast = currentPos >= -swiper.maxTranslate() && !swiper.params.loop;\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (swipeToLast || currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (swipeToLast || currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n  let rewindFirstIndex = null;\n  let rewindLastIndex = null;\n  if (params.rewind) {\n    if (swiper.isBeginning) {\n      rewindLastIndex = params.virtual && params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    } else if (swiper.isEnd) {\n      rewindFirstIndex = 0;\n    }\n  }\n  // Find current slide size\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) {\n        swiper.slideTo(stopIndex + increment);\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n        swiper.slideTo(rewindLastIndex);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n      }\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}\n\nfunction onResize() {\n  const swiper = this;\n  const {\n    params,\n    el\n  } = swiper;\n  if (el && el.offsetWidth === 0) return;\n\n  // Breakpoints\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  }\n\n  // Save locks\n  const {\n    allowSlideNext,\n    allowSlidePrev,\n    snapGrid\n  } = swiper;\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n\n  // Disable locks on resize\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n  swiper.updateSize();\n  swiper.updateSlides();\n  swiper.updateSlidesClasses();\n  const isVirtualLoop = isVirtual && params.loop;\n  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    if (swiper.params.loop && !isVirtual) {\n      swiper.slideToLoop(swiper.realIndex, 0, false, true);\n    } else {\n      swiper.slideTo(swiper.activeIndex, 0, false, true);\n    }\n  }\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    clearTimeout(swiper.autoplay.resizeTimeout);\n    swiper.autoplay.resizeTimeout = setTimeout(() => {\n      if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n        swiper.autoplay.resume();\n      }\n    }, 500);\n  }\n  // Return locks after resize\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}\n\nfunction onClick(e) {\n  const swiper = this;\n  if (!swiper.enabled) return;\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks) e.preventDefault();\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}\n\nfunction onScroll() {\n  const swiper = this;\n  const {\n    wrapperEl,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  swiper.previousTranslate = swiper.translate;\n  if (swiper.isHorizontal()) {\n    swiper.translate = -wrapperEl.scrollLeft;\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  }\n  // eslint-disable-next-line\n  if (swiper.translate === 0) swiper.translate = 0;\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n  }\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n  swiper.emit('setTranslate', swiper.translate, false);\n}\n\nfunction onLoad(e) {\n  const swiper = this;\n  processLazyPreloader(swiper, e.target);\n  if (swiper.params.cssMode || swiper.params.slidesPerView !== 'auto' && !swiper.params.autoHeight) {\n    return;\n  }\n  swiper.update();\n}\n\nfunction onDocumentTouchStart() {\n  const swiper = this;\n  if (swiper.documentTouchHandlerProceeded) return;\n  swiper.documentTouchHandlerProceeded = true;\n  if (swiper.params.touchReleaseOnEdges) {\n    swiper.el.style.touchAction = 'auto';\n  }\n}\n\nconst events = (swiper, method) => {\n  const document = getDocument();\n  const {\n    params,\n    el,\n    wrapperEl,\n    device\n  } = swiper;\n  const capture = !!params.nested;\n  const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n  const swiperMethod = method;\n\n  // Touch Events\n  document[domMethod]('touchstart', swiper.onDocumentTouchStart, {\n    passive: false,\n    capture\n  });\n  el[domMethod]('touchstart', swiper.onTouchStart, {\n    passive: false\n  });\n  el[domMethod]('pointerdown', swiper.onTouchStart, {\n    passive: false\n  });\n  document[domMethod]('touchmove', swiper.onTouchMove, {\n    passive: false,\n    capture\n  });\n  document[domMethod]('pointermove', swiper.onTouchMove, {\n    passive: false,\n    capture\n  });\n  document[domMethod]('touchend', swiper.onTouchEnd, {\n    passive: true\n  });\n  document[domMethod]('pointerup', swiper.onTouchEnd, {\n    passive: true\n  });\n  document[domMethod]('pointercancel', swiper.onTouchEnd, {\n    passive: true\n  });\n  document[domMethod]('touchcancel', swiper.onTouchEnd, {\n    passive: true\n  });\n  document[domMethod]('pointerout', swiper.onTouchEnd, {\n    passive: true\n  });\n  document[domMethod]('pointerleave', swiper.onTouchEnd, {\n    passive: true\n  });\n  document[domMethod]('contextmenu', swiper.onTouchEnd, {\n    passive: true\n  });\n\n  // Prevent Links Clicks\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el[domMethod]('click', swiper.onClick, true);\n  }\n  if (params.cssMode) {\n    wrapperEl[domMethod]('scroll', swiper.onScroll);\n  }\n\n  // Resize handler\n  if (params.updateOnWindowResize) {\n    swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);\n  } else {\n    swiper[swiperMethod]('observerUpdate', onResize, true);\n  }\n\n  // Images loader\n  el[domMethod]('load', swiper.onLoad, {\n    capture: true\n  });\n};\nfunction attachEvents() {\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  swiper.onTouchStart = onTouchStart.bind(swiper);\n  swiper.onTouchMove = onTouchMove.bind(swiper);\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\n  swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);\n  if (params.cssMode) {\n    swiper.onScroll = onScroll.bind(swiper);\n  }\n  swiper.onClick = onClick.bind(swiper);\n  swiper.onLoad = onLoad.bind(swiper);\n  events(swiper, 'on');\n}\nfunction detachEvents() {\n  const swiper = this;\n  events(swiper, 'off');\n}\nvar events$1 = {\n  attachEvents,\n  detachEvents\n};\n\nconst isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\nfunction setBreakpoint() {\n  const swiper = this;\n  const {\n    realIndex,\n    initialized,\n    params,\n    el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return;\n\n  // Get breakpoint for window width and update parameters\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n  if (wasMultiRow && !isMultiRow) {\n    el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    el.classList.add(`${params.containerModifierClass}grid`);\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\n      el.classList.add(`${params.containerModifierClass}grid-column`);\n    }\n    swiper.emitContainerClasses();\n  }\n\n  // Toggle navigation, pagination, scrollbar\n  ['navigation', 'pagination', 'scrollbar'].forEach(prop => {\n    if (typeof breakpointParams[prop] === 'undefined') return;\n    const wasModuleEnabled = params[prop] && params[prop].enabled;\n    const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n    if (wasModuleEnabled && !isModuleEnabled) {\n      swiper[prop].disable();\n    }\n    if (!wasModuleEnabled && isModuleEnabled) {\n      swiper[prop].enable();\n    }\n  });\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n  const wasLoop = params.loop;\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n  extend(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  const hasLoop = swiper.params.loop;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit('_beforeBreakpoint', breakpointParams);\n  if (initialized) {\n    if (needsReLoop) {\n      swiper.loopDestroy();\n      swiper.loopCreate(realIndex);\n      swiper.updateSlides();\n    } else if (!wasLoop && hasLoop) {\n      swiper.loopCreate(realIndex);\n      swiper.updateSlides();\n    } else if (wasLoop && !hasLoop) {\n      swiper.loopDestroy();\n    }\n  }\n  swiper.emit('breakpoint', breakpointParams);\n}\n\nfunction getBreakpoint(breakpoints, base, containerEl) {\n  if (base === void 0) {\n    base = 'window';\n  }\n  if (!breakpoints || base === 'container' && !containerEl) return undefined;\n  let breakpoint = false;\n  const window = getWindow();\n  const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints).map(point => {\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n    if (base === 'window') {\n      if (window.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n  return breakpoint || 'max';\n}\n\nvar breakpoints = {\n  setBreakpoint,\n  getBreakpoint\n};\n\nfunction prepareClasses(entries, prefix) {\n  const resultClasses = [];\n  entries.forEach(item => {\n    if (typeof item === 'object') {\n      Object.keys(item).forEach(classNames => {\n        if (item[classNames]) {\n          resultClasses.push(prefix + classNames);\n        }\n      });\n    } else if (typeof item === 'string') {\n      resultClasses.push(prefix + item);\n    }\n  });\n  return resultClasses;\n}\nfunction addClasses() {\n  const swiper = this;\n  const {\n    classNames,\n    params,\n    rtl,\n    el,\n    device\n  } = swiper;\n  // prettier-ignore\n  const suffixes = prepareClasses(['initialized', params.direction, {\n    'free-mode': swiper.params.freeMode && params.freeMode.enabled\n  }, {\n    'autoheight': params.autoHeight\n  }, {\n    'rtl': rtl\n  }, {\n    'grid': params.grid && params.grid.rows > 1\n  }, {\n    'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'\n  }, {\n    'android': device.android\n  }, {\n    'ios': device.ios\n  }, {\n    'css-mode': params.cssMode\n  }, {\n    'centered': params.cssMode && params.centeredSlides\n  }, {\n    'watch-progress': params.watchSlidesProgress\n  }], params.containerModifierClass);\n  classNames.push(...suffixes);\n  el.classList.add(...classNames);\n  swiper.emitContainerClasses();\n}\n\nfunction removeClasses() {\n  const swiper = this;\n  const {\n    el,\n    classNames\n  } = swiper;\n  el.classList.remove(...classNames);\n  swiper.emitContainerClasses();\n}\n\nvar classes = {\n  addClasses,\n  removeClasses\n};\n\nfunction checkOverflow() {\n  const swiper = this;\n  const {\n    isLocked: wasLocked,\n    params\n  } = swiper;\n  const {\n    slidesOffsetBefore\n  } = params;\n  if (slidesOffsetBefore) {\n    const lastSlideIndex = swiper.slides.length - 1;\n    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n    swiper.isLocked = swiper.size > lastSlideRightEdge;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n  if (params.allowSlideNext === true) {\n    swiper.allowSlideNext = !swiper.isLocked;\n  }\n  if (params.allowSlidePrev === true) {\n    swiper.allowSlidePrev = !swiper.isLocked;\n  }\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n  }\n  if (wasLocked !== swiper.isLocked) {\n    swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\n  }\n}\nvar checkOverflow$1 = {\n  checkOverflow\n};\n\nvar defaults = {\n  init: true,\n  direction: 'horizontal',\n  oneWayMovement: false,\n  swiperElementNodeName: 'SWIPER-CONTAINER',\n  touchEventsTarget: 'wrapper',\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  resizeObserver: true,\n  nested: false,\n  createElements: false,\n  eventsPrefix: 'swiper',\n  enabled: true,\n  focusableElements: 'input, select, option, textarea, button, video, label',\n  // Overrides\n  width: null,\n  height: null,\n  //\n  preventInteractionOnTransition: false,\n  // ssr\n  userAgent: null,\n  url: null,\n  // To support iOS's swipe-to-go-back gesture (when being used in-app).\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n  // Autoheight\n  autoHeight: false,\n  // Set wrapper width\n  setWrapperSize: false,\n  // Virtual Translate\n  virtualTranslate: false,\n  // Effects\n  effect: 'slide',\n  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n\n  // Breakpoints\n  breakpoints: undefined,\n  breakpointsBase: 'window',\n  // Slides grid\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  slidesPerGroupAuto: false,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0,\n  // in px\n  slidesOffsetAfter: 0,\n  // in px\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n  // Disable swiper and hide navigation when container not overflow\n  watchOverflow: true,\n  // Round length\n  roundLengths: false,\n  // Touches\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 5,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n  // Unique Navigation Elements\n  uniqueNavElements: true,\n  // Resistance\n  resistance: true,\n  resistanceRatio: 0.85,\n  // Progress\n  watchSlidesProgress: false,\n  // Cursor\n  grabCursor: false,\n  // Clicks\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n  // loop\n  loop: false,\n  loopAddBlankSlides: true,\n  loopAdditionalSlides: 0,\n  loopPreventsSliding: true,\n  // rewind\n  rewind: false,\n  // Swiping/no swiping\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null,\n  // '.swipe-handler',\n  noSwiping: true,\n  noSwipingClass: 'swiper-no-swiping',\n  noSwipingSelector: null,\n  // Passive Listeners\n  passiveListeners: true,\n  maxBackfaceHiddenSlides: 10,\n  // NS\n  containerModifierClass: 'swiper-',\n  // NEW\n  slideClass: 'swiper-slide',\n  slideBlankClass: 'swiper-slide-blank',\n  slideActiveClass: 'swiper-slide-active',\n  slideVisibleClass: 'swiper-slide-visible',\n  slideFullyVisibleClass: 'swiper-slide-fully-visible',\n  slideNextClass: 'swiper-slide-next',\n  slidePrevClass: 'swiper-slide-prev',\n  wrapperClass: 'swiper-wrapper',\n  lazyPreloaderClass: 'swiper-lazy-preloader',\n  lazyPreloadPrevNext: 0,\n  // Callbacks\n  runCallbacksOnInit: true,\n  // Internals\n  _emitClasses: false\n};\n\nfunction moduleExtendParams(params, allModulesParams) {\n  return function extendParams(obj) {\n    if (obj === void 0) {\n      obj = {};\n    }\n    const moduleParamName = Object.keys(obj)[0];\n    const moduleParams = obj[moduleParamName];\n    if (typeof moduleParams !== 'object' || moduleParams === null) {\n      extend(allModulesParams, obj);\n      return;\n    }\n    if (params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        enabled: true\n      };\n    }\n    if (moduleParamName === 'navigation' && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].prevEl && !params[moduleParamName].nextEl) {\n      params[moduleParamName].auto = true;\n    }\n    if (['pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].el) {\n      params[moduleParamName].auto = true;\n    }\n    if (!(moduleParamName in params && 'enabled' in moduleParams)) {\n      extend(allModulesParams, obj);\n      return;\n    }\n    if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {\n      params[moduleParamName].enabled = true;\n    }\n    if (!params[moduleParamName]) params[moduleParamName] = {\n      enabled: false\n    };\n    extend(allModulesParams, obj);\n  };\n}\n\n/* eslint no-param-reassign: \"off\" */\nconst prototypes = {\n  eventsEmitter,\n  update,\n  translate,\n  transition,\n  slide,\n  loop,\n  grabCursor,\n  events: events$1,\n  breakpoints,\n  checkOverflow: checkOverflow$1,\n  classes\n};\nconst extendedDefaults = {};\nclass Swiper {\n  constructor() {\n    let el;\n    let params;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {\n      params = args[0];\n    } else {\n      [el, params] = args;\n    }\n    if (!params) params = {};\n    params = extend({}, params);\n    if (el && !params.el) params.el = el;\n    const document = getDocument();\n    if (params.el && typeof params.el === 'string' && document.querySelectorAll(params.el).length > 1) {\n      const swipers = [];\n      document.querySelectorAll(params.el).forEach(containerEl => {\n        const newParams = extend({}, params, {\n          el: containerEl\n        });\n        swipers.push(new Swiper(newParams));\n      });\n      // eslint-disable-next-line no-constructor-return\n      return swipers;\n    }\n\n    // Swiper Instance\n    const swiper = this;\n    swiper.__swiper__ = true;\n    swiper.support = getSupport();\n    swiper.device = getDevice({\n      userAgent: params.userAgent\n    });\n    swiper.browser = getBrowser();\n    swiper.eventsListeners = {};\n    swiper.eventsAnyListeners = [];\n    swiper.modules = [...swiper.__modules__];\n    if (params.modules && Array.isArray(params.modules)) {\n      swiper.modules.push(...params.modules);\n    }\n    const allModulesParams = {};\n    swiper.modules.forEach(mod => {\n      mod({\n        params,\n        swiper,\n        extendParams: moduleExtendParams(params, allModulesParams),\n        on: swiper.on.bind(swiper),\n        once: swiper.once.bind(swiper),\n        off: swiper.off.bind(swiper),\n        emit: swiper.emit.bind(swiper)\n      });\n    });\n\n    // Extend defaults with modules params\n    const swiperParams = extend({}, defaults, allModulesParams);\n\n    // Extend defaults with passed params\n    swiper.params = extend({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = extend({}, swiper.params);\n    swiper.passedParams = extend({}, params);\n\n    // add event listeners\n    if (swiper.params && swiper.params.on) {\n      Object.keys(swiper.params.on).forEach(eventName => {\n        swiper.on(eventName, swiper.params.on[eventName]);\n      });\n    }\n    if (swiper.params && swiper.params.onAny) {\n      swiper.onAny(swiper.params.onAny);\n    }\n\n    // Extend Swiper\n    Object.assign(swiper, {\n      enabled: swiper.params.enabled,\n      el,\n      // Classes\n      classNames: [],\n      // Slides\n      slides: [],\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n      // isDirection\n      isHorizontal() {\n        return swiper.params.direction === 'horizontal';\n      },\n      isVertical() {\n        return swiper.params.direction === 'vertical';\n      },\n      // Indexes\n      activeIndex: 0,\n      realIndex: 0,\n      //\n      isBeginning: true,\n      isEnd: false,\n      // Props\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n      cssOverflowAdjustment() {\n        // Returns 0 unless `translate` is > 2**23\n        // Should be subtracted from css values to prevent overflow\n        return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;\n      },\n      // Locks\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n      // Touch Events\n      touchEventsData: {\n        isTouched: undefined,\n        isMoved: undefined,\n        allowTouchCallbacks: undefined,\n        touchStartTime: undefined,\n        isScrolling: undefined,\n        currentTranslate: undefined,\n        startTranslate: undefined,\n        allowThresholdMove: undefined,\n        // Form elements to match\n        focusableElements: swiper.params.focusableElements,\n        // Last click time\n        lastClickTime: 0,\n        clickTimeout: undefined,\n        // Velocities\n        velocities: [],\n        allowMomentumBounce: undefined,\n        startMoving: undefined,\n        pointerId: null,\n        touchId: null\n      },\n      // Clicks\n      allowClick: true,\n      // Touches\n      allowTouchMove: swiper.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      // Images\n      imagesToLoad: [],\n      imagesLoaded: 0\n    });\n    swiper.emit('_swiper');\n\n    // Init\n    if (swiper.params.init) {\n      swiper.init();\n    }\n\n    // Return app instance\n    // eslint-disable-next-line no-constructor-return\n    return swiper;\n  }\n  getDirectionLabel(property) {\n    if (this.isHorizontal()) {\n      return property;\n    }\n    // prettier-ignore\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  }\n  getSlideIndex(slideEl) {\n    const {\n      slidesEl,\n      params\n    } = this;\n    const slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);\n    const firstSlideIndex = elementIndex(slides[0]);\n    return elementIndex(slideEl) - firstSlideIndex;\n  }\n  getSlideIndexByData(index) {\n    return this.getSlideIndex(this.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === index)[0]);\n  }\n  recalcSlides() {\n    const swiper = this;\n    const {\n      slidesEl,\n      params\n    } = swiper;\n    swiper.slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);\n  }\n  enable() {\n    const swiper = this;\n    if (swiper.enabled) return;\n    swiper.enabled = true;\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n    swiper.emit('enable');\n  }\n  disable() {\n    const swiper = this;\n    if (!swiper.enabled) return;\n    swiper.enabled = false;\n    if (swiper.params.grabCursor) {\n      swiper.unsetGrabCursor();\n    }\n    swiper.emit('disable');\n  }\n  setProgress(progress, speed) {\n    const swiper = this;\n    progress = Math.min(Math.max(progress, 0), 1);\n    const min = swiper.minTranslate();\n    const max = swiper.maxTranslate();\n    const current = (max - min) * progress + min;\n    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  emitContainerClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const cls = swiper.el.className.split(' ').filter(className => {\n      return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n    });\n    swiper.emit('_containerClasses', cls.join(' '));\n  }\n  getSlideClasses(slideEl) {\n    const swiper = this;\n    if (swiper.destroyed) return '';\n    return slideEl.className.split(' ').filter(className => {\n      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;\n    }).join(' ');\n  }\n  emitSlidesClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const updates = [];\n    swiper.slides.forEach(slideEl => {\n      const classNames = swiper.getSlideClasses(slideEl);\n      updates.push({\n        slideEl,\n        classNames\n      });\n      swiper.emit('_slideClass', slideEl, classNames);\n    });\n    swiper.emit('_slideClasses', updates);\n  }\n  slidesPerViewDynamic(view, exact) {\n    if (view === void 0) {\n      view = 'current';\n    }\n    if (exact === void 0) {\n      exact = false;\n    }\n    const swiper = this;\n    const {\n      params,\n      slides,\n      slidesGrid,\n      slidesSizesGrid,\n      size: swiperSize,\n      activeIndex\n    } = swiper;\n    let spv = 1;\n    if (typeof params.slidesPerView === 'number') return params.slidesPerView;\n    if (params.centeredSlides) {\n      let slideSize = slides[activeIndex] ? Math.ceil(slides[activeIndex].swiperSlideSize) : 0;\n      let breakLoop;\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += Math.ceil(slides[i].swiperSlideSize);\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n    } else {\n      // eslint-disable-next-line\n      if (view === 'current') {\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\n          const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      } else {\n        // previous\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\n          const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      }\n    }\n    return spv;\n  }\n  update() {\n    const swiper = this;\n    if (!swiper || swiper.destroyed) return;\n    const {\n      snapGrid,\n      params\n    } = swiper;\n    // Breakpoints\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n    [...swiper.el.querySelectorAll('[loading=\"lazy\"]')].forEach(imageEl => {\n      if (imageEl.complete) {\n        processLazyPreloader(swiper, imageEl);\n      }\n    });\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n    function setTranslate() {\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n    let translated;\n    if (params.freeMode && params.freeMode.enabled && !params.cssMode) {\n      setTranslate();\n      if (params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !params.centeredSlides) {\n        const slides = swiper.virtual && params.virtual.enabled ? swiper.virtual.slides : swiper.slides;\n        translated = swiper.slideTo(slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n      if (!translated) {\n        setTranslate();\n      }\n    }\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n    swiper.emit('update');\n  }\n  changeDirection(newDirection, needUpdate) {\n    if (needUpdate === void 0) {\n      needUpdate = true;\n    }\n    const swiper = this;\n    const currentDirection = swiper.params.direction;\n    if (!newDirection) {\n      // eslint-disable-next-line\n      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n    }\n    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\n      return swiper;\n    }\n    swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`);\n    swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`);\n    swiper.emitContainerClasses();\n    swiper.params.direction = newDirection;\n    swiper.slides.forEach(slideEl => {\n      if (newDirection === 'vertical') {\n        slideEl.style.width = '';\n      } else {\n        slideEl.style.height = '';\n      }\n    });\n    swiper.emit('changeDirection');\n    if (needUpdate) swiper.update();\n    return swiper;\n  }\n  changeLanguageDirection(direction) {\n    const swiper = this;\n    if (swiper.rtl && direction === 'rtl' || !swiper.rtl && direction === 'ltr') return;\n    swiper.rtl = direction === 'rtl';\n    swiper.rtlTranslate = swiper.params.direction === 'horizontal' && swiper.rtl;\n    if (swiper.rtl) {\n      swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = 'rtl';\n    } else {\n      swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = 'ltr';\n    }\n    swiper.update();\n  }\n  mount(element) {\n    const swiper = this;\n    if (swiper.mounted) return true;\n\n    // Find el\n    let el = element || swiper.params.el;\n    if (typeof el === 'string') {\n      el = document.querySelector(el);\n    }\n    if (!el) {\n      return false;\n    }\n    el.swiper = swiper;\n    if (el.parentNode && el.parentNode.host && el.parentNode.host.nodeName === swiper.params.swiperElementNodeName.toUpperCase()) {\n      swiper.isElement = true;\n    }\n    const getWrapperSelector = () => {\n      return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;\n    };\n    const getWrapper = () => {\n      if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n        const res = el.shadowRoot.querySelector(getWrapperSelector());\n        // Children needs to return slot items\n        return res;\n      }\n      return elementChildren(el, getWrapperSelector())[0];\n    };\n    // Find Wrapper\n    let wrapperEl = getWrapper();\n    if (!wrapperEl && swiper.params.createElements) {\n      wrapperEl = createElement('div', swiper.params.wrapperClass);\n      el.append(wrapperEl);\n      elementChildren(el, `.${swiper.params.slideClass}`).forEach(slideEl => {\n        wrapperEl.append(slideEl);\n      });\n    }\n    Object.assign(swiper, {\n      el,\n      wrapperEl,\n      slidesEl: swiper.isElement && !el.parentNode.host.slideSlots ? el.parentNode.host : wrapperEl,\n      hostEl: swiper.isElement ? el.parentNode.host : el,\n      mounted: true,\n      // RTL\n      rtl: el.dir.toLowerCase() === 'rtl' || elementStyle(el, 'direction') === 'rtl',\n      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || elementStyle(el, 'direction') === 'rtl'),\n      wrongRTL: elementStyle(wrapperEl, 'display') === '-webkit-box'\n    });\n    return true;\n  }\n  init(el) {\n    const swiper = this;\n    if (swiper.initialized) return swiper;\n    const mounted = swiper.mount(el);\n    if (mounted === false) return swiper;\n    swiper.emit('beforeInit');\n\n    // Set breakpoint\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n\n    // Add Classes\n    swiper.addClasses();\n\n    // Update size\n    swiper.updateSize();\n\n    // Update slides\n    swiper.updateSlides();\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    }\n\n    // Set Grab Cursor\n    if (swiper.params.grabCursor && swiper.enabled) {\n      swiper.setGrabCursor();\n    }\n\n    // Slide To Initial Slide\n    if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, false, true);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n    }\n\n    // Create loop\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    }\n\n    // Attach events\n    swiper.attachEvents();\n    const lazyElements = [...swiper.el.querySelectorAll('[loading=\"lazy\"]')];\n    if (swiper.isElement) {\n      lazyElements.push(...swiper.hostEl.querySelectorAll('[loading=\"lazy\"]'));\n    }\n    lazyElements.forEach(imageEl => {\n      if (imageEl.complete) {\n        processLazyPreloader(swiper, imageEl);\n      } else {\n        imageEl.addEventListener('load', e => {\n          processLazyPreloader(swiper, e.target);\n        });\n      }\n    });\n    preload(swiper);\n\n    // Init Flag\n    swiper.initialized = true;\n    preload(swiper);\n\n    // Emit\n    swiper.emit('init');\n    swiper.emit('afterInit');\n    return swiper;\n  }\n  destroy(deleteInstance, cleanStyles) {\n    if (deleteInstance === void 0) {\n      deleteInstance = true;\n    }\n    if (cleanStyles === void 0) {\n      cleanStyles = true;\n    }\n    const swiper = this;\n    const {\n      params,\n      el,\n      wrapperEl,\n      slides\n    } = swiper;\n    if (typeof swiper.params === 'undefined' || swiper.destroyed) {\n      return null;\n    }\n    swiper.emit('beforeDestroy');\n\n    // Init Flag\n    swiper.initialized = false;\n\n    // Detach events\n    swiper.detachEvents();\n\n    // Destroy loop\n    if (params.loop) {\n      swiper.loopDestroy();\n    }\n\n    // Cleanup styles\n    if (cleanStyles) {\n      swiper.removeClasses();\n      el.removeAttribute('style');\n      wrapperEl.removeAttribute('style');\n      if (slides && slides.length) {\n        slides.forEach(slideEl => {\n          slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass);\n          slideEl.removeAttribute('style');\n          slideEl.removeAttribute('data-swiper-slide-index');\n        });\n      }\n    }\n    swiper.emit('destroy');\n\n    // Detach emitter events\n    Object.keys(swiper.eventsListeners).forEach(eventName => {\n      swiper.off(eventName);\n    });\n    if (deleteInstance !== false) {\n      swiper.el.swiper = null;\n      deleteProps(swiper);\n    }\n    swiper.destroyed = true;\n    return null;\n  }\n  static extendDefaults(newDefaults) {\n    extend(extendedDefaults, newDefaults);\n  }\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n  static get defaults() {\n    return defaults;\n  }\n  static installModule(mod) {\n    if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\n    const modules = Swiper.prototype.__modules__;\n    if (typeof mod === 'function' && modules.indexOf(mod) < 0) {\n      modules.push(mod);\n    }\n  }\n  static use(module) {\n    if (Array.isArray(module)) {\n      module.forEach(m => Swiper.installModule(m));\n      return Swiper;\n    }\n    Swiper.installModule(module);\n    return Swiper;\n  }\n}\nObject.keys(prototypes).forEach(prototypeGroup => {\n  Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n  });\n});\nSwiper.use([Resize, Observer]);\n\nexport { Swiper as S, defaults as d };\n","import { g as getDocument } from '../shared/ssr-window.esm.mjs';\nimport { m as makeElementsArray, i as classesToTokens, c as createElement, n as nextTick, b as elementOffset } from '../shared/utils.mjs';\nimport { c as createElementIfNotDefined } from '../shared/create-element-if-not-defined.mjs';\nimport { c as classesToSelector } from '../shared/classes-to-selector.mjs';\n\nfunction Scrollbar(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const document = getDocument();\n  let isTouched = false;\n  let timeout = null;\n  let dragTimeout = null;\n  let dragStartPos;\n  let dragSize;\n  let trackSize;\n  let divider;\n  extendParams({\n    scrollbar: {\n      el: null,\n      dragSize: 'auto',\n      hide: false,\n      draggable: false,\n      snapOnRelease: true,\n      lockClass: 'swiper-scrollbar-lock',\n      dragClass: 'swiper-scrollbar-drag',\n      scrollbarDisabledClass: 'swiper-scrollbar-disabled',\n      horizontalClass: `swiper-scrollbar-horizontal`,\n      verticalClass: `swiper-scrollbar-vertical`\n    }\n  });\n  swiper.scrollbar = {\n    el: null,\n    dragEl: null\n  };\n  function setTranslate() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      dragEl,\n      el\n    } = scrollbar;\n    const params = swiper.params.scrollbar;\n    const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;\n    let newSize = dragSize;\n    let newPos = (trackSize - dragSize) * progress;\n    if (rtl) {\n      newPos = -newPos;\n      if (newPos > 0) {\n        newSize = dragSize - newPos;\n        newPos = 0;\n      } else if (-newPos + dragSize > trackSize) {\n        newSize = trackSize + newPos;\n      }\n    } else if (newPos < 0) {\n      newSize = dragSize + newPos;\n      newPos = 0;\n    } else if (newPos + dragSize > trackSize) {\n      newSize = trackSize - newPos;\n    }\n    if (swiper.isHorizontal()) {\n      dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;\n      dragEl.style.width = `${newSize}px`;\n    } else {\n      dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;\n      dragEl.style.height = `${newSize}px`;\n    }\n    if (params.hide) {\n      clearTimeout(timeout);\n      el.style.opacity = 1;\n      timeout = setTimeout(() => {\n        el.style.opacity = 0;\n        el.style.transitionDuration = '400ms';\n      }, 1000);\n    }\n  }\n  function setTransition(duration) {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;\n  }\n  function updateSize() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar\n    } = swiper;\n    const {\n      dragEl,\n      el\n    } = scrollbar;\n    dragEl.style.width = '';\n    dragEl.style.height = '';\n    trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n    if (swiper.params.scrollbar.dragSize === 'auto') {\n      dragSize = trackSize * divider;\n    } else {\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n    }\n    if (swiper.isHorizontal()) {\n      dragEl.style.width = `${dragSize}px`;\n    } else {\n      dragEl.style.height = `${dragSize}px`;\n    }\n    if (divider >= 1) {\n      el.style.display = 'none';\n    } else {\n      el.style.display = '';\n    }\n    if (swiper.params.scrollbar.hide) {\n      el.style.opacity = 0;\n    }\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      scrollbar.el.classList[swiper.isLocked ? 'add' : 'remove'](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function getPointerPosition(e) {\n    return swiper.isHorizontal() ? e.clientX : e.clientY;\n  }\n  function setDragPosition(e) {\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      el\n    } = scrollbar;\n    let positionRatio;\n    positionRatio = (getPointerPosition(e) - elementOffset(el)[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n    if (rtl) {\n      positionRatio = 1 - positionRatio;\n    }\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n    swiper.updateProgress(position);\n    swiper.setTranslate(position);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  function onDragStart(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el,\n      dragEl\n    } = scrollbar;\n    isTouched = true;\n    dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\n    e.preventDefault();\n    e.stopPropagation();\n    wrapperEl.style.transitionDuration = '100ms';\n    dragEl.style.transitionDuration = '100ms';\n    setDragPosition(e);\n    clearTimeout(dragTimeout);\n    el.style.transitionDuration = '0ms';\n    if (params.hide) {\n      el.style.opacity = 1;\n    }\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style['scroll-snap-type'] = 'none';\n    }\n    emit('scrollbarDragStart', e);\n  }\n  function onDragMove(e) {\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el,\n      dragEl\n    } = scrollbar;\n    if (!isTouched) return;\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    setDragPosition(e);\n    wrapperEl.style.transitionDuration = '0ms';\n    el.style.transitionDuration = '0ms';\n    dragEl.style.transitionDuration = '0ms';\n    emit('scrollbarDragMove', e);\n  }\n  function onDragEnd(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el\n    } = scrollbar;\n    if (!isTouched) return;\n    isTouched = false;\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style['scroll-snap-type'] = '';\n      wrapperEl.style.transitionDuration = '';\n    }\n    if (params.hide) {\n      clearTimeout(dragTimeout);\n      dragTimeout = nextTick(() => {\n        el.style.opacity = 0;\n        el.style.transitionDuration = '400ms';\n      }, 1000);\n    }\n    emit('scrollbarDragEnd', e);\n    if (params.snapOnRelease) {\n      swiper.slideToClosest();\n    }\n  }\n  function events(method) {\n    const {\n      scrollbar,\n      params\n    } = swiper;\n    const el = scrollbar.el;\n    if (!el) return;\n    const target = el;\n    const activeListener = params.passiveListeners ? {\n      passive: false,\n      capture: false\n    } : false;\n    const passiveListener = params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (!target) return;\n    const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n    target[eventMethod]('pointerdown', onDragStart, activeListener);\n    document[eventMethod]('pointermove', onDragMove, activeListener);\n    document[eventMethod]('pointerup', onDragEnd, passiveListener);\n  }\n  function enableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    events('on');\n  }\n  function disableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    events('off');\n  }\n  function init() {\n    const {\n      scrollbar,\n      el: swiperEl\n    } = swiper;\n    swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n      el: 'swiper-scrollbar'\n    });\n    const params = swiper.params.scrollbar;\n    if (!params.el) return;\n    let el;\n    if (typeof params.el === 'string' && swiper.isElement) {\n      el = swiper.el.querySelector(params.el);\n    }\n    if (!el && typeof params.el === 'string') {\n      el = document.querySelectorAll(params.el);\n      if (!el.length) return;\n    } else if (!el) {\n      el = params.el;\n    }\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {\n      el = swiperEl.querySelector(params.el);\n    }\n    if (el.length > 0) el = el[0];\n    el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    let dragEl;\n    if (el) {\n      dragEl = el.querySelector(classesToSelector(swiper.params.scrollbar.dragClass));\n      if (!dragEl) {\n        dragEl = createElement('div', swiper.params.scrollbar.dragClass);\n        el.append(dragEl);\n      }\n    }\n    Object.assign(scrollbar, {\n      el,\n      dragEl\n    });\n    if (params.draggable) {\n      enableDraggable();\n    }\n    if (el) {\n      el.classList[swiper.enabled ? 'remove' : 'add'](...classesToTokens(swiper.params.scrollbar.lockClass));\n    }\n  }\n  function destroy() {\n    const params = swiper.params.scrollbar;\n    const el = swiper.scrollbar.el;\n    if (el) {\n      el.classList.remove(...classesToTokens(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass));\n    }\n    disableDraggable();\n  }\n  on('changeDirection', () => {\n    if (!swiper.scrollbar || !swiper.scrollbar.el) return;\n    const params = swiper.params.scrollbar;\n    let {\n      el\n    } = swiper.scrollbar;\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.classList.remove(params.horizontalClass, params.verticalClass);\n      subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    });\n  });\n  on('init', () => {\n    if (swiper.params.scrollbar.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      updateSize();\n      setTranslate();\n    }\n  });\n  on('update resize observerUpdate lock unlock changeDirection', () => {\n    updateSize();\n  });\n  on('setTranslate', () => {\n    setTranslate();\n  });\n  on('setTransition', (_s, duration) => {\n    setTransition(duration);\n  });\n  on('enable disable', () => {\n    const {\n      el\n    } = swiper.scrollbar;\n    if (el) {\n      el.classList[swiper.enabled ? 'remove' : 'add'](...classesToTokens(swiper.params.scrollbar.lockClass));\n    }\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  const enable = () => {\n    swiper.el.classList.remove(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));\n    if (swiper.scrollbar.el) {\n      swiper.scrollbar.el.classList.remove(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));\n    }\n    init();\n    updateSize();\n    setTranslate();\n  };\n  const disable = () => {\n    swiper.el.classList.add(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));\n    if (swiper.scrollbar.el) {\n      swiper.scrollbar.el.classList.add(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));\n    }\n    destroy();\n  };\n  Object.assign(swiper.scrollbar, {\n    enable,\n    disable,\n    updateSize,\n    setTranslate,\n    init,\n    destroy\n  });\n}\n\nexport { Scrollbar as default };\n","import { e as elementChildren, c as createElement } from './utils.mjs';\n\nfunction createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n  if (swiper.params.createElements) {\n    Object.keys(checkProps).forEach(key => {\n      if (!params[key] && params.auto === true) {\n        let element = elementChildren(swiper.el, `.${checkProps[key]}`)[0];\n        if (!element) {\n          element = createElement('div', checkProps[key]);\n          element.className = checkProps[key];\n          swiper.el.append(element);\n        }\n        params[key] = element;\n        originalParams[key] = element;\n      }\n    });\n  }\n  return params;\n}\n\nexport { createElementIfNotDefined as c };\n","function classesToSelector(classes) {\n  if (classes === void 0) {\n    classes = '';\n  }\n  return `.${classes.trim().replace(/([\\.:!+\\/])/g, '\\\\$1') // eslint-disable-line\n  .replace(/ /g, '.')}`;\n}\n\nexport { classesToSelector as c };\n","(function(window, factory) {\n\tvar lazySizes = factory(window, window.document, Date);\n\twindow.lazySizes = lazySizes;\n\tif(typeof module == 'object' && module.exports){\n\t\tmodule.exports = lazySizes;\n\t}\n}(typeof window != 'undefined' ?\n      window : {}, \n/**\n * import(\"./types/global\")\n * @typedef { import(\"./types/lazysizes-config\").LazySizesConfigPartial } LazySizesConfigPartial\n */\nfunction l(window, document, Date) { // Pass in the window Date function also for SSR because the Date class can be lost\n\t'use strict';\n\t/*jshint eqnull:true */\n\n\tvar lazysizes,\n\t\t/**\n\t\t * @type { LazySizesConfigPartial }\n\t\t */\n\t\tlazySizesCfg;\n\n\t(function(){\n\t\tvar prop;\n\n\t\tvar lazySizesDefaults = {\n\t\t\tlazyClass: 'lazyload',\n\t\t\tloadedClass: 'lazyloaded',\n\t\t\tloadingClass: 'lazyloading',\n\t\t\tpreloadClass: 'lazypreload',\n\t\t\terrorClass: 'lazyerror',\n\t\t\t//strictClass: 'lazystrict',\n\t\t\tautosizesClass: 'lazyautosizes',\n\t\t\tfastLoadedClass: 'ls-is-cached',\n\t\t\tiframeLoadMode: 0,\n\t\t\tsrcAttr: 'data-src',\n\t\t\tsrcsetAttr: 'data-srcset',\n\t\t\tsizesAttr: 'data-sizes',\n\t\t\t//preloadAfterLoad: false,\n\t\t\tminSize: 40,\n\t\t\tcustomMedia: {},\n\t\t\tinit: true,\n\t\t\texpFactor: 1.5,\n\t\t\thFac: 0.8,\n\t\t\tloadMode: 2,\n\t\t\tloadHidden: true,\n\t\t\tricTimeout: 0,\n\t\t\tthrottleDelay: 125,\n\t\t};\n\n\t\tlazySizesCfg = window.lazySizesConfig || window.lazysizesConfig || {};\n\n\t\tfor(prop in lazySizesDefaults){\n\t\t\tif(!(prop in lazySizesCfg)){\n\t\t\t\tlazySizesCfg[prop] = lazySizesDefaults[prop];\n\t\t\t}\n\t\t}\n\t})();\n\n\tif (!document || !document.getElementsByClassName) {\n\t\treturn {\n\t\t\tinit: function () {},\n\t\t\t/**\n\t\t\t * @type { LazySizesConfigPartial }\n\t\t\t */\n\t\t\tcfg: lazySizesCfg,\n\t\t\t/**\n\t\t\t * @type { true }\n\t\t\t */\n\t\t\tnoSupport: true,\n\t\t};\n\t}\n\n\tvar docElem = document.documentElement;\n\n\tvar supportPicture = window.HTMLPictureElement;\n\n\tvar _addEventListener = 'addEventListener';\n\n\tvar _getAttribute = 'getAttribute';\n\n\t/**\n\t * Update to bind to window because 'this' becomes null during SSR\n\t * builds.\n\t */\n\tvar addEventListener = window[_addEventListener].bind(window);\n\n\tvar setTimeout = window.setTimeout;\n\n\tvar requestAnimationFrame = window.requestAnimationFrame || setTimeout;\n\n\tvar requestIdleCallback = window.requestIdleCallback;\n\n\tvar regPicture = /^picture$/i;\n\n\tvar loadEvents = ['load', 'error', 'lazyincluded', '_lazyloaded'];\n\n\tvar regClassCache = {};\n\n\tvar forEach = Array.prototype.forEach;\n\n\t/**\n\t * @param ele {Element}\n\t * @param cls {string}\n\t */\n\tvar hasClass = function(ele, cls) {\n\t\tif(!regClassCache[cls]){\n\t\t\tregClassCache[cls] = new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');\n\t\t}\n\t\treturn regClassCache[cls].test(ele[_getAttribute]('class') || '') && regClassCache[cls];\n\t};\n\n\t/**\n\t * @param ele {Element}\n\t * @param cls {string}\n\t */\n\tvar addClass = function(ele, cls) {\n\t\tif (!hasClass(ele, cls)){\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').trim() + ' ' + cls);\n\t\t}\n\t};\n\n\t/**\n\t * @param ele {Element}\n\t * @param cls {string}\n\t */\n\tvar removeClass = function(ele, cls) {\n\t\tvar reg;\n\t\tif ((reg = hasClass(ele,cls))) {\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').replace(reg, ' '));\n\t\t}\n\t};\n\n\tvar addRemoveLoadEvents = function(dom, fn, add){\n\t\tvar action = add ? _addEventListener : 'removeEventListener';\n\t\tif(add){\n\t\t\taddRemoveLoadEvents(dom, fn);\n\t\t}\n\t\tloadEvents.forEach(function(evt){\n\t\t\tdom[action](evt, fn);\n\t\t});\n\t};\n\n\t/**\n\t * @param elem { Element }\n\t * @param name { string }\n\t * @param detail { any }\n\t * @param noBubbles { boolean }\n\t * @param noCancelable { boolean }\n\t * @returns { CustomEvent }\n\t */\n\tvar triggerEvent = function(elem, name, detail, noBubbles, noCancelable){\n\t\tvar event = document.createEvent('Event');\n\n\t\tif(!detail){\n\t\t\tdetail = {};\n\t\t}\n\n\t\tdetail.instance = lazysizes;\n\n\t\tevent.initEvent(name, !noBubbles, !noCancelable);\n\n\t\tevent.detail = detail;\n\n\t\telem.dispatchEvent(event);\n\t\treturn event;\n\t};\n\n\tvar updatePolyfill = function (el, full){\n\t\tvar polyfill;\n\t\tif( !supportPicture && ( polyfill = (window.picturefill || lazySizesCfg.pf) ) ){\n\t\t\tif(full && full.src && !el[_getAttribute]('srcset')){\n\t\t\t\tel.setAttribute('srcset', full.src);\n\t\t\t}\n\t\t\tpolyfill({reevaluate: true, elements: [el]});\n\t\t} else if(full && full.src){\n\t\t\tel.src = full.src;\n\t\t}\n\t};\n\n\tvar getCSS = function (elem, style){\n\t\treturn (getComputedStyle(elem, null) || {})[style];\n\t};\n\n\t/**\n\t *\n\t * @param elem { Element }\n\t * @param parent { Element }\n\t * @param [width] {number}\n\t * @returns {number}\n\t */\n\tvar getWidth = function(elem, parent, width){\n\t\twidth = width || elem.offsetWidth;\n\n\t\twhile(width < lazySizesCfg.minSize && parent && !elem._lazysizesWidth){\n\t\t\twidth =  parent.offsetWidth;\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn width;\n\t};\n\n\tvar rAF = (function(){\n\t\tvar running, waiting;\n\t\tvar firstFns = [];\n\t\tvar secondFns = [];\n\t\tvar fns = firstFns;\n\n\t\tvar run = function(){\n\t\t\tvar runFns = fns;\n\n\t\t\tfns = firstFns.length ? secondFns : firstFns;\n\n\t\t\trunning = true;\n\t\t\twaiting = false;\n\n\t\t\twhile(runFns.length){\n\t\t\t\trunFns.shift()();\n\t\t\t}\n\n\t\t\trunning = false;\n\t\t};\n\n\t\tvar rafBatch = function(fn, queue){\n\t\t\tif(running && !queue){\n\t\t\t\tfn.apply(this, arguments);\n\t\t\t} else {\n\t\t\t\tfns.push(fn);\n\n\t\t\t\tif(!waiting){\n\t\t\t\t\twaiting = true;\n\t\t\t\t\t(document.hidden ? setTimeout : requestAnimationFrame)(run);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\trafBatch._lsFlush = run;\n\n\t\treturn rafBatch;\n\t})();\n\n\tvar rAFIt = function(fn, simple){\n\t\treturn simple ?\n\t\t\tfunction() {\n\t\t\t\trAF(fn);\n\t\t\t} :\n\t\t\tfunction(){\n\t\t\t\tvar that = this;\n\t\t\t\tvar args = arguments;\n\t\t\t\trAF(function(){\n\t\t\t\t\tfn.apply(that, args);\n\t\t\t\t});\n\t\t\t}\n\t\t;\n\t};\n\n\tvar throttle = function(fn){\n\t\tvar running;\n\t\tvar lastTime = 0;\n\t\tvar gDelay = lazySizesCfg.throttleDelay;\n\t\tvar rICTimeout = lazySizesCfg.ricTimeout;\n\t\tvar run = function(){\n\t\t\trunning = false;\n\t\t\tlastTime = Date.now();\n\t\t\tfn();\n\t\t};\n\t\tvar idleCallback = requestIdleCallback && rICTimeout > 49 ?\n\t\t\tfunction(){\n\t\t\t\trequestIdleCallback(run, {timeout: rICTimeout});\n\n\t\t\t\tif(rICTimeout !== lazySizesCfg.ricTimeout){\n\t\t\t\t\trICTimeout = lazySizesCfg.ricTimeout;\n\t\t\t\t}\n\t\t\t} :\n\t\t\trAFIt(function(){\n\t\t\t\tsetTimeout(run);\n\t\t\t}, true)\n\t\t;\n\n\t\treturn function(isPriority){\n\t\t\tvar delay;\n\n\t\t\tif((isPriority = isPriority === true)){\n\t\t\t\trICTimeout = 33;\n\t\t\t}\n\n\t\t\tif(running){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trunning =  true;\n\n\t\t\tdelay = gDelay - (Date.now() - lastTime);\n\n\t\t\tif(delay < 0){\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif(isPriority || delay < 9){\n\t\t\t\tidleCallback();\n\t\t\t} else {\n\t\t\t\tsetTimeout(idleCallback, delay);\n\t\t\t}\n\t\t};\n\t};\n\n\t//based on http://modernjavascript.blogspot.de/2013/08/building-better-debounce.html\n\tvar debounce = function(func) {\n\t\tvar timeout, timestamp;\n\t\tvar wait = 99;\n\t\tvar run = function(){\n\t\t\ttimeout = null;\n\t\t\tfunc();\n\t\t};\n\t\tvar later = function() {\n\t\t\tvar last = Date.now() - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tsetTimeout(later, wait - last);\n\t\t\t} else {\n\t\t\t\t(requestIdleCallback || run)(run);\n\t\t\t}\n\t\t};\n\n\t\treturn function() {\n\t\t\ttimestamp = Date.now();\n\n\t\t\tif (!timeout) {\n\t\t\t\ttimeout = setTimeout(later, wait);\n\t\t\t}\n\t\t};\n\t};\n\n\tvar loader = (function(){\n\t\tvar preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;\n\n\t\tvar eLvW, elvH, eLtop, eLleft, eLright, eLbottom, isBodyHidden;\n\n\t\tvar regImg = /^img$/i;\n\t\tvar regIframe = /^iframe$/i;\n\n\t\tvar supportScroll = ('onscroll' in window) && !(/(gle|ing)bot/.test(navigator.userAgent));\n\n\t\tvar shrinkExpand = 0;\n\t\tvar currentExpand = 0;\n\n\t\tvar isLoading = 0;\n\t\tvar lowRuns = -1;\n\n\t\tvar resetPreloading = function(e){\n\t\t\tisLoading--;\n\t\t\tif(!e || isLoading < 0 || !e.target){\n\t\t\t\tisLoading = 0;\n\t\t\t}\n\t\t};\n\n\t\tvar isVisible = function (elem) {\n\t\t\tif (isBodyHidden == null) {\n\t\t\t\tisBodyHidden = getCSS(document.body, 'visibility') == 'hidden';\n\t\t\t}\n\n\t\t\treturn isBodyHidden || !(getCSS(elem.parentNode, 'visibility') == 'hidden' && getCSS(elem, 'visibility') == 'hidden');\n\t\t};\n\n\t\tvar isNestedVisible = function(elem, elemExpand){\n\t\t\tvar outerRect;\n\t\t\tvar parent = elem;\n\t\t\tvar visible = isVisible(elem);\n\n\t\t\teLtop -= elemExpand;\n\t\t\teLbottom += elemExpand;\n\t\t\teLleft -= elemExpand;\n\t\t\teLright += elemExpand;\n\n\t\t\twhile(visible && (parent = parent.offsetParent) && parent != document.body && parent != docElem){\n\t\t\t\tvisible = ((getCSS(parent, 'opacity') || 1) > 0);\n\n\t\t\t\tif(visible && getCSS(parent, 'overflow') != 'visible'){\n\t\t\t\t\touterRect = parent.getBoundingClientRect();\n\t\t\t\t\tvisible = eLright > outerRect.left &&\n\t\t\t\t\t\teLleft < outerRect.right &&\n\t\t\t\t\t\teLbottom > outerRect.top - 1 &&\n\t\t\t\t\t\teLtop < outerRect.bottom + 1\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn visible;\n\t\t};\n\n\t\tvar checkElements = function() {\n\t\t\tvar eLlen, i, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal,\n\t\t\t\tbeforeExpandVal, defaultExpand, preloadExpand, hFac;\n\t\t\tvar lazyloadElems = lazysizes.elements;\n\n\t\t\tif((loadMode = lazySizesCfg.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)){\n\n\t\t\t\ti = 0;\n\n\t\t\t\tlowRuns++;\n\n\t\t\t\tfor(; i < eLlen; i++){\n\n\t\t\t\t\tif(!lazyloadElems[i] || lazyloadElems[i]._lazyRace){continue;}\n\n\t\t\t\t\tif(!supportScroll || (lazysizes.prematureUnveil && lazysizes.prematureUnveil(lazyloadElems[i]))){unveilElement(lazyloadElems[i]);continue;}\n\n\t\t\t\t\tif(!(elemExpandVal = lazyloadElems[i][_getAttribute]('data-expand')) || !(elemExpand = elemExpandVal * 1)){\n\t\t\t\t\t\telemExpand = currentExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!defaultExpand) {\n\t\t\t\t\t\tdefaultExpand = (!lazySizesCfg.expand || lazySizesCfg.expand < 1) ?\n\t\t\t\t\t\t\tdocElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370 :\n\t\t\t\t\t\t\tlazySizesCfg.expand;\n\n\t\t\t\t\t\tlazysizes._defEx = defaultExpand;\n\n\t\t\t\t\t\tpreloadExpand = defaultExpand * lazySizesCfg.expFactor;\n\t\t\t\t\t\thFac = lazySizesCfg.hFac;\n\t\t\t\t\t\tisBodyHidden = null;\n\n\t\t\t\t\t\tif(currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document.hidden){\n\t\t\t\t\t\t\tcurrentExpand = preloadExpand;\n\t\t\t\t\t\t\tlowRuns = 0;\n\t\t\t\t\t\t} else if(loadMode > 1 && lowRuns > 1 && isLoading < 6){\n\t\t\t\t\t\t\tcurrentExpand = defaultExpand;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurrentExpand = shrinkExpand;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(beforeExpandVal !== elemExpand){\n\t\t\t\t\t\teLvW = innerWidth + (elemExpand * hFac);\n\t\t\t\t\t\telvH = innerHeight + elemExpand;\n\t\t\t\t\t\telemNegativeExpand = elemExpand * -1;\n\t\t\t\t\t\tbeforeExpandVal = elemExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\trect = lazyloadElems[i].getBoundingClientRect();\n\n\t\t\t\t\tif ((eLbottom = rect.bottom) >= elemNegativeExpand &&\n\t\t\t\t\t\t(eLtop = rect.top) <= elvH &&\n\t\t\t\t\t\t(eLright = rect.right) >= elemNegativeExpand * hFac &&\n\t\t\t\t\t\t(eLleft = rect.left) <= eLvW &&\n\t\t\t\t\t\t(eLbottom || eLright || eLleft || eLtop) &&\n\t\t\t\t\t\t(lazySizesCfg.loadHidden || isVisible(lazyloadElems[i])) &&\n\t\t\t\t\t\t((isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4)) || isNestedVisible(lazyloadElems[i], elemExpand))){\n\t\t\t\t\t\tunveilElement(lazyloadElems[i]);\n\t\t\t\t\t\tloadedSomething = true;\n\t\t\t\t\t\tif(isLoading > 9){break;}\n\t\t\t\t\t} else if(!loadedSomething && isCompleted && !autoLoadElem &&\n\t\t\t\t\t\tisLoading < 4 && lowRuns < 4 && loadMode > 2 &&\n\t\t\t\t\t\t(preloadElems[0] || lazySizesCfg.preloadAfterLoad) &&\n\t\t\t\t\t\t(preloadElems[0] || (!elemExpandVal && ((eLbottom || eLright || eLleft || eLtop) || lazyloadElems[i][_getAttribute](lazySizesCfg.sizesAttr) != 'auto')))){\n\t\t\t\t\t\tautoLoadElem = preloadElems[0] || lazyloadElems[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(autoLoadElem && !loadedSomething){\n\t\t\t\t\tunveilElement(autoLoadElem);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar throttledCheckElements = throttle(checkElements);\n\n\t\tvar switchLoadingClass = function(e){\n\t\t\tvar elem = e.target;\n\n\t\t\tif (elem._lazyCache) {\n\t\t\t\tdelete elem._lazyCache;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresetPreloading(e);\n\t\t\taddClass(elem, lazySizesCfg.loadedClass);\n\t\t\tremoveClass(elem, lazySizesCfg.loadingClass);\n\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass);\n\t\t\ttriggerEvent(elem, 'lazyloaded');\n\t\t};\n\t\tvar rafedSwitchLoadingClass = rAFIt(switchLoadingClass);\n\t\tvar rafSwitchLoadingClass = function(e){\n\t\t\trafedSwitchLoadingClass({target: e.target});\n\t\t};\n\n\t\tvar changeIframeSrc = function(elem, src){\n\t\t\tvar loadMode = elem.getAttribute('data-load-mode') || lazySizesCfg.iframeLoadMode;\n\n\t\t\t// loadMode can be also a string!\n\t\t\tif (loadMode == 0) {\n\t\t\t\telem.contentWindow.location.replace(src);\n\t\t\t} else if (loadMode == 1) {\n\t\t\t\telem.src = src;\n\t\t\t}\n\t\t};\n\n\t\tvar handleSources = function(source){\n\t\t\tvar customMedia;\n\n\t\t\tvar sourceSrcset = source[_getAttribute](lazySizesCfg.srcsetAttr);\n\n\t\t\tif( (customMedia = lazySizesCfg.customMedia[source[_getAttribute]('data-media') || source[_getAttribute]('media')]) ){\n\t\t\t\tsource.setAttribute('media', customMedia);\n\t\t\t}\n\n\t\t\tif(sourceSrcset){\n\t\t\t\tsource.setAttribute('srcset', sourceSrcset);\n\t\t\t}\n\t\t};\n\n\t\tvar lazyUnveil = rAFIt(function (elem, detail, isAuto, sizes, isImg){\n\t\t\tvar src, srcset, parent, isPicture, event, firesLoad;\n\n\t\t\tif(!(event = triggerEvent(elem, 'lazybeforeunveil', detail)).defaultPrevented){\n\n\t\t\t\tif(sizes){\n\t\t\t\t\tif(isAuto){\n\t\t\t\t\t\taddClass(elem, lazySizesCfg.autosizesClass);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.setAttribute('sizes', sizes);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsrcset = elem[_getAttribute](lazySizesCfg.srcsetAttr);\n\t\t\t\tsrc = elem[_getAttribute](lazySizesCfg.srcAttr);\n\n\t\t\t\tif(isImg) {\n\t\t\t\t\tparent = elem.parentNode;\n\t\t\t\t\tisPicture = parent && regPicture.test(parent.nodeName || '');\n\t\t\t\t}\n\n\t\t\t\tfiresLoad = detail.firesLoad || (('src' in elem) && (srcset || src || isPicture));\n\n\t\t\t\tevent = {target: elem};\n\n\t\t\t\taddClass(elem, lazySizesCfg.loadingClass);\n\n\t\t\t\tif(firesLoad){\n\t\t\t\t\tclearTimeout(resetPreloadingTimer);\n\t\t\t\t\tresetPreloadingTimer = setTimeout(resetPreloading, 2500);\n\t\t\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass, true);\n\t\t\t\t}\n\n\t\t\t\tif(isPicture){\n\t\t\t\t\tforEach.call(parent.getElementsByTagName('source'), handleSources);\n\t\t\t\t}\n\n\t\t\t\tif(srcset){\n\t\t\t\t\telem.setAttribute('srcset', srcset);\n\t\t\t\t} else if(src && !isPicture){\n\t\t\t\t\tif(regIframe.test(elem.nodeName)){\n\t\t\t\t\t\tchangeIframeSrc(elem, src);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.src = src;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(isImg && (srcset || isPicture)){\n\t\t\t\t\tupdatePolyfill(elem, {src: src});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(elem._lazyRace){\n\t\t\t\tdelete elem._lazyRace;\n\t\t\t}\n\t\t\tremoveClass(elem, lazySizesCfg.lazyClass);\n\n\t\t\trAF(function(){\n\t\t\t\t// Part of this can be removed as soon as this fix is older: https://bugs.chromium.org/p/chromium/issues/detail?id=7731 (2015)\n\t\t\t\tvar isLoaded = elem.complete && elem.naturalWidth > 1;\n\n\t\t\t\tif( !firesLoad || isLoaded){\n\t\t\t\t\tif (isLoaded) {\n\t\t\t\t\t\taddClass(elem, lazySizesCfg.fastLoadedClass);\n\t\t\t\t\t}\n\t\t\t\t\tswitchLoadingClass(event);\n\t\t\t\t\telem._lazyCache = true;\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tif ('_lazyCache' in elem) {\n\t\t\t\t\t\t\tdelete elem._lazyCache;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 9);\n\t\t\t\t}\n\t\t\t\tif (elem.loading == 'lazy') {\n\t\t\t\t\tisLoading--;\n\t\t\t\t}\n\t\t\t}, true);\n\t\t});\n\n\t\t/**\n\t\t *\n\t\t * @param elem { Element }\n\t\t */\n\t\tvar unveilElement = function (elem){\n\t\t\tif (elem._lazyRace) {return;}\n\t\t\tvar detail;\n\n\t\t\tvar isImg = regImg.test(elem.nodeName);\n\n\t\t\t//allow using sizes=\"auto\", but don't use. it's invalid. Use data-sizes=\"auto\" or a valid value for sizes instead (i.e.: sizes=\"80vw\")\n\t\t\tvar sizes = isImg && (elem[_getAttribute](lazySizesCfg.sizesAttr) || elem[_getAttribute]('sizes'));\n\t\t\tvar isAuto = sizes == 'auto';\n\n\t\t\tif( (isAuto || !isCompleted) && isImg && (elem[_getAttribute]('src') || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesCfg.errorClass) && hasClass(elem, lazySizesCfg.lazyClass)){return;}\n\n\t\t\tdetail = triggerEvent(elem, 'lazyunveilread').detail;\n\n\t\t\tif(isAuto){\n\t\t\t\t autoSizer.updateElem(elem, true, elem.offsetWidth);\n\t\t\t}\n\n\t\t\telem._lazyRace = true;\n\t\t\tisLoading++;\n\n\t\t\tlazyUnveil(elem, detail, isAuto, sizes, isImg);\n\t\t};\n\n\t\tvar afterScroll = debounce(function(){\n\t\t\tlazySizesCfg.loadMode = 3;\n\t\t\tthrottledCheckElements();\n\t\t});\n\n\t\tvar altLoadmodeScrollListner = function(){\n\t\t\tif(lazySizesCfg.loadMode == 3){\n\t\t\t\tlazySizesCfg.loadMode = 2;\n\t\t\t}\n\t\t\tafterScroll();\n\t\t};\n\n\t\tvar onload = function(){\n\t\t\tif(isCompleted){return;}\n\t\t\tif(Date.now() - started < 999){\n\t\t\t\tsetTimeout(onload, 999);\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tisCompleted = true;\n\n\t\t\tlazySizesCfg.loadMode = 3;\n\n\t\t\tthrottledCheckElements();\n\n\t\t\taddEventListener('scroll', altLoadmodeScrollListner, true);\n\t\t};\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tstarted = Date.now();\n\n\t\t\t\tlazysizes.elements = document.getElementsByClassName(lazySizesCfg.lazyClass);\n\t\t\t\tpreloadElems = document.getElementsByClassName(lazySizesCfg.lazyClass + ' ' + lazySizesCfg.preloadClass);\n\n\t\t\t\taddEventListener('scroll', throttledCheckElements, true);\n\n\t\t\t\taddEventListener('resize', throttledCheckElements, true);\n\n\t\t\t\taddEventListener('pageshow', function (e) {\n\t\t\t\t\tif (e.persisted) {\n\t\t\t\t\t\tvar loadingElements = document.querySelectorAll('.' + lazySizesCfg.loadingClass);\n\n\t\t\t\t\t\tif (loadingElements.length && loadingElements.forEach) {\n\t\t\t\t\t\t\trequestAnimationFrame(function () {\n\t\t\t\t\t\t\t\tloadingElements.forEach( function (img) {\n\t\t\t\t\t\t\t\t\tif (img.complete) {\n\t\t\t\t\t\t\t\t\t\tunveilElement(img);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif(window.MutationObserver){\n\t\t\t\t\tnew MutationObserver( throttledCheckElements ).observe( docElem, {childList: true, subtree: true, attributes: true} );\n\t\t\t\t} else {\n\t\t\t\t\tdocElem[_addEventListener]('DOMNodeInserted', throttledCheckElements, true);\n\t\t\t\t\tdocElem[_addEventListener]('DOMAttrModified', throttledCheckElements, true);\n\t\t\t\t\tsetInterval(throttledCheckElements, 999);\n\t\t\t\t}\n\n\t\t\t\taddEventListener('hashchange', throttledCheckElements, true);\n\n\t\t\t\t//, 'fullscreenchange'\n\t\t\t\t['focus', 'mouseover', 'click', 'load', 'transitionend', 'animationend'].forEach(function(name){\n\t\t\t\t\tdocument[_addEventListener](name, throttledCheckElements, true);\n\t\t\t\t});\n\n\t\t\t\tif((/d$|^c/.test(document.readyState))){\n\t\t\t\t\tonload();\n\t\t\t\t} else {\n\t\t\t\t\taddEventListener('load', onload);\n\t\t\t\t\tdocument[_addEventListener]('DOMContentLoaded', throttledCheckElements);\n\t\t\t\t\tsetTimeout(onload, 20000);\n\t\t\t\t}\n\n\t\t\t\tif(lazysizes.elements.length){\n\t\t\t\t\tcheckElements();\n\t\t\t\t\trAF._lsFlush();\n\t\t\t\t} else {\n\t\t\t\t\tthrottledCheckElements();\n\t\t\t\t}\n\t\t\t},\n\t\t\tcheckElems: throttledCheckElements,\n\t\t\tunveil: unveilElement,\n\t\t\t_aLSL: altLoadmodeScrollListner,\n\t\t};\n\t})();\n\n\n\tvar autoSizer = (function(){\n\t\tvar autosizesElems;\n\n\t\tvar sizeElement = rAFIt(function(elem, parent, event, width){\n\t\t\tvar sources, i, len;\n\t\t\telem._lazysizesWidth = width;\n\t\t\twidth += 'px';\n\n\t\t\telem.setAttribute('sizes', width);\n\n\t\t\tif(regPicture.test(parent.nodeName || '')){\n\t\t\t\tsources = parent.getElementsByTagName('source');\n\t\t\t\tfor(i = 0, len = sources.length; i < len; i++){\n\t\t\t\t\tsources[i].setAttribute('sizes', width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!event.detail.dataAttr){\n\t\t\t\tupdatePolyfill(elem, event.detail);\n\t\t\t}\n\t\t});\n\t\t/**\n\t\t *\n\t\t * @param elem {Element}\n\t\t * @param dataAttr\n\t\t * @param [width] { number }\n\t\t */\n\t\tvar getSizeElement = function (elem, dataAttr, width){\n\t\t\tvar event;\n\t\t\tvar parent = elem.parentNode;\n\n\t\t\tif(parent){\n\t\t\t\twidth = getWidth(elem, parent, width);\n\t\t\t\tevent = triggerEvent(elem, 'lazybeforesizes', {width: width, dataAttr: !!dataAttr});\n\n\t\t\t\tif(!event.defaultPrevented){\n\t\t\t\t\twidth = event.detail.width;\n\n\t\t\t\t\tif(width && width !== elem._lazysizesWidth){\n\t\t\t\t\t\tsizeElement(elem, parent, event, width);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar updateElementsSizes = function(){\n\t\t\tvar i;\n\t\t\tvar len = autosizesElems.length;\n\t\t\tif(len){\n\t\t\t\ti = 0;\n\n\t\t\t\tfor(; i < len; i++){\n\t\t\t\t\tgetSizeElement(autosizesElems[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar debouncedUpdateElementsSizes = debounce(updateElementsSizes);\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tautosizesElems = document.getElementsByClassName(lazySizesCfg.autosizesClass);\n\t\t\t\taddEventListener('resize', debouncedUpdateElementsSizes);\n\t\t\t},\n\t\t\tcheckElems: debouncedUpdateElementsSizes,\n\t\t\tupdateElem: getSizeElement\n\t\t};\n\t})();\n\n\tvar init = function(){\n\t\tif(!init.i && document.getElementsByClassName){\n\t\t\tinit.i = true;\n\t\t\tautoSizer._();\n\t\t\tloader._();\n\t\t}\n\t};\n\n\tsetTimeout(function(){\n\t\tif(lazySizesCfg.init){\n\t\t\tinit();\n\t\t}\n\t});\n\n\tlazysizes = {\n\t\t/**\n\t\t * @type { LazySizesConfigPartial }\n\t\t */\n\t\tcfg: lazySizesCfg,\n\t\tautoSizer: autoSizer,\n\t\tloader: loader,\n\t\tinit: init,\n\t\tuP: updatePolyfill,\n\t\taC: addClass,\n\t\trC: removeClass,\n\t\thC: hasClass,\n\t\tfire: triggerEvent,\n\t\tgW: getWidth,\n\t\trAF: rAF,\n\t};\n\n\treturn lazysizes;\n}\n));\n","(function(window, factory) {\n\tif(!window) {return;}\n\tvar globalInstall = function(){\n\t\tfactory(window.lazySizes);\n\t\twindow.removeEventListener('lazyunveilread', globalInstall, true);\n\t};\n\n\tfactory = factory.bind(null, window, window.document);\n\n\tif(typeof module == 'object' && module.exports){\n\t\tfactory(require('lazysizes'));\n\t} else if (typeof define == 'function' && define.amd) {\n\t\tdefine(['lazysizes'], factory);\n\t} else if(window.lazySizes) {\n\t\tglobalInstall();\n\t} else {\n\t\twindow.addEventListener('lazyunveilread', globalInstall, true);\n\t}\n}(typeof window != 'undefined' ?\n\twindow : 0, function(window, document, lazySizes) {\n\t'use strict';\n\n\tif(!window.addEventListener){return;}\n\n\tvar regDescriptors = /\\s+(\\d+)(w|h)\\s+(\\d+)(w|h)/;\n\tvar regCssFit = /parent-fit[\"']*\\s*:\\s*[\"']*(contain|cover|width)/;\n\tvar regCssObject = /parent-container[\"']*\\s*:\\s*[\"']*(.+?)(?=(\\s|$|,|'|\"|;))/;\n\tvar regPicture = /^picture$/i;\n\tvar cfg = lazySizes.cfg;\n\n\tvar getCSS = function (elem){\n\t\treturn (getComputedStyle(elem, null) || {});\n\t};\n\n\tvar parentFit = {\n\n\t\tgetParent: function(element, parentSel){\n\t\t\tvar parent = element;\n\t\t\tvar parentNode = element.parentNode;\n\n\t\t\tif((!parentSel || parentSel == 'prev') && parentNode && regPicture.test(parentNode.nodeName || '')){\n\t\t\t\tparentNode = parentNode.parentNode;\n\t\t\t}\n\n\t\t\tif(parentSel != 'self'){\n\t\t\t\tif(parentSel == 'prev'){\n\t\t\t\t\tparent = element.previousElementSibling;\n\t\t\t\t} else if(parentSel && (parentNode.closest || window.jQuery)){\n\t\t\t\t\tparent = (parentNode.closest ?\n\t\t\t\t\t\t\tparentNode.closest(parentSel) :\n\t\t\t\t\t\t\tjQuery(parentNode).closest(parentSel)[0]) ||\n\t\t\t\t\t\tparentNode\n\t\t\t\t\t;\n\t\t\t\t} else {\n\t\t\t\t\tparent = parentNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn parent;\n\t\t},\n\n\t\tgetFit: function(element){\n\t\t\tvar tmpMatch, parentObj;\n\t\t\tvar css = getCSS(element);\n\t\t\tvar content = css.content || css.fontFamily;\n\t\t\tvar obj = {\n\t\t\t\tfit: element._lazysizesParentFit || element.getAttribute('data-parent-fit')\n\t\t\t};\n\n\t\t\tif(!obj.fit && content && (tmpMatch = content.match(regCssFit))){\n\t\t\t\tobj.fit = tmpMatch[1];\n\t\t\t}\n\n\t\t\tif(obj.fit){\n\t\t\t\tparentObj = element._lazysizesParentContainer || element.getAttribute('data-parent-container');\n\n\t\t\t\tif(!parentObj && content && (tmpMatch = content.match(regCssObject))){\n\t\t\t\t\tparentObj = tmpMatch[1];\n\t\t\t\t}\n\n\t\t\t\tobj.parent = parentFit.getParent(element, parentObj);\n\n\n\t\t\t} else {\n\t\t\t\tobj.fit = css.objectFit;\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\tgetImageRatio: function(element){\n\t\t\tvar i, srcset, media, ratio, match, width, height;\n\t\t\tvar parent = element.parentNode;\n\t\t\tvar elements = parent && regPicture.test(parent.nodeName || '') ?\n\t\t\t\t\tparent.querySelectorAll('source, img') :\n\t\t\t\t\t[element]\n\t\t\t\t;\n\n\t\t\tfor(i = 0; i < elements.length; i++){\n\t\t\t\telement = elements[i];\n\t\t\t\tsrcset = element.getAttribute(cfg.srcsetAttr) || element.getAttribute('srcset') || element.getAttribute('data-pfsrcset') || element.getAttribute('data-risrcset') || '';\n\t\t\t\tmedia = element._lsMedia || element.getAttribute('media');\n\t\t\t\tmedia = cfg.customMedia[element.getAttribute('data-media') || media] || media;\n\n\t\t\t\tif(srcset && (!media || (window.matchMedia && matchMedia(media) || {}).matches )){\n\t\t\t\t\tratio = parseFloat(element.getAttribute('data-aspectratio'));\n\n\t\t\t\t\tif (!ratio) {\n\t\t\t\t\t\tmatch = srcset.match(regDescriptors);\n\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tif(match[2] == 'w'){\n\t\t\t\t\t\t\t\twidth = match[1];\n\t\t\t\t\t\t\t\theight = match[3];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\twidth = match[3];\n\t\t\t\t\t\t\t\theight = match[1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twidth = element.getAttribute('width');\n\t\t\t\t\t\t\theight = element.getAttribute('height');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tratio = width / height;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ratio;\n\t\t},\n\n\t\tcalculateSize: function(element, width){\n\t\t\tvar displayRatio, height, imageRatio, retWidth;\n\t\t\tvar fitObj = this.getFit(element);\n\t\t\tvar fit = fitObj.fit;\n\t\t\tvar fitElem = fitObj.parent;\n\n\t\t\tif(fit != 'width' && ((fit != 'contain' && fit != 'cover') || !(imageRatio = this.getImageRatio(element)))){\n\t\t\t\treturn width;\n\t\t\t}\n\n\t\t\tif(fitElem){\n\t\t\t\twidth = fitElem.clientWidth;\n\t\t\t} else {\n\t\t\t\tfitElem = element;\n\t\t\t}\n\n\t\t\tretWidth = width;\n\n\t\t\tif(fit == 'width'){\n\t\t\t\tretWidth = width;\n\t\t\t} else {\n\t\t\t\theight = fitElem.clientHeight;\n\n\t\t\t\tif((displayRatio =  width / height) && ((fit == 'cover' && displayRatio < imageRatio) || (fit == 'contain' && displayRatio > imageRatio))){\n\t\t\t\t\tretWidth = width * (imageRatio / displayRatio);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn retWidth;\n\t\t}\n\t};\n\n\tlazySizes.parentFit = parentFit;\n\n\tdocument.addEventListener('lazybeforesizes', function(e){\n\t\tif(e.defaultPrevented || e.detail.instance != lazySizes){return;}\n\n\t\tvar element = e.target;\n\t\te.detail.width = parentFit.calculateSize(element, e.detail.width);\n\t});\n}));\n","// JavaScript files are compiled and minified during the build process to the assets/built folder. See available scripts in the package.json file.\n\n// Import CSS\nimport \"../css/index.css\";\n\nimport { handleHomeGalleryLightbox } from './photoSwipe';\nimport { handlePostContentLightbox } from \"./photoSwipe\";\nimport { handleHomeHeroSwiper } from \"./swiper\";\n\nfunction handleHeaderDropdown() {\n    const target = document.querySelector('#header-nav-dropdown-target');\n    const dropdownBody = target.querySelector('ul')\n    if (!target) {return;}\n\n    if (dropdownBody.querySelector('li')) {\n        target.classList.remove('hidden')\n    }\n\n    target.addEventListener('mouseover', () => {\n        dropdownBody.classList.add('active')\n    })\n    target.addEventListener('mouseout', () => {\n        dropdownBody.classList.remove('active')\n    })\n}\n\nhandleHeaderDropdown();\n\nif (document.getElementById('home-hero-swiper')) {\n    handleHomeHeroSwiper();\n}\n\nif (document.getElementById('home-gallery')) {\n    handleHomeGalleryLightbox();\n}\n\nif (document.getElementById('post-content')) {\n    handlePostContentLightbox();\n}\n\n// Lazyload plugin\nimport 'lazysizes';\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';","// import Swiper JS\nimport Swiper from \"swiper\";\nimport { Scrollbar } from 'swiper/modules'\n// import Swiper styles\nimport \"swiper/css\";\nimport \"swiper/css/scrollbar\";\n\nexport function handleHomeHeroSwiper() {\n    const homeHeroSwiper = new Swiper(\"#home-hero-swiper\", {\n\n        modules: [Scrollbar],\n\n        direction: \"horizontal\",\n        spaceBetween: 10,\n        slidesPerView: 1.6,\n\n        breakpoints: {\n            1024: {\n                slidesPerView: 4,\n                spaceBetween: 20,\n            },\n            768: {\n                slidesPerView: 3,\n            },\n            600: {\n                slidesPerView: 2\n            }\n        },\n\n        scrollbar: {\n            el: \".swiper-scrollbar\",\n        },\n    });\n}\n","import PhotoSwipeLightbox from \"photoswipe/lightbox\";\nimport PhotoSwipe from \"photoswipe\";\nimport \"photoswipe/style.css\";\nimport PhotoSwipeDynamicCaption from \"photoswipe-dynamic-caption-plugin\";\nimport \"photoswipe-dynamic-caption-plugin/photoswipe-dynamic-caption-plugin.css\";\n\nexport function handleHomeGalleryLightbox() {\n\n    const lightbox = new PhotoSwipeLightbox({\n        gallery: \"#home-gallery\",\n        children: \".card-lightbox-target\",\n        showHideAnimationType: \"zoom\",\n        pswpModule: PhotoSwipe,\n        paddingFn: (viewportSize) => ({\n            top: 30,\n            bottom: 30,\n        }),\n    });\n\n    const captionPlugin = new PhotoSwipeDynamicCaption(lightbox, {\n        type: \"below\",\n    });\n\n    async function loadImagesAndSetDimensions(linksSelector) {\n        try {\n            const galleryContainer = document.querySelector(\"#home-gallery\");\n            const links = galleryContainer.querySelectorAll(linksSelector);\n            if (!links.length) {\n                throw new Error(\"No links found\");\n            }\n\n            const loadImage = async (link) => {\n                return new Promise((resolve, reject) => {\n                    const img = new Image();\n                    img.src = link;\n\n                    img.onload = function () {\n                        link.setAttribute(\"data-pswp-width\", this.width);\n                        link.setAttribute(\"data-pswp-height\", this.height);\n                        resolve();\n                    };\n\n                    img.onerror = function () {\n                        reject(new Error(\"Failed to load image: \" + link.src));\n                    };\n                });\n            };\n\n            await Promise.all(Array.from(links).map(loadImage));\n        } catch (error) {\n            console.error(\"Error in loadImagesAndSetDimensions:\", error);\n        }\n    }\n\n    loadImagesAndSetDimensions(\".card-lightbox-target\");\n\n    lightbox.init();\n}\n\nexport function handlePostContentLightbox() {\n    function getMaxImageInSet(img) {\n        if (!img.srcset) {\n            return img.src;\n        }\n\n        const sources = img.srcset.split(\",\");\n        let maxWidth = 0;\n        let maxSrc = \"\";\n\n        sources.forEach((source) => {\n            const [url, widthStr] = source.trim().split(\" \");\n            const width = parseInt(widthStr);\n\n            if (width > maxWidth) { \n                maxWidth = width;\n                maxSrc = url;\n            }\n        });\n\n        return maxSrc;\n    }\n\n    function setDimensions(link) {\n        const img = new Image();\n        img.src = link.getAttribute('href');\n\n        img.onload = function () {\n            link.setAttribute(\"data-pswp-width\", this.width);\n            link.setAttribute(\"data-pswp-height\", this.height);\n        };\n    }\n\n    const images = document.querySelectorAll(\".kg-image, .kg-gallery-container img\");\n\n    if (images.length === 0) {\n        return;\n    }\n\n    images.forEach(image => {\n        const link = document.createElement(\"a\");\n        link.classList.add(\"pswp-lightbox-image\");\n        image.after(link);\n        link.setAttribute(\"href\", getMaxImageInSet(image));\n        setDimensions(link);\n        link.appendChild(image);\n    });\n\n    try {\n        const lightbox = new PhotoSwipeLightbox({\n            gallery: \"#post-content\",\n            pswpModule: PhotoSwipe,\n            children: \".pswp-lightbox-image\",\n            paddingFn: (viewportSize) => ({\n                top: 40,\n                bottom: 40,\n                left: 75,\n                right: 75\n            }),\n        });\n\n        lightbox.init();\n    } catch (error) {\n        console.error(\"Error initializing lightbox:\", error);\n    }\n}"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","setWidthHeight","w","h","style","width","height","LOAD_STATE","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","x","y","scale","propValue","undefined","e","button","ctrlKey","metaKey","altKey","shiftKey","fn","prototype","goTo","equalizePoints","p1","p2","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","setTransform","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","img","decode","catch","complete","Promise","resolve","reject","onload","onerror","defaultOptions","captionContent","type","horizontalEdgeThreshold","mobileCaptionOverlapRatio","mobileLayoutBreakpoint","verticallyCenterImage","PhotoSwipeDynamicCaption","constructor","lightbox","options","this","on","pswp","initCaption","showCaption","currSlide","onCalcSlideSize","slide","dynamicCaption","element","remove","opener","isOpen","currZoomLevel","zoomLevels","initial","hideCaption","captionYOffset","shiftedAmount","pan","bounds","center","setCaptionYOffset","adjustPanArea","destZoomLevel","originalEvent","target","closest","preventDefault","zoomLevel","adjustedPanAreaSize","panAreaSize","originalPanAreaSize","useMobileLayout","call","window","innerWidth","hidden","captionElement","classList","add","captionFadeTimeout","clearTimeout","setTimeout","visibility","setCaptionPosition","captionEl","isOnHorizontalEdge","left","top","setCaptionWidth","removeProperty","setCaptionType","prevType","dataset","pswpCaptionType","updateCaptionPosition","imageWidth","ceil","imageHeight","captionSize","useMobileVersion","captionHTML","getCaptionHTML","innerHTML","dispatch","holderElement","storeOriginalPanAreaSize","update","measureCaptionSize","captionWidth","horizontalEnding","recalculateZoomLevelAndBounds","viewportSize","captionHeight","verticalEnding","verticalLeftover","initialPanAreaHeight","maxPositionX","storeAdjustedPanAreaSize","rect","getBoundingClientRect","currSlideElement","data","hiddenCaption","querySelector","getAttribute","isObject","obj","Object","extend","src","keys","forEach","key","length","ssrDocument","body","addEventListener","removeEventListener","activeElement","blur","nodeName","getElementById","createEvent","initEvent","children","childNodes","setAttribute","getElementsByTagName","createElementNS","importNode","location","hash","host","hostname","href","origin","pathname","protocol","search","getDocument","doc","ssrWindow","userAgent","history","replaceState","pushState","go","back","CustomEvent","getComputedStyle","getPropertyValue","Image","Date","screen","matchMedia","requestAnimationFrame","callback","cancelAnimationFrame","getWindow","win","classesToTokens","classes","trim","split","filter","c","nextTick","delay","now","getTranslate","axis","matrix","curTransform","transformMatrix","curStyle","currentStyle","WebKitCSSMatrix","webkitTransform","map","a","replace","join","MozTransform","OTransform","MsTransform","msTransform","toString","m41","parseFloat","m42","o","slice","to","arguments","noExtend","i","nextSource","node","HTMLElement","nodeType","keysArray","indexOf","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","enumerable","__swiper__","setCSSProperty","varName","varValue","setProperty","animateCSSModeScroll","_ref","swiper","targetPosition","side","startPosition","translate","time","startTime","params","speed","wrapperEl","scrollSnapType","cssModeFrameID","dir","isOutOfBound","current","animate","getTime","progress","easeProgress","cos","PI","currentPosition","scrollTo","overflow","elementChildren","matches","showWarning","text","console","warn","err","tag","elementStyle","elementIndex","child","previousSibling","elementOuterSize","size","includeMargins","offsetWidth","support","deviceCached","browser","getSupport","smoothScroll","documentElement","touch","DocumentTouch","calcSupport","getDevice","overrides","_temp","platform","ua","device","ios","android","screenWidth","screenHeight","ipad","ipod","iphone","windows","macos","os","calcDevice","getBrowser","needPerspectiveFix","toLowerCase","String","includes","major","minor","num","Number","isWebView","test","isSafariBrowser","need3dFix","calcBrowser","eventsEmitter","events","handler","priority","self","eventsListeners","destroyed","method","event","once","onceHandler","off","__emitterProxy","_len","args","_key","apply","onAny","eventsAnyListeners","offAny","index","splice","eventHandler","emit","context","_len2","_key2","unshift","processLazyPreloader","imageEl","slideEl","isElement","slideClass","lazyEl","lazyPreloaderClass","shadowRoot","unlazy","slides","removeAttribute","preload","amount","lazyPreloadPrevNext","slidesPerView","slidesPerViewDynamic","activeIndex","grid","rows","activeColumn","preloadColumns","push","_","column","slideIndexLastInView","rewind","loop","realIndex","updateSize","clientWidth","clientHeight","isHorizontal","isVertical","parseInt","isNaN","assign","updateSlides","getDirectionPropertyValue","label","getDirectionLabel","slidesEl","swiperSize","rtlTranslate","rtl","wrongRTL","isVirtual","virtual","enabled","previousSlidesLength","slidesLength","snapGrid","slidesGrid","slidesSizesGrid","offsetBefore","slidesOffsetBefore","offsetAfter","slidesOffsetAfter","previousSnapGridLength","previousSlidesGridLength","spaceBetween","slidePosition","prevSlideSize","virtualSize","marginLeft","marginRight","marginBottom","marginTop","centeredSlides","cssMode","gridEnabled","slideSize","initSlides","unsetSlides","shouldResetSlideSize","breakpoints","updateSlide","slideStyles","currentTransform","currentWebKitTransform","roundLengths","paddingLeft","paddingRight","boxSizing","floor","swiperSlideSize","slidesPerGroup","slidesPerGroupSkip","effect","setWrapperSize","updateWrapperSize","newSlidesGrid","slidesGridItem","groups","slidesBefore","slidesAfter","groupSize","slideIndex","centeredSlidesBounds","allSlidesSize","slideSizeValue","maxSnap","snap","centerInsufficientSlides","allSlidesOffset","snapIndex","addToSnapGrid","addToSlidesGrid","v","watchOverflow","checkOverflow","watchSlidesProgress","updateSlidesOffset","backFaceHiddenClass","containerModifierClass","hasClassBackfaceClassAdded","contains","maxBackfaceHiddenSlides","updateAutoHeight","activeSlides","newHeight","setTransition","getSlideByIndex","getSlideIndexByData","visibleSlides","offsetHeight","minusOffset","offsetLeft","offsetTop","swiperSlideOffset","cssOverflowAdjustment","updateSlidesProgress","offsetCenter","slideVisibleClass","slideFullyVisibleClass","visibleSlidesIndexes","slideOffset","slideProgress","minTranslate","originalSlideProgress","slideBefore","slideAfter","isFullyVisible","originalProgress","updateProgress","multiplier","translatesDiff","maxTranslate","isBeginning","isEnd","progressLoop","wasBeginning","wasEnd","isBeginningRounded","isEndRounded","firstSlideIndex","lastSlideIndex","firstSlideTranslate","lastSlideTranslate","translateMax","translateAbs","autoHeight","updateSlidesClasses","getFilteredSlide","activeSlide","prevSlide","nextSlide","slideActiveClass","slideNextClass","slidePrevClass","nextEls","nextElementSibling","next","elementNextAll","prevEls","previousElementSibling","prev","elementPrevAll","emitSlidesClasses","updateActiveIndex","newActiveIndex","previousIndex","previousRealIndex","previousSnapIndex","getVirtualRealIndex","aIndex","normalizeSlideIndex","getActiveIndexByTranslate","skip","firstSlideInColumn","activeSlideIndex","initialized","runCallbacksOnInit","updateClickedSlide","path","pathEl","slideFound","clickedSlide","clickedIndex","slideToClickedSlide","virtualTranslate","currentTranslate","setTranslate","byController","newProgress","previousTranslate","translateTo","runCallbacks","translateBounds","internal","animating","preventInteractionOnTransition","newTranslate","isH","behavior","onTranslateToWrapperTransitionEnd","transitionEmit","direction","step","slideTo","normalizedTranslate","normalizedGrid","normalizedGridNext","allowSlideNext","allowSlidePrev","transitionStart","transitionEnd","t","_immediateVirtual","_cssModeVirtualInitialSet","initialSlide","onSlideToWrapperTransitionEnd","slideToLoop","newIndex","targetSlideIndex","cols","needLoopFix","loopFix","slideRealIndex","slideNext","perGroup","slidesPerGroupAuto","increment","loopPreventsSliding","_clientLeft","clientLeft","slidePrev","normalize","normalizedSnapGrid","prevSnap","prevSnapIndex","prevIndex","lastIndex","slideReset","slideToClosest","threshold","currentSnap","slideToIndex","slideSelector","loopedSlides","getSlideIndex","loopCreate","shouldFillGroup","shouldFillGrid","addBlankSlides","amountOfSlides","slideBlankClass","append","loopAddBlankSlides","recalcSlides","byMousewheel","loopAdditionalSlides","fill","prependSlidesIndexes","appendSlidesIndexes","isNext","isPrev","slidesPrepended","slidesAppended","activeColIndexWithShift","colIndexToPrepend","__preventObserver__","swiperLoopMoveDOM","prepend","currentSlideTranslate","diff","touchEventsData","startTranslate","shift","controller","control","loopParams","loopDestroy","newSlidesOrder","swiperSlideIndex","preventEdgeSwipe","startX","edgeSwipeDetection","edgeSwipeThreshold","onTouchStart","pointerId","targetTouches","touchId","identifier","pageX","touches","simulateTouch","pointerType","targetEl","touchEventsTarget","which","isTouched","isMoved","swipingClassHasValue","noSwipingClass","eventPath","composedPath","noSwipingSelector","isTargetShadow","noSwiping","base","__closestFrom","assignedSlot","found","getRootNode","closestElement","allowClick","swipeHandler","currentX","currentY","pageY","startY","allowTouchCallbacks","isScrolling","startMoving","touchStartTime","swipeDirection","allowThresholdMove","focusableElements","shouldPreventDefault","allowTouchMove","touchStartPreventDefault","touchStartForcePreventDefault","isContentEditable","freeMode","onTouchMove","targetTouch","changedTouches","preventedByNestedSwiper","touchReleaseOnEdges","previousX","previousY","diffX","diffY","touchAngle","atan2","cancelable","touchMoveStopPropagation","nested","stopPropagation","touchesDiff","oneWayMovement","touchRatio","prevTouchesDirection","touchesDirection","isLoop","allowLoopFix","evt","bubbles","dispatchEvent","allowMomentumBounce","grabCursor","setGrabCursor","loopSwapReset","disableParentSwiper","resistanceRatio","resistance","followFinger","onTouchEnd","touchEndTime","timeDiff","pathTree","lastClickTime","currentPos","swipeToLast","stopIndex","rewindFirstIndex","rewindLastIndex","ratio","longSwipesMs","longSwipes","longSwipesRatio","shortSwipes","navigation","nextEl","prevEl","onResize","setBreakpoint","isVirtualLoop","autoplay","running","paused","resizeTimeout","resume","onClick","preventClicks","preventClicksPropagation","stopImmediatePropagation","onScroll","scrollLeft","scrollTop","onLoad","onDocumentTouchStart","documentTouchHandlerProceeded","touchAction","capture","domMethod","swiperMethod","passive","updateOnWindowResize","isGridEnabled","defaults","init","swiperElementNodeName","resizeObserver","createElements","eventsPrefix","url","breakpointsBase","uniqueNavElements","passiveListeners","wrapperClass","_emitClasses","moduleExtendParams","allModulesParams","moduleParamName","moduleParams","auto","prototypes","transitionDuration","transitionDelay","moving","isLocked","cursor","unsetGrabCursor","attachEvents","bind","detachEvents","breakpoint","getBreakpoint","currentBreakpoint","breakpointParams","originalParams","wasMultiRow","isMultiRow","wasEnabled","emitContainerClasses","wasModuleEnabled","isModuleEnabled","disable","enable","directionChanged","needsReLoop","wasLoop","changeDirection","isEnabled","hasLoop","containerEl","currentHeight","innerHeight","points","point","minRatio","substr","value","sort","b","wasLocked","lastSlideRightEdge","addClasses","classNames","suffixes","entries","prefix","resultClasses","item","prepareClasses","autoheight","centered","removeClasses","extendedDefaults","Swiper","swipers","newParams","modules","__modules__","mod","extendParams","swiperParams","passedParams","eventName","velocity","trunc","clickTimeout","velocities","imagesToLoad","imagesLoaded","property","setProgress","cls","getSlideClasses","updates","view","exact","spv","breakLoop","translateValue","translated","newDirection","needUpdate","currentDirection","changeLanguageDirection","mount","mounted","parentNode","toUpperCase","getWrapperSelector","getWrapper","slideSlots","hostEl","lazyElements","destroy","deleteInstance","cleanStyles","object","deleteProps","static","newDefaults","module","m","installModule","Scrollbar","dragStartPos","dragSize","trackSize","divider","timeout","dragTimeout","scrollbar","dragEl","newSize","newPos","hide","opacity","display","lockClass","getPointerPosition","clientX","clientY","setDragPosition","positionRatio","box","clientTop","scrollY","scrollX","elementOffset","position","onDragStart","onDragMove","returnValue","onDragEnd","snapOnRelease","activeListener","passiveListener","eventMethod","swiperEl","checkProps","createElementIfNotDefined","horizontalClass","verticalClass","classesToSelector","dragClass","draggable","scrollbarDisabledClass","makeElementsArray","subEl","_s","prototypeGroup","protoMethod","use","observer","animationFrame","resizeHandler","orientationChangeHandler","ResizeObserver","newWidth","_ref2","contentBoxSize","contentRect","inlineSize","blockSize","observe","unobserve","observers","attach","MutationObserver","WebkitMutationObserver","mutations","observerUpdate","attributes","childList","characterData","observeParents","observeSlideChildren","containerParents","parents","parentElement","elementParents","disconnect","factory","lazySizes","lazysizes","lazySizesCfg","lazySizesDefaults","lazyClass","loadedClass","loadingClass","preloadClass","errorClass","autosizesClass","fastLoadedClass","iframeLoadMode","srcAttr","srcsetAttr","sizesAttr","minSize","customMedia","expFactor","hFac","loadMode","loadHidden","ricTimeout","throttleDelay","lazySizesConfig","lazysizesConfig","getElementsByClassName","cfg","noSupport","autosizesElems","sizeElement","getSizeElement","debouncedUpdateElementsSizes","preloadElems","isCompleted","resetPreloadingTimer","started","eLvW","elvH","eLtop","eLleft","eLright","eLbottom","isBodyHidden","regImg","regIframe","supportScroll","shrinkExpand","currentExpand","isLoading","lowRuns","resetPreloading","isVisible","isNestedVisible","checkElements","throttledCheckElements","switchLoadingClass","rafedSwitchLoadingClass","rafSwitchLoadingClass","changeIframeSrc","handleSources","lazyUnveil","unveilElement","afterScroll","altLoadmodeScrollListner","waiting","firstFns","secondFns","fns","run","rafBatch","docElem","supportPicture","HTMLPictureElement","_addEventListener","_getAttribute","requestIdleCallback","regPicture","loadEvents","regClassCache","hasClass","ele","RegExp","addClass","removeClass","reg","addRemoveLoadEvents","dom","action","triggerEvent","elem","name","detail","noBubbles","noCancelable","instance","updatePolyfill","full","polyfill","picturefill","pf","reevaluate","getCSS","getWidth","_lazysizesWidth","rAF","runFns","queue","_lsFlush","rAFIt","simple","that","throttle","lastTime","gDelay","rICTimeout","idleCallback","isPriority","debounce","func","timestamp","wait","later","last","loader","elemExpand","outerRect","visible","offsetParent","right","bottom","eLlen","autoLoadElem","loadedSomething","elemNegativeExpand","elemExpandVal","beforeExpandVal","defaultExpand","preloadExpand","lazyloadElems","_lazyRace","prematureUnveil","expand","_defEx","preloadAfterLoad","_lazyCache","contentWindow","source","sourceSrcset","isAuto","sizes","isImg","srcset","isPicture","firesLoad","defaultPrevented","isLoaded","naturalWidth","loading","autoSizer","updateElem","persisted","loadingElements","subtree","setInterval","readyState","checkElems","unveil","_aLSL","sources","dataAttr","uP","aC","rC","hC","fire","gW","exports","globalInstall","require$$0","regDescriptors","regCssFit","regCssObject","parentFit","getParent","parentSel","jQuery","getFit","tmpMatch","parentObj","css","content","fontFamily","fit","_lazysizesParentFit","_lazysizesParentContainer","objectFit","getImageRatio","media","_lsMedia","calculateSize","displayRatio","imageRatio","retWidth","fitObj","fitElem","dropdownBody","handleHeaderDropdown","PhotoSwipeLightbox","gallery","showHideAnimationType","pswpModule","PhotoSwipe","paddingFn","async","linksSelector","links","Error","loadImage","link","all","error","loadImagesAndSetDimensions","handleHomeGalleryLightbox","images","image","after","maxWidth","maxSrc","widthStr","getMaxImageInSet","setDimensions","handlePostContentLightbox"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10]}